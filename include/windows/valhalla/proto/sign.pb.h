// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "tripcommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace valhalla {
class TripSign;
class TripSignDefaultTypeInternal;
extern TripSignDefaultTypeInternal _TripSign_default_instance_;
class TripSignElement;
class TripSignElementDefaultTypeInternal;
extern TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::TripSign* Arena::CreateMaybeMessage<::valhalla::TripSign>(Arena*);
template<> ::valhalla::TripSignElement* Arena::CreateMaybeMessage<::valhalla::TripSignElement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

// ===================================================================

class TripSignElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSignElement) */ {
 public:
  inline TripSignElement() : TripSignElement(nullptr) {};
  virtual ~TripSignElement();

  TripSignElement(const TripSignElement& from);
  TripSignElement(TripSignElement&& from) noexcept
    : TripSignElement() {
    *this = ::std::move(from);
  }

  inline TripSignElement& operator=(const TripSignElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSignElement& operator=(TripSignElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TripSignElement& default_instance();

  enum HasTextCase {
    kText = 1,
    HAS_TEXT_NOT_SET = 0,
  };

  enum HasIsRouteNumberCase {
    kIsRouteNumber = 2,
    HAS_IS_ROUTE_NUMBER_NOT_SET = 0,
  };

  enum HasConsecutiveCountCase {
    kConsecutiveCount = 3,
    HAS_CONSECUTIVE_COUNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripSignElement* internal_default_instance() {
    return reinterpret_cast<const TripSignElement*>(
               &_TripSignElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TripSignElement& a, TripSignElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSignElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSignElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripSignElement* New() const final {
    return CreateMaybeMessage<TripSignElement>(nullptr);
  }

  TripSignElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TripSignElement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TripSignElement& from);
  void MergeFrom(const TripSignElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSignElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TripSignElement";
  }
  protected:
  explicit TripSignElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 4,
    kTextFieldNumber = 1,
    kIsRouteNumberFieldNumber = 2,
    kConsecutiveCountFieldNumber = 3,
  };
  // .valhalla.Pronunciation pronunciation = 4;
  bool has_pronunciation() const;
  private:
  bool _internal_has_pronunciation() const;
  public:
  void clear_pronunciation();
  const ::valhalla::Pronunciation& pronunciation() const;
  ::valhalla::Pronunciation* release_pronunciation();
  ::valhalla::Pronunciation* mutable_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation);
  private:
  const ::valhalla::Pronunciation& _internal_pronunciation() const;
  ::valhalla::Pronunciation* _internal_mutable_pronunciation();
  public:
  void unsafe_arena_set_allocated_pronunciation(
      ::valhalla::Pronunciation* pronunciation);
  ::valhalla::Pronunciation* unsafe_arena_release_pronunciation();

  // string text = 1;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bool is_route_number = 2;
  private:
  bool _internal_has_is_route_number() const;
  public:
  void clear_is_route_number();
  bool is_route_number() const;
  void set_is_route_number(bool value);
  private:
  bool _internal_is_route_number() const;
  void _internal_set_is_route_number(bool value);
  public:

  // uint32 consecutive_count = 3;
  private:
  bool _internal_has_consecutive_count() const;
  public:
  void clear_consecutive_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 consecutive_count() const;
  void set_consecutive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consecutive_count() const;
  void _internal_set_consecutive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_has_text();
  HasTextCase has_text_case() const;
  void clear_has_is_route_number();
  HasIsRouteNumberCase has_is_route_number_case() const;
  void clear_has_consecutive_count();
  HasConsecutiveCountCase has_consecutive_count_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TripSignElement)
 private:
  class _Internal;
  void set_has_text();
  void set_has_is_route_number();
  void set_has_consecutive_count();

  inline bool has_has_text() const;
  inline void clear_has_has_text();

  inline bool has_has_is_route_number() const;
  inline void clear_has_has_is_route_number();

  inline bool has_has_consecutive_count() const;
  inline void clear_has_has_consecutive_count();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::valhalla::Pronunciation* pronunciation_;
  union HasTextUnion {
    HasTextUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } has_text_;
  union HasIsRouteNumberUnion {
    HasIsRouteNumberUnion() {}
    bool is_route_number_;
  } has_is_route_number_;
  union HasConsecutiveCountUnion {
    HasConsecutiveCountUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 consecutive_count_;
  } has_consecutive_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_sign_2eproto;
};
// -------------------------------------------------------------------

class TripSign PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSign) */ {
 public:
  inline TripSign() : TripSign(nullptr) {};
  virtual ~TripSign();

  TripSign(const TripSign& from);
  TripSign(TripSign&& from) noexcept
    : TripSign() {
    *this = ::std::move(from);
  }

  inline TripSign& operator=(const TripSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSign& operator=(TripSign&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TripSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripSign* internal_default_instance() {
    return reinterpret_cast<const TripSign*>(
               &_TripSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TripSign& a, TripSign& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSign* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripSign* New() const final {
    return CreateMaybeMessage<TripSign>(nullptr);
  }

  TripSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TripSign>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TripSign& from);
  void MergeFrom(const TripSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TripSign";
  }
  protected:
  explicit TripSign(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExitNumbersFieldNumber = 1,
    kExitOntoStreetsFieldNumber = 2,
    kExitTowardLocationsFieldNumber = 3,
    kExitNamesFieldNumber = 4,
    kGuideOntoStreetsFieldNumber = 5,
    kGuideTowardLocationsFieldNumber = 6,
    kJunctionNamesFieldNumber = 7,
    kGuidanceViewJunctionsFieldNumber = 8,
    kGuidanceViewSignboardsFieldNumber = 9,
  };
  // repeated .valhalla.TripSignElement exit_numbers = 1;
  int exit_numbers_size() const;
  private:
  int _internal_exit_numbers_size() const;
  public:
  void clear_exit_numbers();
  ::valhalla::TripSignElement* mutable_exit_numbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_numbers();
  private:
  const ::valhalla::TripSignElement& _internal_exit_numbers(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_numbers();
  public:
  const ::valhalla::TripSignElement& exit_numbers(int index) const;
  ::valhalla::TripSignElement* add_exit_numbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_numbers() const;

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  int exit_onto_streets_size() const;
  private:
  int _internal_exit_onto_streets_size() const;
  public:
  void clear_exit_onto_streets();
  ::valhalla::TripSignElement* mutable_exit_onto_streets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_onto_streets();
  private:
  const ::valhalla::TripSignElement& _internal_exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_onto_streets();
  public:
  const ::valhalla::TripSignElement& exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_exit_onto_streets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_onto_streets() const;

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  int exit_toward_locations_size() const;
  private:
  int _internal_exit_toward_locations_size() const;
  public:
  void clear_exit_toward_locations();
  ::valhalla::TripSignElement* mutable_exit_toward_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_toward_locations();
  private:
  const ::valhalla::TripSignElement& _internal_exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_toward_locations();
  public:
  const ::valhalla::TripSignElement& exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_exit_toward_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_toward_locations() const;

  // repeated .valhalla.TripSignElement exit_names = 4;
  int exit_names_size() const;
  private:
  int _internal_exit_names_size() const;
  public:
  void clear_exit_names();
  ::valhalla::TripSignElement* mutable_exit_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_names();
  private:
  const ::valhalla::TripSignElement& _internal_exit_names(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_names();
  public:
  const ::valhalla::TripSignElement& exit_names(int index) const;
  ::valhalla::TripSignElement* add_exit_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_names() const;

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  int guide_onto_streets_size() const;
  private:
  int _internal_guide_onto_streets_size() const;
  public:
  void clear_guide_onto_streets();
  ::valhalla::TripSignElement* mutable_guide_onto_streets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_onto_streets();
  private:
  const ::valhalla::TripSignElement& _internal_guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* _internal_add_guide_onto_streets();
  public:
  const ::valhalla::TripSignElement& guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_guide_onto_streets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_onto_streets() const;

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  int guide_toward_locations_size() const;
  private:
  int _internal_guide_toward_locations_size() const;
  public:
  void clear_guide_toward_locations();
  ::valhalla::TripSignElement* mutable_guide_toward_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_toward_locations();
  private:
  const ::valhalla::TripSignElement& _internal_guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* _internal_add_guide_toward_locations();
  public:
  const ::valhalla::TripSignElement& guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_guide_toward_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_toward_locations() const;

  // repeated .valhalla.TripSignElement junction_names = 7;
  int junction_names_size() const;
  private:
  int _internal_junction_names_size() const;
  public:
  void clear_junction_names();
  ::valhalla::TripSignElement* mutable_junction_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_junction_names();
  private:
  const ::valhalla::TripSignElement& _internal_junction_names(int index) const;
  ::valhalla::TripSignElement* _internal_add_junction_names();
  public:
  const ::valhalla::TripSignElement& junction_names(int index) const;
  ::valhalla::TripSignElement* add_junction_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      junction_names() const;

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  int guidance_view_junctions_size() const;
  private:
  int _internal_guidance_view_junctions_size() const;
  public:
  void clear_guidance_view_junctions();
  ::valhalla::TripSignElement* mutable_guidance_view_junctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_junctions();
  private:
  const ::valhalla::TripSignElement& _internal_guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* _internal_add_guidance_view_junctions();
  public:
  const ::valhalla::TripSignElement& guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_junctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_junctions() const;

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  int guidance_view_signboards_size() const;
  private:
  int _internal_guidance_view_signboards_size() const;
  public:
  void clear_guidance_view_signboards();
  ::valhalla::TripSignElement* mutable_guidance_view_signboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_signboards();
  private:
  const ::valhalla::TripSignElement& _internal_guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* _internal_add_guidance_view_signboards();
  public:
  const ::valhalla::TripSignElement& guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_signboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_signboards() const;

  // @@protoc_insertion_point(class_scope:valhalla.TripSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_numbers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_onto_streets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_toward_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guide_onto_streets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guide_toward_locations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > junction_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_junctions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_signboards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TripSignElement

// string text = 1;
inline bool TripSignElement::_internal_has_text() const {
  return has_text_case() == kText;
}
inline void TripSignElement::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void TripSignElement::clear_text() {
  if (_internal_has_text()) {
    has_text_.text_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_has_text();
  }
}
inline const std::string& TripSignElement::text() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.text)
  return _internal_text();
}
inline void TripSignElement::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
}
inline std::string* TripSignElement::mutable_text() {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.text)
  return _internal_mutable_text();
}
inline const std::string& TripSignElement::_internal_text() const {
  if (_internal_has_text()) {
    return has_text_.text_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TripSignElement::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TripSignElement::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
  if (!_internal_has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:valhalla.TripSignElement.text)
}
inline void TripSignElement::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:valhalla.TripSignElement.text)
}
inline void TripSignElement::set_text(const char* value,
                             size_t size) {
  if (!_internal_has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:valhalla.TripSignElement.text)
}
inline std::string* TripSignElement::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return has_text_.text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TripSignElement::release_text() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.text)
  if (_internal_has_text()) {
    clear_has_has_text();
    return has_text_.text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TripSignElement::set_allocated_text(std::string* text) {
  if (has_has_text()) {
    clear_has_text();
  }
  if (text != nullptr) {
    set_has_text();
    has_text_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.text)
}
inline std::string* TripSignElement::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:valhalla.TripSignElement.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_text()) {
    clear_has_has_text();
    return has_text_.text_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TripSignElement::unsafe_arena_set_allocated_text(std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_text()) {
    has_text_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_text();
  if (text) {
    set_has_text();
    has_text_.text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TripSignElement.text)
}

// bool is_route_number = 2;
inline bool TripSignElement::_internal_has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
inline void TripSignElement::set_has_is_route_number() {
  _oneof_case_[1] = kIsRouteNumber;
}
inline void TripSignElement::clear_is_route_number() {
  if (_internal_has_is_route_number()) {
    has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
inline bool TripSignElement::_internal_is_route_number() const {
  if (_internal_has_is_route_number()) {
    return has_is_route_number_.is_route_number_;
  }
  return false;
}
inline void TripSignElement::_internal_set_is_route_number(bool value) {
  if (!_internal_has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  has_is_route_number_.is_route_number_ = value;
}
inline bool TripSignElement::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.is_route_number)
  return _internal_is_route_number();
}
inline void TripSignElement::set_is_route_number(bool value) {
  _internal_set_is_route_number(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.is_route_number)
}

// uint32 consecutive_count = 3;
inline bool TripSignElement::_internal_has_consecutive_count() const {
  return has_consecutive_count_case() == kConsecutiveCount;
}
inline void TripSignElement::set_has_consecutive_count() {
  _oneof_case_[2] = kConsecutiveCount;
}
inline void TripSignElement::clear_consecutive_count() {
  if (_internal_has_consecutive_count()) {
    has_consecutive_count_.consecutive_count_ = 0u;
    clear_has_has_consecutive_count();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TripSignElement::_internal_consecutive_count() const {
  if (_internal_has_consecutive_count()) {
    return has_consecutive_count_.consecutive_count_;
  }
  return 0u;
}
inline void TripSignElement::_internal_set_consecutive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_consecutive_count()) {
    clear_has_consecutive_count();
    set_has_consecutive_count();
  }
  has_consecutive_count_.consecutive_count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TripSignElement::consecutive_count() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.consecutive_count)
  return _internal_consecutive_count();
}
inline void TripSignElement::set_consecutive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consecutive_count(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.consecutive_count)
}

// .valhalla.Pronunciation pronunciation = 4;
inline bool TripSignElement::_internal_has_pronunciation() const {
  return this != internal_default_instance() && pronunciation_ != nullptr;
}
inline bool TripSignElement::has_pronunciation() const {
  return _internal_has_pronunciation();
}
inline const ::valhalla::Pronunciation& TripSignElement::_internal_pronunciation() const {
  const ::valhalla::Pronunciation* p = pronunciation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::valhalla::Pronunciation*>(
      &::valhalla::_Pronunciation_default_instance_);
}
inline const ::valhalla::Pronunciation& TripSignElement::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.pronunciation)
  return _internal_pronunciation();
}
inline void TripSignElement::unsafe_arena_set_allocated_pronunciation(
    ::valhalla::Pronunciation* pronunciation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pronunciation_);
  }
  pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TripSignElement.pronunciation)
}
inline ::valhalla::Pronunciation* TripSignElement::release_pronunciation() {
  auto temp = unsafe_arena_release_pronunciation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::valhalla::Pronunciation* TripSignElement::unsafe_arena_release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.pronunciation)
  
  ::valhalla::Pronunciation* temp = pronunciation_;
  pronunciation_ = nullptr;
  return temp;
}
inline ::valhalla::Pronunciation* TripSignElement::_internal_mutable_pronunciation() {
  
  if (pronunciation_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Pronunciation>(GetArena());
    pronunciation_ = p;
  }
  return pronunciation_;
}
inline ::valhalla::Pronunciation* TripSignElement::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.pronunciation)
  return _internal_mutable_pronunciation();
}
inline void TripSignElement::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pronunciation_);
  }
  if (pronunciation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pronunciation)->GetArena();
    if (message_arena != submessage_arena) {
      pronunciation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pronunciation, submessage_arena);
    }
    
  } else {
    
  }
  pronunciation_ = pronunciation;
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.pronunciation)
}

inline bool TripSignElement::has_has_text() const {
  return has_text_case() != HAS_TEXT_NOT_SET;
}
inline void TripSignElement::clear_has_has_text() {
  _oneof_case_[0] = HAS_TEXT_NOT_SET;
}
inline bool TripSignElement::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline void TripSignElement::clear_has_has_is_route_number() {
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline bool TripSignElement::has_has_consecutive_count() const {
  return has_consecutive_count_case() != HAS_CONSECUTIVE_COUNT_NOT_SET;
}
inline void TripSignElement::clear_has_has_consecutive_count() {
  _oneof_case_[2] = HAS_CONSECUTIVE_COUNT_NOT_SET;
}
inline TripSignElement::HasTextCase TripSignElement::has_text_case() const {
  return TripSignElement::HasTextCase(_oneof_case_[0]);
}
inline TripSignElement::HasIsRouteNumberCase TripSignElement::has_is_route_number_case() const {
  return TripSignElement::HasIsRouteNumberCase(_oneof_case_[1]);
}
inline TripSignElement::HasConsecutiveCountCase TripSignElement::has_consecutive_count_case() const {
  return TripSignElement::HasConsecutiveCountCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// TripSign

// repeated .valhalla.TripSignElement exit_numbers = 1;
inline int TripSign::_internal_exit_numbers_size() const {
  return exit_numbers_.size();
}
inline int TripSign::exit_numbers_size() const {
  return _internal_exit_numbers_size();
}
inline void TripSign::clear_exit_numbers() {
  exit_numbers_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_numbers() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_numbers)
  return &exit_numbers_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_numbers(int index) const {
  return exit_numbers_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_numbers(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_numbers)
  return _internal_exit_numbers(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_numbers() {
  return exit_numbers_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_numbers() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_numbers)
  return _internal_add_exit_numbers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_numbers() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_numbers)
  return exit_numbers_;
}

// repeated .valhalla.TripSignElement exit_onto_streets = 2;
inline int TripSign::_internal_exit_onto_streets_size() const {
  return exit_onto_streets_.size();
}
inline int TripSign::exit_onto_streets_size() const {
  return _internal_exit_onto_streets_size();
}
inline void TripSign::clear_exit_onto_streets() {
  exit_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_onto_streets)
  return &exit_onto_streets_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_onto_streets(int index) const {
  return exit_onto_streets_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_onto_streets)
  return _internal_exit_onto_streets(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_onto_streets() {
  return exit_onto_streets_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_onto_streets)
  return _internal_add_exit_onto_streets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_;
}

// repeated .valhalla.TripSignElement exit_toward_locations = 3;
inline int TripSign::_internal_exit_toward_locations_size() const {
  return exit_toward_locations_.size();
}
inline int TripSign::exit_toward_locations_size() const {
  return _internal_exit_toward_locations_size();
}
inline void TripSign::clear_exit_toward_locations() {
  exit_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_toward_locations)
  return &exit_toward_locations_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_toward_locations(int index) const {
  return exit_toward_locations_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_toward_locations)
  return _internal_exit_toward_locations(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_toward_locations() {
  return exit_toward_locations_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_toward_locations)
  return _internal_add_exit_toward_locations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_;
}

// repeated .valhalla.TripSignElement exit_names = 4;
inline int TripSign::_internal_exit_names_size() const {
  return exit_names_.size();
}
inline int TripSign::exit_names_size() const {
  return _internal_exit_names_size();
}
inline void TripSign::clear_exit_names() {
  exit_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_names)
  return exit_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_names)
  return &exit_names_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_names(int index) const {
  return exit_names_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_names)
  return _internal_exit_names(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_names() {
  return exit_names_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_names)
  return _internal_add_exit_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_names)
  return exit_names_;
}

// repeated .valhalla.TripSignElement guide_onto_streets = 5;
inline int TripSign::_internal_guide_onto_streets_size() const {
  return guide_onto_streets_.size();
}
inline int TripSign::guide_onto_streets_size() const {
  return _internal_guide_onto_streets_size();
}
inline void TripSign::clear_guide_onto_streets() {
  guide_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_onto_streets)
  return &guide_onto_streets_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guide_onto_streets(int index) const {
  return guide_onto_streets_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guide_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_onto_streets)
  return _internal_guide_onto_streets(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guide_onto_streets() {
  return guide_onto_streets_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guide_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_onto_streets)
  return _internal_add_guide_onto_streets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_;
}

// repeated .valhalla.TripSignElement guide_toward_locations = 6;
inline int TripSign::_internal_guide_toward_locations_size() const {
  return guide_toward_locations_.size();
}
inline int TripSign::guide_toward_locations_size() const {
  return _internal_guide_toward_locations_size();
}
inline void TripSign::clear_guide_toward_locations() {
  guide_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_toward_locations)
  return &guide_toward_locations_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guide_toward_locations(int index) const {
  return guide_toward_locations_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guide_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_toward_locations)
  return _internal_guide_toward_locations(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guide_toward_locations() {
  return guide_toward_locations_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guide_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_toward_locations)
  return _internal_add_guide_toward_locations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_;
}

// repeated .valhalla.TripSignElement junction_names = 7;
inline int TripSign::_internal_junction_names_size() const {
  return junction_names_.size();
}
inline int TripSign::junction_names_size() const {
  return _internal_junction_names_size();
}
inline void TripSign::clear_junction_names() {
  junction_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_junction_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.junction_names)
  return junction_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_junction_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.junction_names)
  return &junction_names_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_junction_names(int index) const {
  return junction_names_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::junction_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.junction_names)
  return _internal_junction_names(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_junction_names() {
  return junction_names_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_junction_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.junction_names)
  return _internal_add_junction_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::junction_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.junction_names)
  return junction_names_;
}

// repeated .valhalla.TripSignElement guidance_view_junctions = 8;
inline int TripSign::_internal_guidance_view_junctions_size() const {
  return guidance_view_junctions_.size();
}
inline int TripSign::guidance_view_junctions_size() const {
  return _internal_guidance_view_junctions_size();
}
inline void TripSign::clear_guidance_view_junctions() {
  guidance_view_junctions_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_junctions() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_junctions)
  return &guidance_view_junctions_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guidance_view_junctions(int index) const {
  return guidance_view_junctions_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_junctions(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_junctions)
  return _internal_guidance_view_junctions(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guidance_view_junctions() {
  return guidance_view_junctions_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_junctions() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_junctions)
  return _internal_add_guidance_view_junctions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_junctions() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_;
}

// repeated .valhalla.TripSignElement guidance_view_signboards = 9;
inline int TripSign::_internal_guidance_view_signboards_size() const {
  return guidance_view_signboards_.size();
}
inline int TripSign::guidance_view_signboards_size() const {
  return _internal_guidance_view_signboards_size();
}
inline void TripSign::clear_guidance_view_signboards() {
  guidance_view_signboards_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_signboards(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_signboards() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_signboards)
  return &guidance_view_signboards_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guidance_view_signboards(int index) const {
  return guidance_view_signboards_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_signboards(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_signboards)
  return _internal_guidance_view_signboards(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guidance_view_signboards() {
  return guidance_view_signboards_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_signboards() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_signboards)
  return _internal_add_guidance_view_signboards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_signboards() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sign_2eproto

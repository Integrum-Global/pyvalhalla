// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit_fetch.proto

#include "transit_fetch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
namespace mjolnir {
        template <typename>
PROTOBUF_CONSTEXPR Transit_Fetch_Stop::Transit_Fetch_Stop(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timezone_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.lon_)*/ 0,
      /*decltype(_impl_.lat_)*/ 0,
      /*decltype(_impl_.graphid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.osm_way_id_)*/ ::uint64_t{0u},
      /*decltype(_impl_.wheelchair_boarding_)*/ false,
    } {}
struct Transit_Fetch_StopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_Fetch_StopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_Fetch_StopDefaultTypeInternal() {}
  union {
    Transit_Fetch_Stop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_Fetch_StopDefaultTypeInternal _Transit_Fetch_Stop_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Transit_Fetch_StopPair::Transit_Fetch_StopPair(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.service_added_dates_)*/ {},
      /*decltype(_impl_.service_days_of_week_)*/ {},
      /*decltype(_impl_.service_except_dates_)*/ {},
      /*decltype(_impl_.destination_onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.operated_by_onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.origin_onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.trip_headsign_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.block_id_)*/ 0u,
      /*decltype(_impl_.destination_arrival_time_)*/ 0u,
      /*decltype(_impl_.destination_graphid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.origin_graphid_)*/ ::uint64_t{0u},
      /*decltype(_impl_.origin_departure_time_)*/ 0u,
      /*decltype(_impl_.bikes_allowed_)*/ false,
      /*decltype(_impl_.wheelchair_accessible_)*/ false,
      /*decltype(_impl_.route_index_)*/ 0u,
      /*decltype(_impl_.service_end_date_)*/ 0u,
      /*decltype(_impl_.service_start_date_)*/ 0u,
      /*decltype(_impl_.trip_id_)*/ 0u,
      /*decltype(_impl_.shape_id_)*/ 0u,
      /*decltype(_impl_.origin_dist_traveled_)*/ 0,
      /*decltype(_impl_.destination_dist_traveled_)*/ 0,
      /*decltype(_impl_.frequency_end_time_)*/ 0u,
      /*decltype(_impl_.frequency_headway_seconds_)*/ 0u,
    } {}
struct Transit_Fetch_StopPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_Fetch_StopPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_Fetch_StopPairDefaultTypeInternal() {}
  union {
    Transit_Fetch_StopPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_Fetch_StopPairDefaultTypeInternal _Transit_Fetch_StopPair_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Transit_Fetch_Route::Transit_Fetch_Route(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.operated_by_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.operated_by_onestop_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.operated_by_website_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.route_desc_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.route_long_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.route_color_)*/ 0u,
      /*decltype(_impl_.route_text_color_)*/ 0u,
      /*decltype(_impl_.vehicle_type_)*/ 0,
    } {}
struct Transit_Fetch_RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_Fetch_RouteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_Fetch_RouteDefaultTypeInternal() {}
  union {
    Transit_Fetch_Route _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_Fetch_RouteDefaultTypeInternal _Transit_Fetch_Route_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Transit_Fetch_Shape::Transit_Fetch_Shape(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.encoded_shape_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.shape_id_)*/ 0u,
    } {}
struct Transit_Fetch_ShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_Fetch_ShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_Fetch_ShapeDefaultTypeInternal() {}
  union {
    Transit_Fetch_Shape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_Fetch_ShapeDefaultTypeInternal _Transit_Fetch_Shape_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Transit_Fetch::Transit_Fetch(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.stops_)*/ {},
      /*decltype(_impl_.stop_pairs_)*/ {},
      /*decltype(_impl_.routes_)*/ {},
      /*decltype(_impl_.shapes_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct Transit_FetchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_FetchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_FetchDefaultTypeInternal() {}
  union {
    Transit_Fetch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_FetchDefaultTypeInternal _Transit_Fetch_default_instance_;
}  // namespace mjolnir
}  // namespace valhalla
namespace valhalla {
namespace mjolnir {
bool Transit_Fetch_VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Transit_Fetch_VehicleType_strings[8] = {};

static const char Transit_Fetch_VehicleType_names[] = {
    "kBus"
    "kCableCar"
    "kFerry"
    "kFunicular"
    "kGondola"
    "kMetro"
    "kRail"
    "kTram"
};

static const ::google::protobuf::internal::EnumEntry Transit_Fetch_VehicleType_entries[] =
    {
        {{&Transit_Fetch_VehicleType_names[0], 4}, 3},
        {{&Transit_Fetch_VehicleType_names[4], 9}, 5},
        {{&Transit_Fetch_VehicleType_names[13], 6}, 4},
        {{&Transit_Fetch_VehicleType_names[19], 10}, 7},
        {{&Transit_Fetch_VehicleType_names[29], 8}, 6},
        {{&Transit_Fetch_VehicleType_names[37], 6}, 1},
        {{&Transit_Fetch_VehicleType_names[43], 5}, 2},
        {{&Transit_Fetch_VehicleType_names[48], 5}, 0},
};

static const int Transit_Fetch_VehicleType_entries_by_number[] = {
    7,  // 0 -> kTram
    5,  // 1 -> kMetro
    6,  // 2 -> kRail
    0,  // 3 -> kBus
    2,  // 4 -> kFerry
    1,  // 5 -> kCableCar
    4,  // 6 -> kGondola
    3,  // 7 -> kFunicular
};

const std::string& Transit_Fetch_VehicleType_Name(Transit_Fetch_VehicleType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Transit_Fetch_VehicleType_entries, Transit_Fetch_VehicleType_entries_by_number,
          8, Transit_Fetch_VehicleType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Transit_Fetch_VehicleType_entries, Transit_Fetch_VehicleType_entries_by_number, 8,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Transit_Fetch_VehicleType_strings[idx].get();
}

bool Transit_Fetch_VehicleType_Parse(absl::string_view name, Transit_Fetch_VehicleType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Transit_Fetch_VehicleType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Transit_Fetch_VehicleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Transit_Fetch_VehicleType Transit_Fetch::kTram;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kMetro;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kRail;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kBus;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kFerry;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kCableCar;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kGondola;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kFunicular;
constexpr Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MIN;
constexpr Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MAX;
constexpr int Transit_Fetch::VehicleType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Transit_Fetch_Stop::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Stop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_._has_bits_);
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_osm_way_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelchair_boarding(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Transit_Fetch_Stop::Transit_Fetch_Stop(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}
Transit_Fetch_Stop::Transit_Fetch_Stop(const Transit_Fetch_Stop& from) : ::google::protobuf::MessageLite() {
  Transit_Fetch_Stop* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.onestop_id_){},
      decltype(_impl_.timezone_){},
      decltype(_impl_.lon_){},
      decltype(_impl_.lat_){},
      decltype(_impl_.graphid_){},
      decltype(_impl_.osm_way_id_){},
      decltype(_impl_.wheelchair_boarding_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.onestop_id_.Set(from._internal_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lon_, &from._impl_.lon_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.wheelchair_boarding_) -
    reinterpret_cast<char*>(&_impl_.lon_)) + sizeof(_impl_.wheelchair_boarding_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}
inline void Transit_Fetch_Stop::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.onestop_id_){},
      decltype(_impl_.timezone_){},
      decltype(_impl_.lon_){0},
      decltype(_impl_.lat_){0},
      decltype(_impl_.graphid_){::uint64_t{0u}},
      decltype(_impl_.osm_way_id_){::uint64_t{0u}},
      decltype(_impl_.wheelchair_boarding_){false},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Transit_Fetch_Stop::~Transit_Fetch_Stop() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Stop)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transit_Fetch_Stop::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.onestop_id_.Destroy();
  _impl_.timezone_.Destroy();
}
void Transit_Fetch_Stop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Transit_Fetch_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.timezone_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.lon_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.wheelchair_boarding_) -
        reinterpret_cast<char*>(&_impl_.lon_)) + sizeof(_impl_.wheelchair_boarding_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Stop::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 0, 0, 2> Transit_Fetch_Stop::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966848,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Transit_Fetch_Stop_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional float lon = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.lon_)}},
    // optional float lat = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.lat_)}},
    // optional uint64 graphid = 3;
    {::_pbi::TcParser::FastV64S1,
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.graphid_)}},
    // optional string name = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.name_)}},
    // optional string onestop_id = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.onestop_id_)}},
    // optional uint64 osm_way_id = 6;
    {::_pbi::TcParser::FastV64S1,
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.osm_way_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string timezone = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.timezone_)}},
    // optional bool wheelchair_boarding = 9;
    {::_pbi::TcParser::FastV8S1,
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.wheelchair_boarding_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float lon = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.lon_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float lat = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.lat_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint64 graphid = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.graphid_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string name = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string onestop_id = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint64 osm_way_id = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.osm_way_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string timezone = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.timezone_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool wheelchair_boarding = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.wheelchair_boarding_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Transit_Fetch_Stop::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float lon = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_lon(), target);
  }

  // optional float lat = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_lat(), target);
  }

  // optional uint64 graphid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_graphid(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string onestop_id = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_onestop_id();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint64 osm_way_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_osm_way_id(), target);
  }

  // optional string timezone = 8;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_timezone();
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional bool wheelchair_boarding = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_wheelchair_boarding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Stop)
  return target;
}

::size_t Transit_Fetch_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string onestop_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_onestop_id());
    }

    // optional string timezone = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_timezone());
    }

    // optional float lon = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional float lat = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional uint64 graphid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_graphid());
    }

    // optional uint64 osm_way_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_osm_way_id());
    }

    // optional bool wheelchair_boarding = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Stop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transit_Fetch_Stop*>(
      &from));
}

void Transit_Fetch_Stop::MergeFrom(const Transit_Fetch_Stop& from) {
  Transit_Fetch_Stop* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_timezone(from._internal_timezone());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lon_ = from._impl_.lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.graphid_ = from._impl_.graphid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.osm_way_id_ = from._impl_.osm_way_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.wheelchair_boarding_ = from._impl_.wheelchair_boarding_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Stop::CopyFrom(const Transit_Fetch_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transit_Fetch_Stop::IsInitialized() const {
  return true;
}

void Transit_Fetch_Stop::InternalSwap(Transit_Fetch_Stop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.onestop_id_, lhs_arena,
                                       &other->_impl_.onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timezone_, lhs_arena,
                                       &other->_impl_.timezone_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.wheelchair_boarding_)
      + sizeof(Transit_Fetch_Stop::_impl_.wheelchair_boarding_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, _impl_.lon_)>(
          reinterpret_cast<char*>(&_impl_.lon_),
          reinterpret_cast<char*>(&other->_impl_.lon_));
}

std::string Transit_Fetch_Stop::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Stop";
}

// ===================================================================

class Transit_Fetch_StopPair::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_StopPair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_._has_bits_);
  static void set_has_bikes_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_destination_arrival_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_destination_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_destination_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operated_by_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_departure_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_origin_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_origin_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_route_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_service_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_service_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trip_headsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_wheelchair_accessible(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_origin_dist_traveled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_destination_dist_traveled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_frequency_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_frequency_headway_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

Transit_Fetch_StopPair::Transit_Fetch_StopPair(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}
Transit_Fetch_StopPair::Transit_Fetch_StopPair(const Transit_Fetch_StopPair& from) : ::google::protobuf::MessageLite() {
  Transit_Fetch_StopPair* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.service_added_dates_){from._impl_.service_added_dates_},
      decltype(_impl_.service_days_of_week_){from._impl_.service_days_of_week_},
      decltype(_impl_.service_except_dates_){from._impl_.service_except_dates_},
      decltype(_impl_.destination_onestop_id_){},
      decltype(_impl_.operated_by_onestop_id_){},
      decltype(_impl_.origin_onestop_id_){},
      decltype(_impl_.trip_headsign_){},
      decltype(_impl_.block_id_){},
      decltype(_impl_.destination_arrival_time_){},
      decltype(_impl_.destination_graphid_){},
      decltype(_impl_.origin_graphid_){},
      decltype(_impl_.origin_departure_time_){},
      decltype(_impl_.bikes_allowed_){},
      decltype(_impl_.wheelchair_accessible_){},
      decltype(_impl_.route_index_){},
      decltype(_impl_.service_end_date_){},
      decltype(_impl_.service_start_date_){},
      decltype(_impl_.trip_id_){},
      decltype(_impl_.shape_id_){},
      decltype(_impl_.origin_dist_traveled_){},
      decltype(_impl_.destination_dist_traveled_){},
      decltype(_impl_.frequency_end_time_){},
      decltype(_impl_.frequency_headway_seconds_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.destination_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.destination_onestop_id_.Set(from._internal_destination_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.operated_by_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.operated_by_onestop_id_.Set(from._internal_operated_by_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.origin_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.origin_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.origin_onestop_id_.Set(from._internal_origin_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.trip_headsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trip_headsign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.trip_headsign_.Set(from._internal_trip_headsign(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_id_, &from._impl_.block_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.frequency_headway_seconds_) -
    reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.frequency_headway_seconds_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}
inline void Transit_Fetch_StopPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.service_added_dates_){arena},
      decltype(_impl_.service_days_of_week_){arena},
      decltype(_impl_.service_except_dates_){arena},
      decltype(_impl_.destination_onestop_id_){},
      decltype(_impl_.operated_by_onestop_id_){},
      decltype(_impl_.origin_onestop_id_){},
      decltype(_impl_.trip_headsign_){},
      decltype(_impl_.block_id_){0u},
      decltype(_impl_.destination_arrival_time_){0u},
      decltype(_impl_.destination_graphid_){::uint64_t{0u}},
      decltype(_impl_.origin_graphid_){::uint64_t{0u}},
      decltype(_impl_.origin_departure_time_){0u},
      decltype(_impl_.bikes_allowed_){false},
      decltype(_impl_.wheelchair_accessible_){false},
      decltype(_impl_.route_index_){0u},
      decltype(_impl_.service_end_date_){0u},
      decltype(_impl_.service_start_date_){0u},
      decltype(_impl_.trip_id_){0u},
      decltype(_impl_.shape_id_){0u},
      decltype(_impl_.origin_dist_traveled_){0},
      decltype(_impl_.destination_dist_traveled_){0},
      decltype(_impl_.frequency_end_time_){0u},
      decltype(_impl_.frequency_headway_seconds_){0u},
  };
  _impl_.destination_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operated_by_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.origin_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trip_headsign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trip_headsign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Transit_Fetch_StopPair::~Transit_Fetch_StopPair() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.StopPair)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transit_Fetch_StopPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_added_dates_.~RepeatedField();
  _impl_.service_days_of_week_.~RepeatedField();
  _impl_.service_except_dates_.~RepeatedField();
  _impl_.destination_onestop_id_.Destroy();
  _impl_.operated_by_onestop_id_.Destroy();
  _impl_.origin_onestop_id_.Destroy();
  _impl_.trip_headsign_.Destroy();
}
void Transit_Fetch_StopPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Transit_Fetch_StopPair::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_service_added_dates()->Clear();
  _internal_mutable_service_days_of_week()->Clear();
  _internal_mutable_service_except_dates()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destination_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.origin_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.trip_headsign_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.block_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.origin_graphid_) -
        reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.origin_graphid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.origin_departure_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.shape_id_) -
        reinterpret_cast<char*>(&_impl_.origin_departure_time_)) + sizeof(_impl_.shape_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.origin_dist_traveled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frequency_headway_seconds_) -
        reinterpret_cast<char*>(&_impl_.origin_dist_traveled_)) + sizeof(_impl_.frequency_headway_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_StopPair::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 0, 0, 2> Transit_Fetch_StopPair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_._has_bits_),
    0, // no _extensions_
    24, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4278452224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Transit_Fetch_StopPair_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool bikes_allowed = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 9, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.bikes_allowed_)}},
    // optional uint32 block_id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.block_id_)}},
    // optional uint32 destination_arrival_time = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_arrival_time_)}},
    // optional uint64 destination_graphid = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_graphid_)}},
    // optional string destination_onestop_id = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_onestop_id_)}},
    // optional string operated_by_onestop_id = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.operated_by_onestop_id_)}},
    // optional uint32 origin_departure_time = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_departure_time_)}},
    // optional uint64 origin_graphid = 8;
    {::_pbi::TcParser::FastV64S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_graphid_)}},
    // optional string origin_onestop_id = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_onestop_id_)}},
    // optional uint32 route_index = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.route_index_)}},
    // repeated uint32 service_added_dates = 11;
    {::_pbi::TcParser::FastV32R1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_added_dates_)}},
    // repeated bool service_days_of_week = 12;
    {::_pbi::TcParser::FastV8R1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_days_of_week_)}},
    // optional uint32 service_end_date = 13;
    {::_pbi::TcParser::FastV32S1,
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_end_date_)}},
    // repeated uint32 service_except_dates = 14;
    {::_pbi::TcParser::FastV32R1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_except_dates_)}},
    // optional uint32 service_start_date = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_start_date_)}},
    // optional string trip_headsign = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.trip_headsign_)}},
    // optional uint32 trip_id = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 14, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.trip_id_)}},
    // optional bool wheelchair_accessible = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 10, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.wheelchair_accessible_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 shape_id = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 15, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.shape_id_)}},
    // optional float origin_dist_traveled = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 16, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_dist_traveled_)}},
    // optional float destination_dist_traveled = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 17, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_dist_traveled_)}},
    // optional uint32 frequency_end_time = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 18, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.frequency_end_time_)}},
    // optional uint32 frequency_headway_seconds = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 19, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.frequency_headway_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool bikes_allowed = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.bikes_allowed_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 block_id = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.block_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 destination_arrival_time = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_arrival_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 destination_graphid = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_graphid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string destination_onestop_id = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_onestop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_onestop_id = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.operated_by_onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 origin_departure_time = 7;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_departure_time_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 origin_graphid = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_graphid_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string origin_onestop_id = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_onestop_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_index = 10;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.route_index_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 service_added_dates = 11;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_added_dates_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated bool service_days_of_week = 12;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_days_of_week_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBool)},
    // optional uint32 service_end_date = 13;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_end_date_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 service_except_dates = 14;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_except_dates_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional uint32 service_start_date = 15;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.service_start_date_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string trip_headsign = 16;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.trip_headsign_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 trip_id = 17;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.trip_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool wheelchair_accessible = 18;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.wheelchair_accessible_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 shape_id = 20;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.shape_id_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float origin_dist_traveled = 21;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.origin_dist_traveled_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float destination_dist_traveled = 22;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.destination_dist_traveled_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 frequency_end_time = 23;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.frequency_end_time_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 frequency_headway_seconds = 24;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.frequency_headway_seconds_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Transit_Fetch_StopPair::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bikes_allowed = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bikes_allowed(), target);
  }

  // optional uint32 block_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_block_id(), target);
  }

  // optional uint32 destination_arrival_time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_destination_arrival_time(), target);
  }

  // optional uint64 destination_graphid = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_destination_graphid(), target);
  }

  // optional string destination_onestop_id = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_destination_onestop_id();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string operated_by_onestop_id = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_operated_by_onestop_id();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional uint32 origin_departure_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_origin_departure_time(), target);
  }

  // optional uint64 origin_graphid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_origin_graphid(), target);
  }

  // optional string origin_onestop_id = 9;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_origin_onestop_id();
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional uint32 route_index = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_route_index(), target);
  }

  // repeated uint32 service_added_dates = 11;
  for (int i = 0, n = this->_internal_service_added_dates_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_service_added_dates().Get(i), target);
  }

  // repeated bool service_days_of_week = 12;
  for (int i = 0, n = this->_internal_service_days_of_week_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_service_days_of_week().Get(i), target);
  }

  // optional uint32 service_end_date = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_service_end_date(), target);
  }

  // repeated uint32 service_except_dates = 14;
  for (int i = 0, n = this->_internal_service_except_dates_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_service_except_dates().Get(i), target);
  }

  // optional uint32 service_start_date = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_service_start_date(), target);
  }

  // optional string trip_headsign = 16;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_trip_headsign();
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional uint32 trip_id = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_trip_id(), target);
  }

  // optional bool wheelchair_accessible = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_wheelchair_accessible(), target);
  }

  // optional uint32 shape_id = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_shape_id(), target);
  }

  // optional float origin_dist_traveled = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        21, this->_internal_origin_dist_traveled(), target);
  }

  // optional float destination_dist_traveled = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        22, this->_internal_destination_dist_traveled(), target);
  }

  // optional uint32 frequency_end_time = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        23, this->_internal_frequency_end_time(), target);
  }

  // optional uint32 frequency_headway_seconds = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        24, this->_internal_frequency_headway_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.StopPair)
  return target;
}

::size_t Transit_Fetch_StopPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_added_dates = 11;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_service_added_dates())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_service_added_dates_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool service_days_of_week = 12;
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_service_days_of_week_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_service_days_of_week_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 service_except_dates = 14;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_service_except_dates())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_service_except_dates_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string destination_onestop_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_destination_onestop_id());
    }

    // optional string operated_by_onestop_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_operated_by_onestop_id());
    }

    // optional string origin_onestop_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_origin_onestop_id());
    }

    // optional string trip_headsign = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_trip_headsign());
    }

    // optional uint32 block_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_block_id());
    }

    // optional uint32 destination_arrival_time = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_destination_arrival_time());
    }

    // optional uint64 destination_graphid = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_destination_graphid());
    }

    // optional uint64 origin_graphid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_origin_graphid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 origin_departure_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_origin_departure_time());
    }

    // optional bool bikes_allowed = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool wheelchair_accessible = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3;
    }

    // optional uint32 route_index = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_route_index());
    }

    // optional uint32 service_end_date = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_service_end_date());
    }

    // optional uint32 service_start_date = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_service_start_date());
    }

    // optional uint32 trip_id = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_trip_id());
    }

    // optional uint32 shape_id = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_shape_id());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float origin_dist_traveled = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 6;
    }

    // optional float destination_dist_traveled = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 6;
    }

    // optional uint32 frequency_end_time = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_frequency_end_time());
    }

    // optional uint32 frequency_headway_seconds = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_frequency_headway_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_StopPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transit_Fetch_StopPair*>(
      &from));
}

void Transit_Fetch_StopPair::MergeFrom(const Transit_Fetch_StopPair& from) {
  Transit_Fetch_StopPair* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_service_added_dates()->MergeFrom(from._internal_service_added_dates());
  _this->_internal_mutable_service_days_of_week()->MergeFrom(from._internal_service_days_of_week());
  _this->_internal_mutable_service_except_dates()->MergeFrom(from._internal_service_except_dates());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destination_onestop_id(from._internal_destination_onestop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_origin_onestop_id(from._internal_origin_onestop_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_trip_headsign(from._internal_trip_headsign());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.block_id_ = from._impl_.block_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.destination_arrival_time_ = from._impl_.destination_arrival_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.destination_graphid_ = from._impl_.destination_graphid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.origin_graphid_ = from._impl_.origin_graphid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.origin_departure_time_ = from._impl_.origin_departure_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bikes_allowed_ = from._impl_.bikes_allowed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.wheelchair_accessible_ = from._impl_.wheelchair_accessible_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.route_index_ = from._impl_.route_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.service_end_date_ = from._impl_.service_end_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.service_start_date_ = from._impl_.service_start_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.trip_id_ = from._impl_.trip_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.shape_id_ = from._impl_.shape_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.origin_dist_traveled_ = from._impl_.origin_dist_traveled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.destination_dist_traveled_ = from._impl_.destination_dist_traveled_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.frequency_end_time_ = from._impl_.frequency_end_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.frequency_headway_seconds_ = from._impl_.frequency_headway_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_StopPair::CopyFrom(const Transit_Fetch_StopPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transit_Fetch_StopPair::IsInitialized() const {
  return true;
}

void Transit_Fetch_StopPair::InternalSwap(Transit_Fetch_StopPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.service_added_dates_.InternalSwap(&other->_impl_.service_added_dates_);
  _impl_.service_days_of_week_.InternalSwap(&other->_impl_.service_days_of_week_);
  _impl_.service_except_dates_.InternalSwap(&other->_impl_.service_except_dates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_onestop_id_, lhs_arena,
                                       &other->_impl_.destination_onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_onestop_id_, lhs_arena,
                                       &other->_impl_.operated_by_onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.origin_onestop_id_, lhs_arena,
                                       &other->_impl_.origin_onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trip_headsign_, lhs_arena,
                                       &other->_impl_.trip_headsign_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.frequency_headway_seconds_)
      + sizeof(Transit_Fetch_StopPair::_impl_.frequency_headway_seconds_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

std::string Transit_Fetch_StopPair::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.StopPair";
}

// ===================================================================

class Transit_Fetch_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Route>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operated_by_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operated_by_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operated_by_website(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_route_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_route_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_route_long_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_route_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vehicle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Transit_Fetch_Route::Transit_Fetch_Route(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Route)
}
Transit_Fetch_Route::Transit_Fetch_Route(const Transit_Fetch_Route& from) : ::google::protobuf::MessageLite() {
  Transit_Fetch_Route* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.onestop_id_){},
      decltype(_impl_.operated_by_name_){},
      decltype(_impl_.operated_by_onestop_id_){},
      decltype(_impl_.operated_by_website_){},
      decltype(_impl_.route_desc_){},
      decltype(_impl_.route_long_name_){},
      decltype(_impl_.route_color_){},
      decltype(_impl_.route_text_color_){},
      decltype(_impl_.vehicle_type_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.onestop_id_.Set(from._internal_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.operated_by_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.operated_by_name_.Set(from._internal_operated_by_name(), _this->GetArenaForAllocation());
  }
  _impl_.operated_by_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.operated_by_onestop_id_.Set(from._internal_operated_by_onestop_id(), _this->GetArenaForAllocation());
  }
  _impl_.operated_by_website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.operated_by_website_.Set(from._internal_operated_by_website(), _this->GetArenaForAllocation());
  }
  _impl_.route_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.route_desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.route_desc_.Set(from._internal_route_desc(), _this->GetArenaForAllocation());
  }
  _impl_.route_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.route_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.route_long_name_.Set(from._internal_route_long_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.route_color_, &from._impl_.route_color_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.vehicle_type_) -
    reinterpret_cast<char*>(&_impl_.route_color_)) + sizeof(_impl_.vehicle_type_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Route)
}
inline void Transit_Fetch_Route::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.onestop_id_){},
      decltype(_impl_.operated_by_name_){},
      decltype(_impl_.operated_by_onestop_id_){},
      decltype(_impl_.operated_by_website_){},
      decltype(_impl_.route_desc_){},
      decltype(_impl_.route_long_name_){},
      decltype(_impl_.route_color_){0u},
      decltype(_impl_.route_text_color_){0u},
      decltype(_impl_.vehicle_type_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operated_by_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operated_by_onestop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operated_by_website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operated_by_website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.route_desc_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_long_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.route_long_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Transit_Fetch_Route::~Transit_Fetch_Route() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Route)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transit_Fetch_Route::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.onestop_id_.Destroy();
  _impl_.operated_by_name_.Destroy();
  _impl_.operated_by_onestop_id_.Destroy();
  _impl_.operated_by_website_.Destroy();
  _impl_.route_desc_.Destroy();
  _impl_.route_long_name_.Destroy();
}
void Transit_Fetch_Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Transit_Fetch_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Route)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.operated_by_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.operated_by_website_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.route_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.route_long_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.route_color_ = 0u;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.route_text_color_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vehicle_type_) -
        reinterpret_cast<char*>(&_impl_.route_text_color_)) + sizeof(_impl_.vehicle_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Route::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> Transit_Fetch_Route::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transit_Fetch_Route_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.name_)}},
    // optional string onestop_id = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.onestop_id_)}},
    // optional string operated_by_name = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_name_)}},
    // optional string operated_by_onestop_id = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_onestop_id_)}},
    // optional string operated_by_website = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_website_)}},
    // optional uint32 route_color = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_color_)}},
    // optional string route_desc = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_desc_)}},
    // optional string route_long_name = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_long_name_)}},
    // optional uint32 route_text_color = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_text_color_)}},
    // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
    {::_pbi::TcParser::FastEr0S1,
     {80, 9, 7, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.vehicle_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string onestop_id = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_name = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_onestop_id = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_onestop_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_website = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.operated_by_website_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_color = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_color_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string route_desc = 7;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_desc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string route_long_name = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_long_name_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_text_color = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_text_color_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.vehicle_type_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 8},
  }}, {{
  }},
};

::uint8_t* Transit_Fetch_Route::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Route)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string onestop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_onestop_id();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string operated_by_name = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_operated_by_name();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string operated_by_onestop_id = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_operated_by_onestop_id();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string operated_by_website = 5;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_operated_by_website();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 route_color = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_route_color(), target);
  }

  // optional string route_desc = 7;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_route_desc();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string route_long_name = 8;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_route_long_name();
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional uint32 route_text_color = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_route_text_color(), target);
  }

  // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_vehicle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Route)
  return target;
}

::size_t Transit_Fetch_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Route)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string onestop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_onestop_id());
    }

    // optional string operated_by_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_operated_by_name());
    }

    // optional string operated_by_onestop_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_operated_by_onestop_id());
    }

    // optional string operated_by_website = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_operated_by_website());
    }

    // optional string route_desc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_route_desc());
    }

    // optional string route_long_name = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_route_long_name());
    }

    // optional uint32 route_color = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_route_color());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 route_text_color = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_route_text_color());
    }

    // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_vehicle_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Route::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transit_Fetch_Route*>(
      &from));
}

void Transit_Fetch_Route::MergeFrom(const Transit_Fetch_Route& from) {
  Transit_Fetch_Route* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_operated_by_name(from._internal_operated_by_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_operated_by_website(from._internal_operated_by_website());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_route_desc(from._internal_route_desc());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_route_long_name(from._internal_route_long_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.route_color_ = from._impl_.route_color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.route_text_color_ = from._impl_.route_text_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vehicle_type_ = from._impl_.vehicle_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Route::CopyFrom(const Transit_Fetch_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transit_Fetch_Route::IsInitialized() const {
  return true;
}

void Transit_Fetch_Route::InternalSwap(Transit_Fetch_Route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.onestop_id_, lhs_arena,
                                       &other->_impl_.onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_name_, lhs_arena,
                                       &other->_impl_.operated_by_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_onestop_id_, lhs_arena,
                                       &other->_impl_.operated_by_onestop_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_website_, lhs_arena,
                                       &other->_impl_.operated_by_website_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.route_desc_, lhs_arena,
                                       &other->_impl_.route_desc_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.route_long_name_, lhs_arena,
                                       &other->_impl_.route_long_name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.vehicle_type_)
      + sizeof(Transit_Fetch_Route::_impl_.vehicle_type_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, _impl_.route_color_)>(
          reinterpret_cast<char*>(&_impl_.route_color_),
          reinterpret_cast<char*>(&other->_impl_.route_color_));
}

std::string Transit_Fetch_Route::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Route";
}

// ===================================================================

class Transit_Fetch_Shape::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Shape>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_._has_bits_);
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encoded_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Transit_Fetch_Shape::Transit_Fetch_Shape(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}
Transit_Fetch_Shape::Transit_Fetch_Shape(const Transit_Fetch_Shape& from) : ::google::protobuf::MessageLite() {
  Transit_Fetch_Shape* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.encoded_shape_){},
      decltype(_impl_.shape_id_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.encoded_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoded_shape_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.encoded_shape_.Set(from._internal_encoded_shape(), _this->GetArenaForAllocation());
  }
  _this->_impl_.shape_id_ = from._impl_.shape_id_;

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}
inline void Transit_Fetch_Shape::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.encoded_shape_){},
      decltype(_impl_.shape_id_){0u},
  };
  _impl_.encoded_shape_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoded_shape_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Transit_Fetch_Shape::~Transit_Fetch_Shape() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Shape)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transit_Fetch_Shape::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_shape_.Destroy();
}
void Transit_Fetch_Shape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Transit_Fetch_Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.encoded_shape_.ClearNonDefaultToEmpty();
  }
  _impl_.shape_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Shape::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Transit_Fetch_Shape::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Transit_Fetch_Shape_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // optional bytes encoded_shape = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_.encoded_shape_)}},
    // optional uint32 shape_id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_.shape_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 shape_id = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_.shape_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes encoded_shape = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch_Shape, _impl_.encoded_shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Transit_Fetch_Shape::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 shape_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_shape_id(), target);
  }

  // optional bytes encoded_shape = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_encoded_shape();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Shape)
  return target;
}

::size_t Transit_Fetch_Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encoded_shape = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_encoded_shape());
    }

    // optional uint32 shape_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_shape_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Shape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transit_Fetch_Shape*>(
      &from));
}

void Transit_Fetch_Shape::MergeFrom(const Transit_Fetch_Shape& from) {
  Transit_Fetch_Shape* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encoded_shape(from._internal_encoded_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shape_id_ = from._impl_.shape_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Shape::CopyFrom(const Transit_Fetch_Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transit_Fetch_Shape::IsInitialized() const {
  return true;
}

void Transit_Fetch_Shape::InternalSwap(Transit_Fetch_Shape* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoded_shape_, lhs_arena,
                                       &other->_impl_.encoded_shape_, rhs_arena);
        swap(_impl_.shape_id_, other->_impl_.shape_id_);
}

std::string Transit_Fetch_Shape::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Shape";
}

// ===================================================================

class Transit_Fetch::_Internal {
 public:
};

Transit_Fetch::Transit_Fetch(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch)
}
Transit_Fetch::Transit_Fetch(const Transit_Fetch& from) : ::google::protobuf::MessageLite() {
  Transit_Fetch* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_},
      decltype(_impl_.stop_pairs_){from._impl_.stop_pairs_},
      decltype(_impl_.routes_){from._impl_.routes_},
      decltype(_impl_.shapes_){from._impl_.shapes_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch)
}
inline void Transit_Fetch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena},
      decltype(_impl_.stop_pairs_){arena},
      decltype(_impl_.routes_){arena},
      decltype(_impl_.shapes_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Transit_Fetch::~Transit_Fetch() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Transit_Fetch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
  _impl_.stop_pairs_.~RepeatedPtrField();
  _impl_.routes_.~RepeatedPtrField();
  _impl_.shapes_.~RepeatedPtrField();
}
void Transit_Fetch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Transit_Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_stops()->Clear();
  _internal_mutable_stop_pairs()->Clear();
  _internal_mutable_routes()->Clear();
  _internal_mutable_shapes()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Transit_Fetch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transit_Fetch_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.shapes_)}},
    // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.stops_)}},
    // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.stop_pairs_)}},
    // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.routes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.stops_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.stop_pairs_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.routes_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Fetch, _impl_.shapes_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Fetch_Stop>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Fetch_StopPair>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Fetch_Route>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Fetch_Shape>()},
  }}, {{
  }},
};

::uint8_t* Transit_Fetch::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_pairs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_shapes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch)
  return target;
}

::size_t Transit_Fetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_internal_stops()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  total_size += 1UL * this->_internal_stop_pairs_size();
  for (const auto& msg : this->_internal_stop_pairs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_internal_routes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->_internal_shapes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Transit_Fetch*>(
      &from));
}

void Transit_Fetch::MergeFrom(const Transit_Fetch& from) {
  Transit_Fetch* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stops()->MergeFrom(from._internal_stops());
  _this->_internal_mutable_stop_pairs()->MergeFrom(from._internal_stop_pairs());
  _this->_internal_mutable_routes()->MergeFrom(from._internal_routes());
  _this->_internal_mutable_shapes()->MergeFrom(from._internal_shapes());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch::CopyFrom(const Transit_Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transit_Fetch::IsInitialized() const {
  return true;
}

void Transit_Fetch::InternalSwap(Transit_Fetch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  _impl_.stop_pairs_.InternalSwap(&other->_impl_.stop_pairs_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  _impl_.shapes_.InternalSwap(&other->_impl_.shapes_);
}

std::string Transit_Fetch::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mjolnir
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

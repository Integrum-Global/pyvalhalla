// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
        template <typename>
PROTOBUF_CONSTEXPR Api::Api(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.options_)*/ nullptr,
      /*decltype(_impl_.trip_)*/ nullptr,
      /*decltype(_impl_.directions_)*/ nullptr,
      /*decltype(_impl_.status_)*/ nullptr,
      /*decltype(_impl_.info_)*/ nullptr,
    } {}
struct ApiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiDefaultTypeInternal() {}
  union {
    Api _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiDefaultTypeInternal _Api_default_instance_;
}  // namespace valhalla
namespace valhalla {
// ===================================================================

class Api::_Internal {
 public:
  using HasBits = decltype(std::declval<Api>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Api, _impl_._has_bits_);
  static const ::valhalla::Options& options(const Api* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::valhalla::Trip& trip(const Api* msg);
  static void set_has_trip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::valhalla::Directions& directions(const Api* msg);
  static void set_has_directions(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::valhalla::Status& status(const Api* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::valhalla::Info& info(const Api* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::valhalla::Options& Api::_Internal::options(const Api* msg) {
  return *msg->_impl_.options_;
}
const ::valhalla::Trip& Api::_Internal::trip(const Api* msg) {
  return *msg->_impl_.trip_;
}
const ::valhalla::Directions& Api::_Internal::directions(const Api* msg) {
  return *msg->_impl_.directions_;
}
const ::valhalla::Status& Api::_Internal::status(const Api* msg) {
  return *msg->_impl_.status_;
}
const ::valhalla::Info& Api::_Internal::info(const Api* msg) {
  return *msg->_impl_.info_;
}
void Api::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Api::clear_trip() {
  if (_impl_.trip_ != nullptr) _impl_.trip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Api::clear_directions() {
  if (_impl_.directions_ != nullptr) _impl_.directions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Api::clear_status() {
  if (_impl_.status_ != nullptr) _impl_.status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Api::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Api::Api(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Api)
}
Api::Api(const Api& from) : ::google::protobuf::MessageLite() {
  Api* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.options_){nullptr},
      decltype(_impl_.trip_){nullptr},
      decltype(_impl_.directions_){nullptr},
      decltype(_impl_.status_){nullptr},
      decltype(_impl_.info_){nullptr},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.options_ = new ::valhalla::Options(*from._impl_.options_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trip_ = new ::valhalla::Trip(*from._impl_.trip_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.directions_ = new ::valhalla::Directions(*from._impl_.directions_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.status_ = new ::valhalla::Status(*from._impl_.status_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.info_ = new ::valhalla::Info(*from._impl_.info_);
  }

  // @@protoc_insertion_point(copy_constructor:valhalla.Api)
}
inline void Api::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.options_){nullptr},
      decltype(_impl_.trip_){nullptr},
      decltype(_impl_.directions_){nullptr},
      decltype(_impl_.status_){nullptr},
      decltype(_impl_.info_){nullptr},
  };
}
Api::~Api() {
  // @@protoc_insertion_point(destructor:valhalla.Api)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Api::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.trip_;
  if (this != internal_default_instance()) delete _impl_.directions_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.info_;
}
void Api::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Api::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Api)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trip_ != nullptr);
      _impl_.trip_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.directions_ != nullptr);
      _impl_.directions_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.status_ != nullptr);
      _impl_.status_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Api::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 5, 0, 2> Api::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Api, _impl_._has_bits_),
    0, // no _extensions_
    20, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294442992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Api_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .valhalla.Status status = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Api, _impl_.status_)}},
    // .valhalla.Options options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Api, _impl_.options_)}},
    // .valhalla.Trip trip = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Api, _impl_.trip_)}},
    // .valhalla.Directions directions = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Api, _impl_.directions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .valhalla.Options options = 1;
    {PROTOBUF_FIELD_OFFSET(Api, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .valhalla.Trip trip = 2;
    {PROTOBUF_FIELD_OFFSET(Api, _impl_.trip_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .valhalla.Directions directions = 3;
    {PROTOBUF_FIELD_OFFSET(Api, _impl_.directions_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .valhalla.Status status = 4;
    {PROTOBUF_FIELD_OFFSET(Api, _impl_.status_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .valhalla.Info info = 20;
    {PROTOBUF_FIELD_OFFSET(Api, _impl_.info_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Options>()},
    {::_pbi::TcParser::GetTable<::valhalla::Trip>()},
    {::_pbi::TcParser::GetTable<::valhalla::Directions>()},
    {::_pbi::TcParser::GetTable<::valhalla::Status>()},
    {::_pbi::TcParser::GetTable<::valhalla::Info>()},
  }}, {{
  }},
};

::uint8_t* Api::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Api)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .valhalla.Options options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Trip trip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trip(this),
        _Internal::trip(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Directions directions = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::directions(this),
        _Internal::directions(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Status status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Info info = 20;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Api)
  return target;
}

::size_t Api::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Api)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .valhalla.Options options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.options_);
    }

    // .valhalla.Trip trip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.trip_);
    }

    // .valhalla.Directions directions = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.directions_);
    }

    // .valhalla.Status status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.status_);
    }

    // .valhalla.Info info = 20;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Api::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Api*>(
      &from));
}

void Api::MergeFrom(const Api& from) {
  Api* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Api)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_options()->::valhalla::Options::MergeFrom(
          from._internal_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trip()->::valhalla::Trip::MergeFrom(
          from._internal_trip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_directions()->::valhalla::Directions::MergeFrom(
          from._internal_directions());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_status()->::valhalla::Status::MergeFrom(
          from._internal_status());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_info()->::valhalla::Info::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Api::CopyFrom(const Api& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Api)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Api::IsInitialized() const {
  return true;
}

void Api::InternalSwap(Api* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Api, _impl_.info_)
      + sizeof(Api::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(Api, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

std::string Api::GetTypeName() const {
  return "valhalla.Api";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

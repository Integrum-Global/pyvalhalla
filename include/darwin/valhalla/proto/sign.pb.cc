// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#include "sign.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
        template <typename>
PROTOBUF_CONSTEXPR TripSignElement::TripSignElement(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.text_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.pronunciation_)*/ nullptr,
      /*decltype(_impl_.is_route_number_)*/ false,
      /*decltype(_impl_.consecutive_count_)*/ 0u,
    } {}
struct TripSignElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignElementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignElementDefaultTypeInternal() {}
  union {
    TripSignElement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TripSign::TripSign(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.exit_numbers_)*/ {},
      /*decltype(_impl_.exit_onto_streets_)*/ {},
      /*decltype(_impl_.exit_toward_locations_)*/ {},
      /*decltype(_impl_.exit_names_)*/ {},
      /*decltype(_impl_.guide_onto_streets_)*/ {},
      /*decltype(_impl_.guide_toward_locations_)*/ {},
      /*decltype(_impl_.junction_names_)*/ {},
      /*decltype(_impl_.guidance_view_junctions_)*/ {},
      /*decltype(_impl_.guidance_view_signboards_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct TripSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignDefaultTypeInternal() {}
  union {
    TripSign _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignDefaultTypeInternal _TripSign_default_instance_;
}  // namespace valhalla
namespace valhalla {
// ===================================================================

class TripSignElement::_Internal {
 public:
  using HasBits = decltype(std::declval<TripSignElement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_._has_bits_);
  static const ::valhalla::Pronunciation& pronunciation(const TripSignElement* msg);
  static void set_has_pronunciation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::valhalla::Pronunciation& TripSignElement::_Internal::pronunciation(const TripSignElement* msg) {
  return *msg->_impl_.pronunciation_;
}
void TripSignElement::clear_pronunciation() {
  if (_impl_.pronunciation_ != nullptr) _impl_.pronunciation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TripSignElement::TripSignElement(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSignElement)
}
TripSignElement::TripSignElement(const TripSignElement& from) : ::google::protobuf::MessageLite() {
  TripSignElement* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.text_){},
      decltype(_impl_.pronunciation_){nullptr},
      decltype(_impl_.is_route_number_){},
      decltype(_impl_.consecutive_count_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pronunciation_ = new ::valhalla::Pronunciation(*from._impl_.pronunciation_);
  }
  ::memcpy(&_impl_.is_route_number_, &from._impl_.is_route_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.consecutive_count_) -
    reinterpret_cast<char*>(&_impl_.is_route_number_)) + sizeof(_impl_.consecutive_count_));

  // @@protoc_insertion_point(copy_constructor:valhalla.TripSignElement)
}
inline void TripSignElement::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.text_){},
      decltype(_impl_.pronunciation_){nullptr},
      decltype(_impl_.is_route_number_){false},
      decltype(_impl_.consecutive_count_){0u},
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TripSignElement::~TripSignElement() {
  // @@protoc_insertion_point(destructor:valhalla.TripSignElement)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TripSignElement::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pronunciation_;
}
void TripSignElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TripSignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSignElement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pronunciation_ != nullptr);
    _impl_.pronunciation_->Clear();
  }
  ::memset(&_impl_.is_route_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.consecutive_count_) -
      reinterpret_cast<char*>(&_impl_.is_route_number_)) + sizeof(_impl_.consecutive_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TripSignElement::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 37, 2> TripSignElement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TripSignElement_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .valhalla.Pronunciation pronunciation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_)}},
    // string text = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.text_)}},
    // bool is_route_number = 2;
    {::_pbi::TcParser::FastV8S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.is_route_number_)}},
    // uint32 consecutive_count = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string text = 1;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_route_number = 2;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.is_route_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 consecutive_count = 3;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .valhalla.Pronunciation pronunciation = 4;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Pronunciation>()},
  }}, {{
    "\30\4\0\0\0\0\0\0"
    "valhalla.TripSignElement"
    "text"
  }},
};

::uint8_t* TripSignElement::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSignElement)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.TripSignElement.text");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool is_route_number = 2;
  if (this->_internal_is_route_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_route_number(), target);
  }

  // uint32 consecutive_count = 3;
  if (this->_internal_consecutive_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_consecutive_count(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .valhalla.Pronunciation pronunciation = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pronunciation(this),
        _Internal::pronunciation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSignElement)
  return target;
}

::size_t TripSignElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSignElement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // .valhalla.Pronunciation pronunciation = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.pronunciation_);
  }

  // bool is_route_number = 2;
  if (this->_internal_is_route_number() != 0) {
    total_size += 2;
  }

  // uint32 consecutive_count = 3;
  if (this->_internal_consecutive_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_consecutive_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripSignElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TripSignElement*>(
      &from));
}

void TripSignElement::MergeFrom(const TripSignElement& from) {
  TripSignElement* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSignElement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pronunciation()->::valhalla::Pronunciation::MergeFrom(
        from._internal_pronunciation());
  }
  if (from._internal_is_route_number() != 0) {
    _this->_internal_set_is_route_number(from._internal_is_route_number());
  }
  if (from._internal_consecutive_count() != 0) {
    _this->_internal_set_consecutive_count(from._internal_consecutive_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSignElement::CopyFrom(const TripSignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TripSignElement::IsInitialized() const {
  return true;
}

void TripSignElement::InternalSwap(TripSignElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_)
      + sizeof(TripSignElement::_impl_.consecutive_count_)
      - PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_)>(
          reinterpret_cast<char*>(&_impl_.pronunciation_),
          reinterpret_cast<char*>(&other->_impl_.pronunciation_));
}

std::string TripSignElement::GetTypeName() const {
  return "valhalla.TripSignElement";
}

// ===================================================================

class TripSign::_Internal {
 public:
};

TripSign::TripSign(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSign)
}
TripSign::TripSign(const TripSign& from) : ::google::protobuf::MessageLite() {
  TripSign* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_numbers_){from._impl_.exit_numbers_},
      decltype(_impl_.exit_onto_streets_){from._impl_.exit_onto_streets_},
      decltype(_impl_.exit_toward_locations_){from._impl_.exit_toward_locations_},
      decltype(_impl_.exit_names_){from._impl_.exit_names_},
      decltype(_impl_.guide_onto_streets_){from._impl_.guide_onto_streets_},
      decltype(_impl_.guide_toward_locations_){from._impl_.guide_toward_locations_},
      decltype(_impl_.junction_names_){from._impl_.junction_names_},
      decltype(_impl_.guidance_view_junctions_){from._impl_.guidance_view_junctions_},
      decltype(_impl_.guidance_view_signboards_){from._impl_.guidance_view_signboards_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:valhalla.TripSign)
}
inline void TripSign::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_numbers_){arena},
      decltype(_impl_.exit_onto_streets_){arena},
      decltype(_impl_.exit_toward_locations_){arena},
      decltype(_impl_.exit_names_){arena},
      decltype(_impl_.guide_onto_streets_){arena},
      decltype(_impl_.guide_toward_locations_){arena},
      decltype(_impl_.junction_names_){arena},
      decltype(_impl_.guidance_view_junctions_){arena},
      decltype(_impl_.guidance_view_signboards_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
TripSign::~TripSign() {
  // @@protoc_insertion_point(destructor:valhalla.TripSign)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TripSign::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exit_numbers_.~RepeatedPtrField();
  _impl_.exit_onto_streets_.~RepeatedPtrField();
  _impl_.exit_toward_locations_.~RepeatedPtrField();
  _impl_.exit_names_.~RepeatedPtrField();
  _impl_.guide_onto_streets_.~RepeatedPtrField();
  _impl_.guide_toward_locations_.~RepeatedPtrField();
  _impl_.junction_names_.~RepeatedPtrField();
  _impl_.guidance_view_junctions_.~RepeatedPtrField();
  _impl_.guidance_view_signboards_.~RepeatedPtrField();
}
void TripSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TripSign::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSign)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_exit_numbers()->Clear();
  _internal_mutable_exit_onto_streets()->Clear();
  _internal_mutable_exit_toward_locations()->Clear();
  _internal_mutable_exit_names()->Clear();
  _internal_mutable_guide_onto_streets()->Clear();
  _internal_mutable_guide_toward_locations()->Clear();
  _internal_mutable_junction_names()->Clear();
  _internal_mutable_guidance_view_junctions()->Clear();
  _internal_mutable_guidance_view_signboards()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TripSign::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 9, 0, 2> TripSign::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TripSign_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .valhalla.TripSignElement exit_numbers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_numbers_)}},
    // repeated .valhalla.TripSignElement exit_onto_streets = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_onto_streets_)}},
    // repeated .valhalla.TripSignElement exit_toward_locations = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_toward_locations_)}},
    // repeated .valhalla.TripSignElement exit_names = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_names_)}},
    // repeated .valhalla.TripSignElement guide_onto_streets = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_onto_streets_)}},
    // repeated .valhalla.TripSignElement guide_toward_locations = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_toward_locations_)}},
    // repeated .valhalla.TripSignElement junction_names = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.junction_names_)}},
    // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_junctions_)}},
    // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_signboards_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.TripSignElement exit_numbers = 1;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_numbers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_onto_streets = 2;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_onto_streets_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_toward_locations = 3;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_toward_locations_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_names = 4;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_names_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guide_onto_streets = 5;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_onto_streets_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guide_toward_locations = 6;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_toward_locations_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement junction_names = 7;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.junction_names_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_junctions_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_signboards_), 0, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
  }}, {{
  }},
};

::uint8_t* TripSign::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSign)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_numbers_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_numbers().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_onto_streets_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_onto_streets().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_toward_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_toward_locations().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_names = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_names().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guide_onto_streets_size()); i < n; i++) {
    const auto& repfield = this->_internal_guide_onto_streets().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guide_toward_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_guide_toward_locations().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement junction_names = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_junction_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_junction_names().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guidance_view_junctions_size()); i < n; i++) {
    const auto& repfield = this->_internal_guidance_view_junctions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guidance_view_signboards_size()); i < n; i++) {
    const auto& repfield = this->_internal_guidance_view_signboards().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSign)
  return target;
}

::size_t TripSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSign)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  total_size += 1UL * this->_internal_exit_numbers_size();
  for (const auto& msg : this->_internal_exit_numbers()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  total_size += 1UL * this->_internal_exit_onto_streets_size();
  for (const auto& msg : this->_internal_exit_onto_streets()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  total_size += 1UL * this->_internal_exit_toward_locations_size();
  for (const auto& msg : this->_internal_exit_toward_locations()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement exit_names = 4;
  total_size += 1UL * this->_internal_exit_names_size();
  for (const auto& msg : this->_internal_exit_names()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  total_size += 1UL * this->_internal_guide_onto_streets_size();
  for (const auto& msg : this->_internal_guide_onto_streets()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  total_size += 1UL * this->_internal_guide_toward_locations_size();
  for (const auto& msg : this->_internal_guide_toward_locations()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement junction_names = 7;
  total_size += 1UL * this->_internal_junction_names_size();
  for (const auto& msg : this->_internal_junction_names()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  total_size += 1UL * this->_internal_guidance_view_junctions_size();
  for (const auto& msg : this->_internal_guidance_view_junctions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  total_size += 1UL * this->_internal_guidance_view_signboards_size();
  for (const auto& msg : this->_internal_guidance_view_signboards()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TripSign*>(
      &from));
}

void TripSign::MergeFrom(const TripSign& from) {
  TripSign* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSign)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exit_numbers()->MergeFrom(from._internal_exit_numbers());
  _this->_internal_mutable_exit_onto_streets()->MergeFrom(from._internal_exit_onto_streets());
  _this->_internal_mutable_exit_toward_locations()->MergeFrom(from._internal_exit_toward_locations());
  _this->_internal_mutable_exit_names()->MergeFrom(from._internal_exit_names());
  _this->_internal_mutable_guide_onto_streets()->MergeFrom(from._internal_guide_onto_streets());
  _this->_internal_mutable_guide_toward_locations()->MergeFrom(from._internal_guide_toward_locations());
  _this->_internal_mutable_junction_names()->MergeFrom(from._internal_junction_names());
  _this->_internal_mutable_guidance_view_junctions()->MergeFrom(from._internal_guidance_view_junctions());
  _this->_internal_mutable_guidance_view_signboards()->MergeFrom(from._internal_guidance_view_signboards());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSign::CopyFrom(const TripSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TripSign::IsInitialized() const {
  return true;
}

void TripSign::InternalSwap(TripSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exit_numbers_.InternalSwap(&other->_impl_.exit_numbers_);
  _impl_.exit_onto_streets_.InternalSwap(&other->_impl_.exit_onto_streets_);
  _impl_.exit_toward_locations_.InternalSwap(&other->_impl_.exit_toward_locations_);
  _impl_.exit_names_.InternalSwap(&other->_impl_.exit_names_);
  _impl_.guide_onto_streets_.InternalSwap(&other->_impl_.guide_onto_streets_);
  _impl_.guide_toward_locations_.InternalSwap(&other->_impl_.guide_toward_locations_);
  _impl_.junction_names_.InternalSwap(&other->_impl_.junction_names_);
  _impl_.guidance_view_junctions_.InternalSwap(&other->_impl_.guidance_view_junctions_);
  _impl_.guidance_view_signboards_.InternalSwap(&other->_impl_.guidance_view_signboards_);
}

std::string TripSign::GetTypeName() const {
  return "valhalla.TripSign";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

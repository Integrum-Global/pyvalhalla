// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#include "info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
        template <typename>
PROTOBUF_CONSTEXPR Statistic::Statistic(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.value_)*/ 0,
      /*decltype(_impl_.frequency_)*/ 0,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct StatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticDefaultTypeInternal() {}
  union {
    Statistic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticDefaultTypeInternal _Statistic_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CodedDescription::CodedDescription(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.description_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.code_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct CodedDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodedDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodedDescriptionDefaultTypeInternal() {}
  union {
    CodedDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodedDescriptionDefaultTypeInternal _CodedDescription_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Info::Info(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.statistics_)*/ {},
      /*decltype(_impl_.errors_)*/ {},
      /*decltype(_impl_.warnings_)*/ {},
      /*decltype(_impl_.is_service_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
}  // namespace valhalla
namespace valhalla {
bool StatisticType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    StatisticType_strings[4] = {};

static const char StatisticType_names[] = {
    "count"
    "gauge"
    "set"
    "timing"
};

static const ::google::protobuf::internal::EnumEntry StatisticType_entries[] =
    {
        {{&StatisticType_names[0], 5}, 0},
        {{&StatisticType_names[5], 5}, 1},
        {{&StatisticType_names[10], 3}, 3},
        {{&StatisticType_names[13], 6}, 2},
};

static const int StatisticType_entries_by_number[] = {
    0,  // 0 -> count
    1,  // 1 -> gauge
    3,  // 2 -> timing
    2,  // 3 -> set
};

const std::string& StatisticType_Name(StatisticType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          StatisticType_entries, StatisticType_entries_by_number,
          4, StatisticType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      StatisticType_entries, StatisticType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : StatisticType_strings[idx].get();
}

bool StatisticType_Parse(absl::string_view name, StatisticType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      StatisticType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StatisticType>(int_value);
  }
  return success;
}
// ===================================================================

class Statistic::_Internal {
 public:
};

Statistic::Statistic(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Statistic)
}
Statistic::Statistic(const Statistic& from) : ::google::protobuf::MessageLite() {
  Statistic* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){},
      decltype(_impl_.value_){},
      decltype(_impl_.frequency_){},
      decltype(_impl_.type_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));

  // @@protoc_insertion_point(copy_constructor:valhalla.Statistic)
}
inline void Statistic::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){},
      decltype(_impl_.value_){0},
      decltype(_impl_.frequency_){0},
      decltype(_impl_.type_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:valhalla.Statistic)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Statistic::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}
void Statistic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Statistic)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

const char* Statistic::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 30, 2> Statistic::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Statistic_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .valhalla.StatisticType type = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.key_)}},
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_)}},
    // float frequency = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.frequency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float frequency = 3;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.frequency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .valhalla.StatisticType type = 4;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\22\3\0\0\0\0\0\0"
    "valhalla.Statistic"
    "key"
  }},
};

::uint8_t* Statistic::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Statistic)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.Statistic.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double value = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_value(), target);
  }

  // float frequency = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_frequency = this->_internal_frequency();
  ::uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_frequency(), target);
  }

  // .valhalla.StatisticType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Statistic)
  return target;
}

::size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Statistic)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // double value = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 9;
  }

  // float frequency = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_frequency = this->_internal_frequency();
  ::uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    total_size += 5;
  }

  // .valhalla.StatisticType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistic::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Statistic*>(
      &from));
}

void Statistic::MergeFrom(const Statistic& from) {
  Statistic* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Statistic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_frequency = from._internal_frequency();
  ::uint32_t raw_frequency;
  memcpy(&raw_frequency, &tmp_frequency, sizeof(tmp_frequency));
  if (raw_frequency != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_)
      + sizeof(Statistic::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

std::string Statistic::GetTypeName() const {
  return "valhalla.Statistic";
}

// ===================================================================

class CodedDescription::_Internal {
 public:
};

CodedDescription::CodedDescription(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.CodedDescription)
}
CodedDescription::CodedDescription(const CodedDescription& from) : ::google::protobuf::MessageLite() {
  CodedDescription* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){},
      decltype(_impl_.code_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:valhalla.CodedDescription)
}
inline void CodedDescription::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){},
      decltype(_impl_.code_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CodedDescription::~CodedDescription() {
  // @@protoc_insertion_point(destructor:valhalla.CodedDescription)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void CodedDescription::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}
void CodedDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CodedDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.CodedDescription)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  _impl_.code_ = ::uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* CodedDescription::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> CodedDescription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CodedDescription_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // uint64 code = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.code_)}},
    // string description = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.description_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string description = 1;
    {PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 code = 2;
    {PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\31\13\0\0\0\0\0\0"
    "valhalla.CodedDescription"
    "description"
  }},
};

::uint8_t* CodedDescription::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.CodedDescription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.CodedDescription.description");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.CodedDescription)
  return target;
}

::size_t CodedDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.CodedDescription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // uint64 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodedDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CodedDescription*>(
      &from));
}

void CodedDescription::MergeFrom(const CodedDescription& from) {
  CodedDescription* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.CodedDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CodedDescription::CopyFrom(const CodedDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.CodedDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CodedDescription::IsInitialized() const {
  return true;
}

void CodedDescription::InternalSwap(CodedDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
        swap(_impl_.code_, other->_impl_.code_);
}

std::string CodedDescription::GetTypeName() const {
  return "valhalla.CodedDescription";
}

// ===================================================================

class Info::_Internal {
 public:
};

Info::Info(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Info)
}
Info::Info(const Info& from) : ::google::protobuf::MessageLite() {
  Info* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){from._impl_.statistics_},
      decltype(_impl_.errors_){from._impl_.errors_},
      decltype(_impl_.warnings_){from._impl_.warnings_},
      decltype(_impl_.is_service_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _this->_impl_.is_service_ = from._impl_.is_service_;

  // @@protoc_insertion_point(copy_constructor:valhalla.Info)
}
inline void Info::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.statistics_){arena},
      decltype(_impl_.errors_){arena},
      decltype(_impl_.warnings_){arena},
      decltype(_impl_.is_service_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Info::~Info() {
  // @@protoc_insertion_point(destructor:valhalla.Info)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Info::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statistics_.~RepeatedPtrField();
  _impl_.errors_.~RepeatedPtrField();
  _impl_.warnings_.~RepeatedPtrField();
}
void Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Info)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_statistics()->Clear();
  _internal_mutable_errors()->Clear();
  _internal_mutable_warnings()->Clear();
  _impl_.is_service_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* Info::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> Info::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Info_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // bool is_service = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.is_service_)}},
    // repeated .valhalla.Statistic statistics = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.statistics_)}},
    // repeated .valhalla.CodedDescription errors = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Info, _impl_.errors_)}},
    // repeated .valhalla.CodedDescription warnings = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Info, _impl_.warnings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.Statistic statistics = 1;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.statistics_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.CodedDescription errors = 2;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.errors_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.CodedDescription warnings = 3;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.warnings_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_service = 4;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.is_service_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Statistic>()},
    {::_pbi::TcParser::GetTable<::valhalla::CodedDescription>()},
    {::_pbi::TcParser::GetTable<::valhalla::CodedDescription>()},
  }}, {{
  }},
};

::uint8_t* Info::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Info)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .valhalla.Statistic statistics = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_statistics().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.CodedDescription errors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_errors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.CodedDescription warnings = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_warnings_size()); i < n; i++) {
    const auto& repfield = this->_internal_warnings().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_service = 4;
  if (this->_internal_is_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Info)
  return target;
}

::size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Info)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.Statistic statistics = 1;
  total_size += 1UL * this->_internal_statistics_size();
  for (const auto& msg : this->_internal_statistics()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.CodedDescription errors = 2;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->_internal_errors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .valhalla.CodedDescription warnings = 3;
  total_size += 1UL * this->_internal_warnings_size();
  for (const auto& msg : this->_internal_warnings()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bool is_service = 4;
  if (this->_internal_is_service() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Info*>(
      &from));
}

void Info::MergeFrom(const Info& from) {
  Info* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Info)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(from._internal_statistics());
  _this->_internal_mutable_errors()->MergeFrom(from._internal_errors());
  _this->_internal_mutable_warnings()->MergeFrom(from._internal_warnings());
  if (from._internal_is_service() != 0) {
    _this->_internal_set_is_service(from._internal_is_service());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statistics_.InternalSwap(&other->_impl_.statistics_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
        swap(_impl_.is_service_, other->_impl_.is_service_);
}

std::string Info::GetTypeName() const {
  return "valhalla.Info";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

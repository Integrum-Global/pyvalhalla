// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
        template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.available_actions_)*/ {},
      /*decltype(_impl_.version_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.tileset_last_modified_)*/ 0u,
      /*decltype(_impl_.has_has_tiles_)*/ {},
      /*decltype(_impl_.has_has_admins_)*/ {},
      /*decltype(_impl_.has_has_timezones_)*/ {},
      /*decltype(_impl_.has_has_live_traffic_)*/ {},
      /*decltype(_impl_.has_bbox_)*/ {},
      /*decltype(_impl_.has_has_transit_tiles_)*/ {},
      /*decltype(_impl_.has_osm_changeset_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace valhalla
namespace valhalla {
// ===================================================================

class Status::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::valhalla::Status, _impl_._oneof_case_);
};

Status::Status(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Status)
}
Status::Status(const Status& from) : ::google::protobuf::MessageLite() {
  Status* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.available_actions_){from._impl_.available_actions_},
      decltype(_impl_.version_){},
      decltype(_impl_.tileset_last_modified_){},
      decltype(_impl_.has_has_tiles_){},
      decltype(_impl_.has_has_admins_){},
      decltype(_impl_.has_has_timezones_){},
      decltype(_impl_.has_has_live_traffic_){},
      decltype(_impl_.has_bbox_){},
      decltype(_impl_.has_has_transit_tiles_){},
      decltype(_impl_.has_osm_changeset_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _this->_impl_.tileset_last_modified_ = from._impl_.tileset_last_modified_;
  clear_has_has_has_tiles();
  switch (from.has_has_tiles_case()) {
    case kHasTiles: {
      _this->_internal_set_has_tiles(from._internal_has_tiles());
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_admins();
  switch (from.has_has_admins_case()) {
    case kHasAdmins: {
      _this->_internal_set_has_admins(from._internal_has_admins());
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_timezones();
  switch (from.has_has_timezones_case()) {
    case kHasTimezones: {
      _this->_internal_set_has_timezones(from._internal_has_timezones());
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_live_traffic();
  switch (from.has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      _this->_internal_set_has_live_traffic(from._internal_has_live_traffic());
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  clear_has_has_bbox();
  switch (from.has_bbox_case()) {
    case kBbox: {
      _this->_internal_set_bbox(from._internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_transit_tiles();
  switch (from.has_has_transit_tiles_case()) {
    case kHasTransitTiles: {
      _this->_internal_set_has_transit_tiles(from._internal_has_transit_tiles());
      break;
    }
    case HAS_HAS_TRANSIT_TILES_NOT_SET: {
      break;
    }
  }
  clear_has_has_osm_changeset();
  switch (from.has_osm_changeset_case()) {
    case kOsmChangeset: {
      _this->_internal_set_osm_changeset(from._internal_osm_changeset());
      break;
    }
    case HAS_OSM_CHANGESET_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:valhalla.Status)
}
inline void Status::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.available_actions_){arena},
      decltype(_impl_.version_){},
      decltype(_impl_.tileset_last_modified_){0u},
      decltype(_impl_.has_has_tiles_){},
      decltype(_impl_.has_has_admins_){},
      decltype(_impl_.has_has_timezones_){},
      decltype(_impl_.has_has_live_traffic_){},
      decltype(_impl_.has_bbox_){},
      decltype(_impl_.has_has_transit_tiles_){},
      decltype(_impl_.has_osm_changeset_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_has_has_tiles();
  clear_has_has_has_admins();
  clear_has_has_has_timezones();
  clear_has_has_has_live_traffic();
  clear_has_has_bbox();
  clear_has_has_has_transit_tiles();
  clear_has_has_osm_changeset();
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:valhalla.Status)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void Status::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_available_actions()->~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (has_has_has_tiles()) {
    clear_has_has_tiles();
  }
  if (has_has_has_admins()) {
    clear_has_has_admins();
  }
  if (has_has_has_timezones()) {
    clear_has_has_timezones();
  }
  if (has_has_has_live_traffic()) {
    clear_has_has_live_traffic();
  }
  if (has_has_bbox()) {
    clear_has_bbox();
  }
  if (has_has_has_transit_tiles()) {
    clear_has_has_transit_tiles();
  }
  if (has_has_osm_changeset()) {
    clear_has_osm_changeset();
  }
}
void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::clear_has_has_tiles() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_tiles_case()) {
    case kHasTiles: {
      // No need to clear
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = HAS_HAS_TILES_NOT_SET;
}

void Status::clear_has_has_admins() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_admins_case()) {
    case kHasAdmins: {
      // No need to clear
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = HAS_HAS_ADMINS_NOT_SET;
}

void Status::clear_has_has_timezones() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_timezones_case()) {
    case kHasTimezones: {
      // No need to clear
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = HAS_HAS_TIMEZONES_NOT_SET;
}

void Status::clear_has_has_live_traffic() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      // No need to clear
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = HAS_HAS_LIVE_TRAFFIC_NOT_SET;
}

void Status::clear_has_bbox() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_bbox_case()) {
    case kBbox: {
      _impl_.has_bbox_.bbox_.Destroy();
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = HAS_BBOX_NOT_SET;
}

void Status::clear_has_has_transit_tiles() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_transit_tiles_case()) {
    case kHasTransitTiles: {
      // No need to clear
      break;
    }
    case HAS_HAS_TRANSIT_TILES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[5] = HAS_HAS_TRANSIT_TILES_NOT_SET;
}

void Status::clear_has_osm_changeset() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_osm_changeset_case()) {
    case kOsmChangeset: {
      // No need to clear
      break;
    }
    case HAS_OSM_CHANGESET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[6] = HAS_OSM_CHANGESET_NOT_SET;
}


PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Status)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_available_actions()->Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.tileset_last_modified_ = 0u;
  clear_has_has_tiles();
  clear_has_has_admins();
  clear_has_has_timezones();
  clear_has_has_live_traffic();
  clear_has_bbox();
  clear_has_has_transit_tiles();
  clear_has_osm_changeset();
  _internal_metadata_.Clear<std::string>();
}

const char* Status::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 10, 0, 60, 2> Status::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Status_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated string available_actions = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.available_actions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string version = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.version_)}},
    // uint32 tileset_last_modified = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.tileset_last_modified_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool has_tiles = 1;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_has_tiles_.has_tiles_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool has_admins = 2;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_has_admins_.has_admins_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool has_timezones = 3;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_has_timezones_.has_timezones_), _Internal::kOneofCaseOffset + 8, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool has_live_traffic = 4;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_has_live_traffic_.has_live_traffic_), _Internal::kOneofCaseOffset + 12, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // string bbox = 5;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_bbox_.bbox_), _Internal::kOneofCaseOffset + 16, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string version = 6;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 tileset_last_modified = 7;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.tileset_last_modified_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated string available_actions = 8;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.available_actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool has_transit_tiles = 9;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_has_transit_tiles_.has_transit_tiles_), _Internal::kOneofCaseOffset + 20, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // uint64 osm_changeset = 10;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.has_osm_changeset_.osm_changeset_), _Internal::kOneofCaseOffset + 24, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\17\0\0\0\0\4\7\0\21\0\0\0\0\0\0\0"
    "valhalla.Status"
    "bbox"
    "version"
    "available_actions"
  }},
};

::uint8_t* Status::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Status)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool has_tiles = 1;
  if (has_has_tiles_case() == kHasTiles) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_has_tiles(), target);
  }

  // bool has_admins = 2;
  if (has_has_admins_case() == kHasAdmins) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_has_admins(), target);
  }

  // bool has_timezones = 3;
  if (has_has_timezones_case() == kHasTimezones) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_has_timezones(), target);
  }

  // bool has_live_traffic = 4;
  if (has_has_live_traffic_case() == kHasLiveTraffic) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_has_live_traffic(), target);
  }

  // string bbox = 5;
  if (has_bbox_case() == kBbox) {
    const std::string& _s = this->_internal_bbox();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.Status.bbox");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.Status.version");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 tileset_last_modified = 7;
  if (this->_internal_tileset_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_tileset_last_modified(), target);
  }

  // repeated string available_actions = 8;
  for (int i = 0, n = this->_internal_available_actions_size(); i < n; ++i) {
    const auto& s = this->_internal_available_actions().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.Status.available_actions");
    target = stream->WriteString(8, s, target);
  }

  // bool has_transit_tiles = 9;
  if (has_has_transit_tiles_case() == kHasTransitTiles) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_has_transit_tiles(), target);
  }

  // uint64 osm_changeset = 10;
  if (has_osm_changeset_case() == kOsmChangeset) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_osm_changeset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Status)
  return target;
}

::size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Status)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string available_actions = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_available_actions().size());
  for (int i = 0, n = _internal_available_actions().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_available_actions().Get(i));
  }
  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // uint32 tileset_last_modified = 7;
  if (this->_internal_tileset_last_modified() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_tileset_last_modified());
  }

  switch (has_has_tiles_case()) {
    // bool has_tiles = 1;
    case kHasTiles: {
      total_size += 2;
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  switch (has_has_admins_case()) {
    // bool has_admins = 2;
    case kHasAdmins: {
      total_size += 2;
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  switch (has_has_timezones_case()) {
    // bool has_timezones = 3;
    case kHasTimezones: {
      total_size += 2;
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  switch (has_has_live_traffic_case()) {
    // bool has_live_traffic = 4;
    case kHasLiveTraffic: {
      total_size += 2;
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  switch (has_bbox_case()) {
    // string bbox = 5;
    case kBbox: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  switch (has_has_transit_tiles_case()) {
    // bool has_transit_tiles = 9;
    case kHasTransitTiles: {
      total_size += 2;
      break;
    }
    case HAS_HAS_TRANSIT_TILES_NOT_SET: {
      break;
    }
  }
  switch (has_osm_changeset_case()) {
    // uint64 osm_changeset = 10;
    case kOsmChangeset: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_osm_changeset());
      break;
    }
    case HAS_OSM_CHANGESET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Status*>(
      &from));
}

void Status::MergeFrom(const Status& from) {
  Status* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_available_actions()->MergeFrom(from._internal_available_actions());
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_tileset_last_modified() != 0) {
    _this->_internal_set_tileset_last_modified(from._internal_tileset_last_modified());
  }
  switch (from.has_has_tiles_case()) {
    case kHasTiles: {
      _this->_internal_set_has_tiles(from._internal_has_tiles());
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_admins_case()) {
    case kHasAdmins: {
      _this->_internal_set_has_admins(from._internal_has_admins());
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_timezones_case()) {
    case kHasTimezones: {
      _this->_internal_set_has_timezones(from._internal_has_timezones());
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      _this->_internal_set_has_live_traffic(from._internal_has_live_traffic());
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  switch (from.has_bbox_case()) {
    case kBbox: {
      _this->_internal_set_bbox(from._internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_transit_tiles_case()) {
    case kHasTransitTiles: {
      _this->_internal_set_has_transit_tiles(from._internal_has_transit_tiles());
      break;
    }
    case HAS_HAS_TRANSIT_TILES_NOT_SET: {
      break;
    }
  }
  switch (from.has_osm_changeset_case()) {
    case kOsmChangeset: {
      _this->_internal_set_osm_changeset(from._internal_osm_changeset());
      break;
    }
    case HAS_OSM_CHANGESET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.available_actions_.InternalSwap(&other->_impl_.available_actions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
        swap(_impl_.tileset_last_modified_, other->_impl_.tileset_last_modified_);
  swap(_impl_.has_has_tiles_, other->_impl_.has_has_tiles_);
  swap(_impl_.has_has_admins_, other->_impl_.has_has_admins_);
  swap(_impl_.has_has_timezones_, other->_impl_.has_has_timezones_);
  swap(_impl_.has_has_live_traffic_, other->_impl_.has_has_live_traffic_);
  swap(_impl_.has_bbox_, other->_impl_.has_bbox_);
  swap(_impl_.has_has_transit_tiles_, other->_impl_.has_has_transit_tiles_);
  swap(_impl_.has_osm_changeset_, other->_impl_.has_osm_changeset_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
  swap(_impl_._oneof_case_[5], other->_impl_._oneof_case_[5]);
  swap(_impl_._oneof_case_[6], other->_impl_._oneof_case_[6]);
}

std::string Status::GetTypeName() const {
  return "valhalla.Status";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

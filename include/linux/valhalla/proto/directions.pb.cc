// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "directions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_directions_2eproto() {
  delete DirectionsLeg::default_instance_;
  delete DirectionsLeg_Summary::default_instance_;
  delete DirectionsLeg_GuidanceView::default_instance_;
  delete DirectionsLeg_Maneuver::default_instance_;
  delete DirectionsRoute::default_instance_;
  delete Directions::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_directions_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_directions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_directions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::valhalla::protobuf_AddDesc_tripcommon_2eproto();
  ::valhalla::protobuf_AddDesc_sign_2eproto();
  DirectionsLeg::default_instance_ = new DirectionsLeg();
  DirectionsLeg_Summary::default_instance_ = new DirectionsLeg_Summary();
  DirectionsLeg_GuidanceView::default_instance_ = new DirectionsLeg_GuidanceView();
  DirectionsLeg_Maneuver::default_instance_ = new DirectionsLeg_Maneuver();
  DirectionsRoute::default_instance_ = new DirectionsRoute();
  Directions::default_instance_ = new Directions();
  DirectionsLeg::default_instance_->InitAsDefaultInstance();
  DirectionsLeg_Summary::default_instance_->InitAsDefaultInstance();
  DirectionsLeg_GuidanceView::default_instance_->InitAsDefaultInstance();
  DirectionsLeg_Maneuver::default_instance_->InitAsDefaultInstance();
  DirectionsRoute::default_instance_->InitAsDefaultInstance();
  Directions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_directions_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_directions_2eproto_once_);
void protobuf_AddDesc_directions_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_directions_2eproto_once_,
                 &protobuf_AddDesc_directions_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_directions_2eproto {
  StaticDescriptorInitializer_directions_2eproto() {
    protobuf_AddDesc_directions_2eproto();
  }
} static_descriptor_initializer_directions_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectionsLeg_Summary::kLengthFieldNumber;
const int DirectionsLeg_Summary::kTimeFieldNumber;
const int DirectionsLeg_Summary::kBboxFieldNumber;
const int DirectionsLeg_Summary::kHasTimeRestrictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectionsLeg_Summary::DirectionsLeg_Summary()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.DirectionsLeg.Summary)
}

void DirectionsLeg_Summary::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bbox_ = const_cast< ::valhalla::BoundingBox*>(
      ::valhalla::BoundingBox::internal_default_instance());
#else
  bbox_ = const_cast< ::valhalla::BoundingBox*>(&::valhalla::BoundingBox::default_instance());
#endif
}

DirectionsLeg_Summary::DirectionsLeg_Summary(const DirectionsLeg_Summary& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Summary)
}

void DirectionsLeg_Summary::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bbox_ = NULL;
  clear_has_has_length();
  clear_has_has_time();
  clear_has_has_has_time_restrictions();
}

DirectionsLeg_Summary::~DirectionsLeg_Summary() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Summary)
  SharedDtor();
}

void DirectionsLeg_Summary::SharedDtor() {
  if (has_has_length()) {
    clear_has_length();
  }
  if (has_has_time()) {
    clear_has_time();
  }
  if (has_has_has_time_restrictions()) {
    clear_has_has_time_restrictions();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bbox_;
  }
}

void DirectionsLeg_Summary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectionsLeg_Summary& DirectionsLeg_Summary::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

DirectionsLeg_Summary* DirectionsLeg_Summary::default_instance_ = NULL;

DirectionsLeg_Summary* DirectionsLeg_Summary::New(::google::protobuf::Arena* arena) const {
  DirectionsLeg_Summary* n = new DirectionsLeg_Summary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectionsLeg_Summary::clear_has_length() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Summary)
  switch(has_length_case()) {
    case kLength: {
      // No need to clear
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_LENGTH_NOT_SET;
}

void DirectionsLeg_Summary::clear_has_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Summary)
  switch(has_time_case()) {
    case kTime: {
      // No need to clear
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_TIME_NOT_SET;
}

void DirectionsLeg_Summary::clear_has_has_time_restrictions() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Summary)
  switch(has_has_time_restrictions_case()) {
    case kHasTimeRestrictions: {
      // No need to clear
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}


void DirectionsLeg_Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Summary)
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
  clear_has_length();
  clear_has_time();
  clear_has_has_time_restrictions();
}

bool DirectionsLeg_Summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.DirectionsLeg.Summary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float length = 1;
      case 1: {
        if (tag == 13) {
          clear_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_length_.length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_time;
        break;
      }

      // optional double time = 2;
      case 2: {
        if (tag == 17) {
         parse_time:
          clear_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_time_.time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bbox;
        break;
      }

      // optional .valhalla.BoundingBox bbox = 3;
      case 3: {
        if (tag == 26) {
         parse_bbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_time_restrictions;
        break;
      }

      // optional bool has_time_restrictions = 4;
      case 4: {
        if (tag == 32) {
         parse_has_time_restrictions:
          clear_has_has_time_restrictions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_has_time_restrictions_.has_time_restrictions_)));
          set_has_has_time_restrictions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.DirectionsLeg.Summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.DirectionsLeg.Summary)
  return false;
#undef DO_
}

void DirectionsLeg_Summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.DirectionsLeg.Summary)
  // optional float length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->length(), output);
  }

  // optional double time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // optional .valhalla.BoundingBox bbox = 3;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->bbox_, output);
  }

  // optional bool has_time_restrictions = 4;
  if (has_has_time_restrictions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_time_restrictions(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.DirectionsLeg.Summary)
}

int DirectionsLeg_Summary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Summary)
  int total_size = 0;

  // optional .valhalla.BoundingBox bbox = 3;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bbox_);
  }

  switch (has_length_case()) {
    // optional float length = 1;
    case kLength: {
      total_size += 1 + 4;
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (has_time_case()) {
    // optional double time = 2;
    case kTime: {
      total_size += 1 + 8;
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_has_time_restrictions_case()) {
    // optional bool has_time_restrictions = 4;
    case kHasTimeRestrictions: {
      total_size += 1 + 1;
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsLeg_Summary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectionsLeg_Summary*>(&from));
}

void DirectionsLeg_Summary::MergeFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Summary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_length_case()) {
    case kLength: {
      set_length(from.length());
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (from.has_time_case()) {
    case kTime: {
      set_time(from.time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_time_restrictions_case()) {
    case kHasTimeRestrictions: {
      set_has_time_restrictions(from.has_time_restrictions());
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  if (from.has_bbox()) {
    mutable_bbox()->::valhalla::BoundingBox::MergeFrom(from.bbox());
  }
}

void DirectionsLeg_Summary::CopyFrom(const DirectionsLeg_Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Summary::IsInitialized() const {

  return true;
}

void DirectionsLeg_Summary::Swap(DirectionsLeg_Summary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectionsLeg_Summary::InternalSwap(DirectionsLeg_Summary* other) {
  std::swap(bbox_, other->bbox_);
  std::swap(has_length_, other->has_length_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_time_, other->has_time_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_has_time_restrictions_, other->has_has_time_restrictions_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectionsLeg_Summary::GetTypeName() const {
  return "valhalla.DirectionsLeg.Summary";
}


// -------------------------------------------------------------------

bool DirectionsLeg_GuidanceView_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kJunction;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSapa;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kTollbranch;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kAftertoll;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kEnt;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kExit;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kCityreal;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kDirectionboard;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::kSignboard;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MIN;
const DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::Type_MAX;
const int DirectionsLeg_GuidanceView::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectionsLeg_GuidanceView::kDataIdFieldNumber;
const int DirectionsLeg_GuidanceView::kTypeFieldNumber;
const int DirectionsLeg_GuidanceView::kBaseIdFieldNumber;
const int DirectionsLeg_GuidanceView::kOverlayIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.DirectionsLeg.GuidanceView)
}

void DirectionsLeg_GuidanceView::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DirectionsLeg_GuidanceView::DirectionsLeg_GuidanceView(const DirectionsLeg_GuidanceView& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.GuidanceView)
}

void DirectionsLeg_GuidanceView::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_data_id();
  clear_has_has_type();
  clear_has_has_base_id();
}

DirectionsLeg_GuidanceView::~DirectionsLeg_GuidanceView() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.GuidanceView)
  SharedDtor();
}

void DirectionsLeg_GuidanceView::SharedDtor() {
  if (has_has_data_id()) {
    clear_has_data_id();
  }
  if (has_has_type()) {
    clear_has_type();
  }
  if (has_has_base_id()) {
    clear_has_base_id();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DirectionsLeg_GuidanceView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectionsLeg_GuidanceView& DirectionsLeg_GuidanceView::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

DirectionsLeg_GuidanceView* DirectionsLeg_GuidanceView::default_instance_ = NULL;

DirectionsLeg_GuidanceView* DirectionsLeg_GuidanceView::New(::google::protobuf::Arena* arena) const {
  DirectionsLeg_GuidanceView* n = new DirectionsLeg_GuidanceView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectionsLeg_GuidanceView::clear_has_data_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.GuidanceView)
  switch(has_data_id_case()) {
    case kDataId: {
      has_data_id_.data_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DATA_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_DATA_ID_NOT_SET;
}

void DirectionsLeg_GuidanceView::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.GuidanceView)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_TYPE_NOT_SET;
}

void DirectionsLeg_GuidanceView::clear_has_base_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.GuidanceView)
  switch(has_base_id_case()) {
    case kBaseId: {
      has_base_id_.base_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_BASE_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_BASE_ID_NOT_SET;
}


void DirectionsLeg_GuidanceView::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.GuidanceView)
  overlay_ids_.Clear();
  clear_has_data_id();
  clear_has_type();
  clear_has_base_id();
}

bool DirectionsLeg_GuidanceView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.DirectionsLeg.GuidanceView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_id().data(), this->data_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.GuidanceView.data_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::DirectionsLeg_GuidanceView_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base_id;
        break;
      }

      // optional string base_id = 3;
      case 3: {
        if (tag == 26) {
         parse_base_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base_id().data(), this->base_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.GuidanceView.base_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_overlay_ids;
        break;
      }

      // repeated string overlay_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_overlay_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_overlay_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->overlay_ids(this->overlay_ids_size() - 1).data(),
            this->overlay_ids(this->overlay_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.GuidanceView.overlay_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_overlay_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.DirectionsLeg.GuidanceView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.DirectionsLeg.GuidanceView)
  return false;
#undef DO_
}

void DirectionsLeg_GuidanceView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.DirectionsLeg.GuidanceView)
  // optional string data_id = 1;
  if (has_data_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_id().data(), this->data_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.data_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data_id(), output);
  }

  // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string base_id = 3;
  if (has_base_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base_id().data(), this->base_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.base_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base_id(), output);
  }

  // repeated string overlay_ids = 4;
  for (int i = 0; i < this->overlay_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->overlay_ids(i).data(), this->overlay_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.GuidanceView.overlay_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->overlay_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.DirectionsLeg.GuidanceView)
}

int DirectionsLeg_GuidanceView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.GuidanceView)
  int total_size = 0;

  // repeated string overlay_ids = 4;
  total_size += 1 * this->overlay_ids_size();
  for (int i = 0; i < this->overlay_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->overlay_ids(i));
  }

  switch (has_data_id_case()) {
    // optional string data_id = 1;
    case kDataId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_id());
      break;
    }
    case HAS_DATA_ID_NOT_SET: {
      break;
    }
  }
  switch (has_type_case()) {
    // optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_base_id_case()) {
    // optional string base_id = 3;
    case kBaseId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_id());
      break;
    }
    case HAS_BASE_ID_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsLeg_GuidanceView::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectionsLeg_GuidanceView*>(&from));
}

void DirectionsLeg_GuidanceView::MergeFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.GuidanceView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  overlay_ids_.MergeFrom(from.overlay_ids_);
  switch (from.has_data_id_case()) {
    case kDataId: {
      set_data_id(from.data_id());
      break;
    }
    case HAS_DATA_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_base_id_case()) {
    case kBaseId: {
      set_base_id(from.base_id());
      break;
    }
    case HAS_BASE_ID_NOT_SET: {
      break;
    }
  }
}

void DirectionsLeg_GuidanceView::CopyFrom(const DirectionsLeg_GuidanceView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.GuidanceView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_GuidanceView::IsInitialized() const {

  return true;
}

void DirectionsLeg_GuidanceView::Swap(DirectionsLeg_GuidanceView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectionsLeg_GuidanceView::InternalSwap(DirectionsLeg_GuidanceView* other) {
  overlay_ids_.UnsafeArenaSwap(&other->overlay_ids_);
  std::swap(has_data_id_, other->has_data_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_base_id_, other->has_base_id_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectionsLeg_GuidanceView::GetTypeName() const {
  return "valhalla.DirectionsLeg.GuidanceView";
}


// -------------------------------------------------------------------

bool DirectionsLeg_Maneuver_CardinalDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorth;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthEast;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kEast;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthEast;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouth;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kSouthWest;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kWest;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::kNorthWest;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MIN;
const DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::CardinalDirection_MAX;
const int DirectionsLeg_Maneuver::CardinalDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DirectionsLeg_Maneuver_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kNone;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStart;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStartLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestination;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kDestinationLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kBecomes;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kContinue;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kUturnLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSharpLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kSlightLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampStraight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRampLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kExitLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayStraight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kStayLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMerge;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutEnter;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kRoundaboutExit;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryEnter;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kFerryExit;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransit;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitTransfer;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitRemainOn;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionStart;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionTransfer;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kTransitConnectionDestination;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kPostTransitConnectionDestination;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeRight;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::kMergeLeft;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MIN;
const DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::Type_MAX;
const int DirectionsLeg_Maneuver::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DirectionsLeg_Maneuver_BssManeuverType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kNoneAction;
const DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kRentBikeAtBikeShare;
const DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::kReturnBikeAtBikeShare;
const DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MIN;
const DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::BssManeuverType_MAX;
const int DirectionsLeg_Maneuver::BssManeuverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectionsLeg_Maneuver::kTypeFieldNumber;
const int DirectionsLeg_Maneuver::kTextInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kStreetNameFieldNumber;
const int DirectionsLeg_Maneuver::kLengthFieldNumber;
const int DirectionsLeg_Maneuver::kTimeFieldNumber;
const int DirectionsLeg_Maneuver::kBeginCardinalDirectionFieldNumber;
const int DirectionsLeg_Maneuver::kBeginHeadingFieldNumber;
const int DirectionsLeg_Maneuver::kBeginShapeIndexFieldNumber;
const int DirectionsLeg_Maneuver::kEndShapeIndexFieldNumber;
const int DirectionsLeg_Maneuver::kPortionsTollFieldNumber;
const int DirectionsLeg_Maneuver::kPortionsUnpavedFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalTransitionAlertInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalPreTransitionInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalPostTransitionInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kBeginStreetNameFieldNumber;
const int DirectionsLeg_Maneuver::kSignFieldNumber;
const int DirectionsLeg_Maneuver::kRoundaboutExitCountFieldNumber;
const int DirectionsLeg_Maneuver::kDepartInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalDepartInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kArriveInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalArriveInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kTransitInfoFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalMultiCueFieldNumber;
const int DirectionsLeg_Maneuver::kTravelModeFieldNumber;
const int DirectionsLeg_Maneuver::kVehicleTypeFieldNumber;
const int DirectionsLeg_Maneuver::kPedestrianTypeFieldNumber;
const int DirectionsLeg_Maneuver::kBicycleTypeFieldNumber;
const int DirectionsLeg_Maneuver::kTransitTypeFieldNumber;
const int DirectionsLeg_Maneuver::kBeginPathIndexFieldNumber;
const int DirectionsLeg_Maneuver::kEndPathIndexFieldNumber;
const int DirectionsLeg_Maneuver::kToStayOnFieldNumber;
const int DirectionsLeg_Maneuver::kRoundaboutExitStreetNamesFieldNumber;
const int DirectionsLeg_Maneuver::kTurnDegreeFieldNumber;
const int DirectionsLeg_Maneuver::kHasTimeRestrictionsFieldNumber;
const int DirectionsLeg_Maneuver::kGuidanceViewsFieldNumber;
const int DirectionsLeg_Maneuver::kBssManeuverTypeFieldNumber;
const int DirectionsLeg_Maneuver::kVerbalSuccinctTransitionInstructionFieldNumber;
const int DirectionsLeg_Maneuver::kBssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectionsLeg_Maneuver::DirectionsLeg_Maneuver()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.DirectionsLeg.Maneuver)
}

void DirectionsLeg_Maneuver::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_ = const_cast< ::valhalla::TripSign*>(
      ::valhalla::TripSign::internal_default_instance());
#else
  sign_ = const_cast< ::valhalla::TripSign*>(&::valhalla::TripSign::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transit_info_ = const_cast< ::valhalla::TransitRouteInfo*>(
      ::valhalla::TransitRouteInfo::internal_default_instance());
#else
  transit_info_ = const_cast< ::valhalla::TransitRouteInfo*>(&::valhalla::TransitRouteInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bss_info_ = const_cast< ::valhalla::BikeShareStationInfo*>(
      ::valhalla::BikeShareStationInfo::internal_default_instance());
#else
  bss_info_ = const_cast< ::valhalla::BikeShareStationInfo*>(&::valhalla::BikeShareStationInfo::default_instance());
#endif
}

DirectionsLeg_Maneuver::DirectionsLeg_Maneuver(const DirectionsLeg_Maneuver& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg.Maneuver)
}

void DirectionsLeg_Maneuver::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sign_ = NULL;
  transit_info_ = NULL;
  bss_info_ = NULL;
  clear_has_has_type();
  clear_has_has_text_instruction();
  clear_has_has_length();
  clear_has_has_time();
  clear_has_has_begin_cardinal_direction();
  clear_has_has_begin_heading();
  clear_has_has_begin_shape_index();
  clear_has_has_end_shape_index();
  clear_has_has_portions_toll();
  clear_has_has_portions_unpaved();
  clear_has_has_verbal_transition_alert_instruction();
  clear_has_has_verbal_pre_transition_instruction();
  clear_has_has_verbal_post_transition_instruction();
  clear_has_has_roundabout_exit_count();
  clear_has_has_depart_instruction();
  clear_has_has_verbal_depart_instruction();
  clear_has_has_arrive_instruction();
  clear_has_has_verbal_arrive_instruction();
  clear_has_has_verbal_multi_cue();
  clear_has_has_travel_mode();
  clear_has_has_vehicle_type();
  clear_has_has_pedestrian_type();
  clear_has_has_bicycle_type();
  clear_has_has_transit_type();
  clear_has_has_begin_path_index();
  clear_has_has_end_path_index();
  clear_has_has_to_stay_on();
  clear_has_has_turn_degree();
  clear_has_has_has_time_restrictions();
  clear_has_has_bss_maneuver_type();
  clear_has_has_verbal_succinct_transition_instruction();
}

DirectionsLeg_Maneuver::~DirectionsLeg_Maneuver() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg.Maneuver)
  SharedDtor();
}

void DirectionsLeg_Maneuver::SharedDtor() {
  if (has_has_type()) {
    clear_has_type();
  }
  if (has_has_text_instruction()) {
    clear_has_text_instruction();
  }
  if (has_has_length()) {
    clear_has_length();
  }
  if (has_has_time()) {
    clear_has_time();
  }
  if (has_has_begin_cardinal_direction()) {
    clear_has_begin_cardinal_direction();
  }
  if (has_has_begin_heading()) {
    clear_has_begin_heading();
  }
  if (has_has_begin_shape_index()) {
    clear_has_begin_shape_index();
  }
  if (has_has_end_shape_index()) {
    clear_has_end_shape_index();
  }
  if (has_has_portions_toll()) {
    clear_has_portions_toll();
  }
  if (has_has_portions_unpaved()) {
    clear_has_portions_unpaved();
  }
  if (has_has_verbal_transition_alert_instruction()) {
    clear_has_verbal_transition_alert_instruction();
  }
  if (has_has_verbal_pre_transition_instruction()) {
    clear_has_verbal_pre_transition_instruction();
  }
  if (has_has_verbal_post_transition_instruction()) {
    clear_has_verbal_post_transition_instruction();
  }
  if (has_has_roundabout_exit_count()) {
    clear_has_roundabout_exit_count();
  }
  if (has_has_depart_instruction()) {
    clear_has_depart_instruction();
  }
  if (has_has_verbal_depart_instruction()) {
    clear_has_verbal_depart_instruction();
  }
  if (has_has_arrive_instruction()) {
    clear_has_arrive_instruction();
  }
  if (has_has_verbal_arrive_instruction()) {
    clear_has_verbal_arrive_instruction();
  }
  if (has_has_verbal_multi_cue()) {
    clear_has_verbal_multi_cue();
  }
  if (has_has_travel_mode()) {
    clear_has_travel_mode();
  }
  if (has_has_vehicle_type()) {
    clear_has_vehicle_type();
  }
  if (has_has_pedestrian_type()) {
    clear_has_pedestrian_type();
  }
  if (has_has_bicycle_type()) {
    clear_has_bicycle_type();
  }
  if (has_has_transit_type()) {
    clear_has_transit_type();
  }
  if (has_has_begin_path_index()) {
    clear_has_begin_path_index();
  }
  if (has_has_end_path_index()) {
    clear_has_end_path_index();
  }
  if (has_has_to_stay_on()) {
    clear_has_to_stay_on();
  }
  if (has_has_turn_degree()) {
    clear_has_turn_degree();
  }
  if (has_has_has_time_restrictions()) {
    clear_has_has_time_restrictions();
  }
  if (has_has_bss_maneuver_type()) {
    clear_has_bss_maneuver_type();
  }
  if (has_has_verbal_succinct_transition_instruction()) {
    clear_has_verbal_succinct_transition_instruction();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sign_;
    delete transit_info_;
    delete bss_info_;
  }
}

void DirectionsLeg_Maneuver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectionsLeg_Maneuver& DirectionsLeg_Maneuver::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

DirectionsLeg_Maneuver* DirectionsLeg_Maneuver::default_instance_ = NULL;

DirectionsLeg_Maneuver* DirectionsLeg_Maneuver::New(::google::protobuf::Arena* arena) const {
  DirectionsLeg_Maneuver* n = new DirectionsLeg_Maneuver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectionsLeg_Maneuver::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_text_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_text_instruction_case()) {
    case kTextInstruction: {
      has_text_instruction_.text_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_TEXT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_TEXT_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_length() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_length_case()) {
    case kLength: {
      // No need to clear
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_LENGTH_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_time_case()) {
    case kTime: {
      // No need to clear
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_TIME_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_begin_cardinal_direction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_begin_cardinal_direction_case()) {
    case kBeginCardinalDirection: {
      // No need to clear
      break;
    }
    case HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_begin_heading() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_begin_heading_case()) {
    case kBeginHeading: {
      // No need to clear
      break;
    }
    case HAS_BEGIN_HEADING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_BEGIN_HEADING_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_begin_shape_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_begin_shape_index_case()) {
    case kBeginShapeIndex: {
      // No need to clear
      break;
    }
    case HAS_BEGIN_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_BEGIN_SHAPE_INDEX_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_end_shape_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_end_shape_index_case()) {
    case kEndShapeIndex: {
      // No need to clear
      break;
    }
    case HAS_END_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_END_SHAPE_INDEX_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_portions_toll() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_portions_toll_case()) {
    case kPortionsToll: {
      // No need to clear
      break;
    }
    case HAS_PORTIONS_TOLL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_PORTIONS_TOLL_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_portions_unpaved() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_portions_unpaved_case()) {
    case kPortionsUnpaved: {
      // No need to clear
      break;
    }
    case HAS_PORTIONS_UNPAVED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_PORTIONS_UNPAVED_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_transition_alert_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_transition_alert_instruction_case()) {
    case kVerbalTransitionAlertInstruction: {
      has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_pre_transition_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_pre_transition_instruction_case()) {
    case kVerbalPreTransitionInstruction: {
      has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_post_transition_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_post_transition_instruction_case()) {
    case kVerbalPostTransitionInstruction: {
      has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[12] = HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_roundabout_exit_count() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_roundabout_exit_count_case()) {
    case kRoundaboutExitCount: {
      // No need to clear
      break;
    }
    case HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[13] = HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_depart_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_depart_instruction_case()) {
    case kDepartInstruction: {
      has_depart_instruction_.depart_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[14] = HAS_DEPART_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_depart_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_depart_instruction_case()) {
    case kVerbalDepartInstruction: {
      has_verbal_depart_instruction_.verbal_depart_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[15] = HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_arrive_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_arrive_instruction_case()) {
    case kArriveInstruction: {
      has_arrive_instruction_.arrive_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[16] = HAS_ARRIVE_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_arrive_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_arrive_instruction_case()) {
    case kVerbalArriveInstruction: {
      has_verbal_arrive_instruction_.verbal_arrive_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[17] = HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_multi_cue() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_multi_cue_case()) {
    case kVerbalMultiCue: {
      // No need to clear
      break;
    }
    case HAS_VERBAL_MULTI_CUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[18] = HAS_VERBAL_MULTI_CUE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_travel_mode() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_travel_mode_case()) {
    case kTravelMode: {
      // No need to clear
      break;
    }
    case HAS_TRAVEL_MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[19] = HAS_TRAVEL_MODE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_vehicle_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_vehicle_type_case()) {
    case kVehicleType: {
      // No need to clear
      break;
    }
    case HAS_VEHICLE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[20] = HAS_VEHICLE_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_pedestrian_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_pedestrian_type_case()) {
    case kPedestrianType: {
      // No need to clear
      break;
    }
    case HAS_PEDESTRIAN_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[21] = HAS_PEDESTRIAN_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_bicycle_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_bicycle_type_case()) {
    case kBicycleType: {
      // No need to clear
      break;
    }
    case HAS_BICYCLE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[22] = HAS_BICYCLE_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_transit_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_transit_type_case()) {
    case kTransitType: {
      // No need to clear
      break;
    }
    case HAS_TRANSIT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[23] = HAS_TRANSIT_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_begin_path_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_begin_path_index_case()) {
    case kBeginPathIndex: {
      // No need to clear
      break;
    }
    case HAS_BEGIN_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[24] = HAS_BEGIN_PATH_INDEX_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_end_path_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_end_path_index_case()) {
    case kEndPathIndex: {
      // No need to clear
      break;
    }
    case HAS_END_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[25] = HAS_END_PATH_INDEX_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_to_stay_on() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_to_stay_on_case()) {
    case kToStayOn: {
      // No need to clear
      break;
    }
    case HAS_TO_STAY_ON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[26] = HAS_TO_STAY_ON_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_turn_degree() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_turn_degree_case()) {
    case kTurnDegree: {
      // No need to clear
      break;
    }
    case HAS_TURN_DEGREE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[27] = HAS_TURN_DEGREE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_has_time_restrictions() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_has_time_restrictions_case()) {
    case kHasTimeRestrictions: {
      // No need to clear
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[28] = HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_bss_maneuver_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_bss_maneuver_type_case()) {
    case kBssManeuverType: {
      // No need to clear
      break;
    }
    case HAS_BSS_MANEUVER_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[29] = HAS_BSS_MANEUVER_TYPE_NOT_SET;
}

void DirectionsLeg_Maneuver::clear_has_verbal_succinct_transition_instruction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg.Maneuver)
  switch(has_verbal_succinct_transition_instruction_case()) {
    case kVerbalSuccinctTransitionInstruction: {
      has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[30] = HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET;
}


void DirectionsLeg_Maneuver::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg.Maneuver)
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) delete sign_;
  sign_ = NULL;
  if (GetArenaNoVirtual() == NULL && transit_info_ != NULL) delete transit_info_;
  transit_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && bss_info_ != NULL) delete bss_info_;
  bss_info_ = NULL;
  street_name_.Clear();
  begin_street_name_.Clear();
  roundabout_exit_street_names_.Clear();
  guidance_views_.Clear();
  clear_has_type();
  clear_has_text_instruction();
  clear_has_length();
  clear_has_time();
  clear_has_begin_cardinal_direction();
  clear_has_begin_heading();
  clear_has_begin_shape_index();
  clear_has_end_shape_index();
  clear_has_portions_toll();
  clear_has_portions_unpaved();
  clear_has_verbal_transition_alert_instruction();
  clear_has_verbal_pre_transition_instruction();
  clear_has_verbal_post_transition_instruction();
  clear_has_roundabout_exit_count();
  clear_has_depart_instruction();
  clear_has_verbal_depart_instruction();
  clear_has_arrive_instruction();
  clear_has_verbal_arrive_instruction();
  clear_has_verbal_multi_cue();
  clear_has_travel_mode();
  clear_has_vehicle_type();
  clear_has_pedestrian_type();
  clear_has_bicycle_type();
  clear_has_transit_type();
  clear_has_begin_path_index();
  clear_has_end_path_index();
  clear_has_to_stay_on();
  clear_has_turn_degree();
  clear_has_has_time_restrictions();
  clear_has_bss_maneuver_type();
  clear_has_verbal_succinct_transition_instruction();
}

bool DirectionsLeg_Maneuver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.DirectionsLeg.Maneuver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::DirectionsLeg_Maneuver_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text_instruction;
        break;
      }

      // optional string text_instruction = 2;
      case 2: {
        if (tag == 18) {
         parse_text_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_instruction().data(), this->text_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.text_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_street_name;
        break;
      }

      // repeated .valhalla.StreetName street_name = 3;
      case 3: {
        if (tag == 26) {
         parse_street_name:
          DO_(input->IncrementRecursionDepth());
         parse_loop_street_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_street_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_street_name;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }

      // optional float length = 4;
      case 4: {
        if (tag == 37) {
         parse_length:
          clear_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_length_.length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_time;
        break;
      }

      // optional double time = 5;
      case 5: {
        if (tag == 41) {
         parse_time:
          clear_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_time_.time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_begin_cardinal_direction;
        break;
      }

      // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
      case 6: {
        if (tag == 48) {
         parse_begin_cardinal_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_begin_cardinal_direction(static_cast< ::valhalla::DirectionsLeg_Maneuver_CardinalDirection >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begin_heading;
        break;
      }

      // optional uint32 begin_heading = 7;
      case 7: {
        if (tag == 56) {
         parse_begin_heading:
          clear_has_begin_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_begin_heading_.begin_heading_)));
          set_has_begin_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_begin_shape_index;
        break;
      }

      // optional uint32 begin_shape_index = 8;
      case 8: {
        if (tag == 64) {
         parse_begin_shape_index:
          clear_has_begin_shape_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_begin_shape_index_.begin_shape_index_)));
          set_has_begin_shape_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_end_shape_index;
        break;
      }

      // optional uint32 end_shape_index = 9;
      case 9: {
        if (tag == 72) {
         parse_end_shape_index:
          clear_has_end_shape_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_end_shape_index_.end_shape_index_)));
          set_has_end_shape_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_portions_toll;
        break;
      }

      // optional bool portions_toll = 10;
      case 10: {
        if (tag == 80) {
         parse_portions_toll:
          clear_has_portions_toll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_portions_toll_.portions_toll_)));
          set_has_portions_toll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_portions_unpaved;
        break;
      }

      // optional bool portions_unpaved = 11;
      case 11: {
        if (tag == 88) {
         parse_portions_unpaved:
          clear_has_portions_unpaved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_portions_unpaved_.portions_unpaved_)));
          set_has_portions_unpaved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_verbal_transition_alert_instruction;
        break;
      }

      // optional string verbal_transition_alert_instruction = 12;
      case 12: {
        if (tag == 98) {
         parse_verbal_transition_alert_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_transition_alert_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_verbal_pre_transition_instruction;
        break;
      }

      // optional string verbal_pre_transition_instruction = 13;
      case 13: {
        if (tag == 106) {
         parse_verbal_pre_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_pre_transition_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_verbal_post_transition_instruction;
        break;
      }

      // optional string verbal_post_transition_instruction = 14;
      case 14: {
        if (tag == 114) {
         parse_verbal_post_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_post_transition_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_begin_street_name;
        break;
      }

      // repeated .valhalla.StreetName begin_street_name = 15;
      case 15: {
        if (tag == 122) {
         parse_begin_street_name:
          DO_(input->IncrementRecursionDepth());
         parse_loop_begin_street_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_begin_street_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_begin_street_name;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_sign;
        break;
      }

      // optional .valhalla.TripSign sign = 16;
      case 16: {
        if (tag == 130) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_roundabout_exit_count;
        break;
      }

      // optional uint32 roundabout_exit_count = 17;
      case 17: {
        if (tag == 136) {
         parse_roundabout_exit_count:
          clear_has_roundabout_exit_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_roundabout_exit_count_.roundabout_exit_count_)));
          set_has_roundabout_exit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_depart_instruction;
        break;
      }

      // optional string depart_instruction = 18;
      case 18: {
        if (tag == 146) {
         parse_depart_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_depart_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->depart_instruction().data(), this->depart_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.depart_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_verbal_depart_instruction;
        break;
      }

      // optional string verbal_depart_instruction = 19;
      case 19: {
        if (tag == 154) {
         parse_verbal_depart_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_depart_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_depart_instruction().data(), this->verbal_depart_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_arrive_instruction;
        break;
      }

      // optional string arrive_instruction = 20;
      case 20: {
        if (tag == 162) {
         parse_arrive_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrive_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arrive_instruction().data(), this->arrive_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.arrive_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_verbal_arrive_instruction;
        break;
      }

      // optional string verbal_arrive_instruction = 21;
      case 21: {
        if (tag == 170) {
         parse_verbal_arrive_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_arrive_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_arrive_instruction().data(), this->verbal_arrive_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_transit_info;
        break;
      }

      // optional .valhalla.TransitRouteInfo transit_info = 22;
      case 22: {
        if (tag == 178) {
         parse_transit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transit_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_verbal_multi_cue;
        break;
      }

      // optional bool verbal_multi_cue = 23;
      case 23: {
        if (tag == 184) {
         parse_verbal_multi_cue:
          clear_has_verbal_multi_cue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_verbal_multi_cue_.verbal_multi_cue_)));
          set_has_verbal_multi_cue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_travel_mode;
        break;
      }

      // optional .valhalla.TravelMode travel_mode = 24;
      case 24: {
        if (tag == 192) {
         parse_travel_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_travel_mode(static_cast< ::valhalla::TravelMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_vehicle_type;
        break;
      }

      // optional .valhalla.VehicleType vehicle_type = 25;
      case 25: {
        if (tag == 200) {
         parse_vehicle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicle_type(static_cast< ::valhalla::VehicleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_pedestrian_type;
        break;
      }

      // optional .valhalla.PedestrianType pedestrian_type = 26;
      case 26: {
        if (tag == 208) {
         parse_pedestrian_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pedestrian_type(static_cast< ::valhalla::PedestrianType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_bicycle_type;
        break;
      }

      // optional .valhalla.BicycleType bicycle_type = 27;
      case 27: {
        if (tag == 216) {
         parse_bicycle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bicycle_type(static_cast< ::valhalla::BicycleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_transit_type;
        break;
      }

      // optional .valhalla.TransitType transit_type = 28;
      case 28: {
        if (tag == 224) {
         parse_transit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transit_type(static_cast< ::valhalla::TransitType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_begin_path_index;
        break;
      }

      // optional uint32 begin_path_index = 29;
      case 29: {
        if (tag == 232) {
         parse_begin_path_index:
          clear_has_begin_path_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_begin_path_index_.begin_path_index_)));
          set_has_begin_path_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_end_path_index;
        break;
      }

      // optional uint32 end_path_index = 30;
      case 30: {
        if (tag == 240) {
         parse_end_path_index:
          clear_has_end_path_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_end_path_index_.end_path_index_)));
          set_has_end_path_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_to_stay_on;
        break;
      }

      // optional bool to_stay_on = 31;
      case 31: {
        if (tag == 248) {
         parse_to_stay_on:
          clear_has_to_stay_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_to_stay_on_.to_stay_on_)));
          set_has_to_stay_on();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_roundabout_exit_street_names;
        break;
      }

      // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
      case 32: {
        if (tag == 258) {
         parse_roundabout_exit_street_names:
          DO_(input->IncrementRecursionDepth());
         parse_loop_roundabout_exit_street_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roundabout_exit_street_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_roundabout_exit_street_names;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(264)) goto parse_turn_degree;
        break;
      }

      // optional uint32 turn_degree = 33;
      case 33: {
        if (tag == 264) {
         parse_turn_degree:
          clear_has_turn_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_turn_degree_.turn_degree_)));
          set_has_turn_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_has_time_restrictions;
        break;
      }

      // optional bool has_time_restrictions = 34;
      case 34: {
        if (tag == 272) {
         parse_has_time_restrictions:
          clear_has_has_time_restrictions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_has_time_restrictions_.has_time_restrictions_)));
          set_has_has_time_restrictions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_guidance_views;
        break;
      }

      // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
      case 35: {
        if (tag == 282) {
         parse_guidance_views:
          DO_(input->IncrementRecursionDepth());
         parse_loop_guidance_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guidance_views()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_loop_guidance_views;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(288)) goto parse_bss_maneuver_type;
        break;
      }

      // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
      case 36: {
        if (tag == 288) {
         parse_bss_maneuver_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bss_maneuver_type(static_cast< ::valhalla::DirectionsLeg_Maneuver_BssManeuverType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_verbal_succinct_transition_instruction;
        break;
      }

      // optional string verbal_succinct_transition_instruction = 37;
      case 37: {
        if (tag == 298) {
         parse_verbal_succinct_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_succinct_transition_instruction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verbal_succinct_transition_instruction().data(), this->verbal_succinct_transition_instruction().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_bss_info;
        break;
      }

      // optional .valhalla.BikeShareStationInfo bss_info = 38;
      case 38: {
        if (tag == 306) {
         parse_bss_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bss_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.DirectionsLeg.Maneuver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.DirectionsLeg.Maneuver)
  return false;
#undef DO_
}

void DirectionsLeg_Maneuver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.DirectionsLeg.Maneuver)
  // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string text_instruction = 2;
  if (has_text_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_instruction().data(), this->text_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.text_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text_instruction(), output);
  }

  // repeated .valhalla.StreetName street_name = 3;
  for (unsigned int i = 0, n = this->street_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->street_name(i), output);
  }

  // optional float length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->length(), output);
  }

  // optional double time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->time(), output);
  }

  // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
  if (has_begin_cardinal_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->begin_cardinal_direction(), output);
  }

  // optional uint32 begin_heading = 7;
  if (has_begin_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begin_heading(), output);
  }

  // optional uint32 begin_shape_index = 8;
  if (has_begin_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->begin_shape_index(), output);
  }

  // optional uint32 end_shape_index = 9;
  if (has_end_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_shape_index(), output);
  }

  // optional bool portions_toll = 10;
  if (has_portions_toll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->portions_toll(), output);
  }

  // optional bool portions_unpaved = 11;
  if (has_portions_unpaved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->portions_unpaved(), output);
  }

  // optional string verbal_transition_alert_instruction = 12;
  if (has_verbal_transition_alert_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->verbal_transition_alert_instruction(), output);
  }

  // optional string verbal_pre_transition_instruction = 13;
  if (has_verbal_pre_transition_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->verbal_pre_transition_instruction(), output);
  }

  // optional string verbal_post_transition_instruction = 14;
  if (has_verbal_post_transition_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->verbal_post_transition_instruction(), output);
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  for (unsigned int i = 0, n = this->begin_street_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->begin_street_name(i), output);
  }

  // optional .valhalla.TripSign sign = 16;
  if (this->has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->sign_, output);
  }

  // optional uint32 roundabout_exit_count = 17;
  if (has_roundabout_exit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->roundabout_exit_count(), output);
  }

  // optional string depart_instruction = 18;
  if (has_depart_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->depart_instruction().data(), this->depart_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.depart_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->depart_instruction(), output);
  }

  // optional string verbal_depart_instruction = 19;
  if (has_verbal_depart_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_depart_instruction().data(), this->verbal_depart_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->verbal_depart_instruction(), output);
  }

  // optional string arrive_instruction = 20;
  if (has_arrive_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arrive_instruction().data(), this->arrive_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.arrive_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->arrive_instruction(), output);
  }

  // optional string verbal_arrive_instruction = 21;
  if (has_verbal_arrive_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_arrive_instruction().data(), this->verbal_arrive_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->verbal_arrive_instruction(), output);
  }

  // optional .valhalla.TransitRouteInfo transit_info = 22;
  if (this->has_transit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->transit_info_, output);
  }

  // optional bool verbal_multi_cue = 23;
  if (has_verbal_multi_cue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->verbal_multi_cue(), output);
  }

  // optional .valhalla.TravelMode travel_mode = 24;
  if (has_travel_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->travel_mode(), output);
  }

  // optional .valhalla.VehicleType vehicle_type = 25;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->vehicle_type(), output);
  }

  // optional .valhalla.PedestrianType pedestrian_type = 26;
  if (has_pedestrian_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->pedestrian_type(), output);
  }

  // optional .valhalla.BicycleType bicycle_type = 27;
  if (has_bicycle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->bicycle_type(), output);
  }

  // optional .valhalla.TransitType transit_type = 28;
  if (has_transit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->transit_type(), output);
  }

  // optional uint32 begin_path_index = 29;
  if (has_begin_path_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->begin_path_index(), output);
  }

  // optional uint32 end_path_index = 30;
  if (has_end_path_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->end_path_index(), output);
  }

  // optional bool to_stay_on = 31;
  if (has_to_stay_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->to_stay_on(), output);
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  for (unsigned int i = 0, n = this->roundabout_exit_street_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->roundabout_exit_street_names(i), output);
  }

  // optional uint32 turn_degree = 33;
  if (has_turn_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->turn_degree(), output);
  }

  // optional bool has_time_restrictions = 34;
  if (has_has_time_restrictions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->has_time_restrictions(), output);
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  for (unsigned int i = 0, n = this->guidance_views_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->guidance_views(i), output);
  }

  // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
  if (has_bss_maneuver_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bss_maneuver_type(), output);
  }

  // optional string verbal_succinct_transition_instruction = 37;
  if (has_verbal_succinct_transition_instruction()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verbal_succinct_transition_instruction().data(), this->verbal_succinct_transition_instruction().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->verbal_succinct_transition_instruction(), output);
  }

  // optional .valhalla.BikeShareStationInfo bss_info = 38;
  if (this->has_bss_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, *this->bss_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.DirectionsLeg.Maneuver)
}

int DirectionsLeg_Maneuver::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg.Maneuver)
  int total_size = 0;

  // optional .valhalla.TripSign sign = 16;
  if (this->has_sign()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sign_);
  }

  // optional .valhalla.TransitRouteInfo transit_info = 22;
  if (this->has_transit_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transit_info_);
  }

  // optional .valhalla.BikeShareStationInfo bss_info = 38;
  if (this->has_bss_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bss_info_);
  }

  // repeated .valhalla.StreetName street_name = 3;
  total_size += 1 * this->street_name_size();
  for (int i = 0; i < this->street_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->street_name(i));
  }

  // repeated .valhalla.StreetName begin_street_name = 15;
  total_size += 1 * this->begin_street_name_size();
  for (int i = 0; i < this->begin_street_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->begin_street_name(i));
  }

  // repeated .valhalla.StreetName roundabout_exit_street_names = 32;
  total_size += 2 * this->roundabout_exit_street_names_size();
  for (int i = 0; i < this->roundabout_exit_street_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roundabout_exit_street_names(i));
  }

  // repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
  total_size += 2 * this->guidance_views_size();
  for (int i = 0; i < this->guidance_views_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidance_views(i));
  }

  switch (has_type_case()) {
    // optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_text_instruction_case()) {
    // optional string text_instruction = 2;
    case kTextInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_instruction());
      break;
    }
    case HAS_TEXT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_length_case()) {
    // optional float length = 4;
    case kLength: {
      total_size += 1 + 4;
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (has_time_case()) {
    // optional double time = 5;
    case kTime: {
      total_size += 1 + 8;
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_begin_cardinal_direction_case()) {
    // optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
    case kBeginCardinalDirection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->begin_cardinal_direction());
      break;
    }
    case HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET: {
      break;
    }
  }
  switch (has_begin_heading_case()) {
    // optional uint32 begin_heading = 7;
    case kBeginHeading: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_heading());
      break;
    }
    case HAS_BEGIN_HEADING_NOT_SET: {
      break;
    }
  }
  switch (has_begin_shape_index_case()) {
    // optional uint32 begin_shape_index = 8;
    case kBeginShapeIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_shape_index());
      break;
    }
    case HAS_BEGIN_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_end_shape_index_case()) {
    // optional uint32 end_shape_index = 9;
    case kEndShapeIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_shape_index());
      break;
    }
    case HAS_END_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_portions_toll_case()) {
    // optional bool portions_toll = 10;
    case kPortionsToll: {
      total_size += 1 + 1;
      break;
    }
    case HAS_PORTIONS_TOLL_NOT_SET: {
      break;
    }
  }
  switch (has_portions_unpaved_case()) {
    // optional bool portions_unpaved = 11;
    case kPortionsUnpaved: {
      total_size += 1 + 1;
      break;
    }
    case HAS_PORTIONS_UNPAVED_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_transition_alert_instruction_case()) {
    // optional string verbal_transition_alert_instruction = 12;
    case kVerbalTransitionAlertInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_transition_alert_instruction());
      break;
    }
    case HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_pre_transition_instruction_case()) {
    // optional string verbal_pre_transition_instruction = 13;
    case kVerbalPreTransitionInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_pre_transition_instruction());
      break;
    }
    case HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_post_transition_instruction_case()) {
    // optional string verbal_post_transition_instruction = 14;
    case kVerbalPostTransitionInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_post_transition_instruction());
      break;
    }
    case HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_roundabout_exit_count_case()) {
    // optional uint32 roundabout_exit_count = 17;
    case kRoundaboutExitCount: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundabout_exit_count());
      break;
    }
    case HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET: {
      break;
    }
  }
  switch (has_depart_instruction_case()) {
    // optional string depart_instruction = 18;
    case kDepartInstruction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->depart_instruction());
      break;
    }
    case HAS_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_depart_instruction_case()) {
    // optional string verbal_depart_instruction = 19;
    case kVerbalDepartInstruction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_depart_instruction());
      break;
    }
    case HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_arrive_instruction_case()) {
    // optional string arrive_instruction = 20;
    case kArriveInstruction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrive_instruction());
      break;
    }
    case HAS_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_arrive_instruction_case()) {
    // optional string verbal_arrive_instruction = 21;
    case kVerbalArriveInstruction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_arrive_instruction());
      break;
    }
    case HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_multi_cue_case()) {
    // optional bool verbal_multi_cue = 23;
    case kVerbalMultiCue: {
      total_size += 2 + 1;
      break;
    }
    case HAS_VERBAL_MULTI_CUE_NOT_SET: {
      break;
    }
  }
  switch (has_travel_mode_case()) {
    // optional .valhalla.TravelMode travel_mode = 24;
    case kTravelMode: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->travel_mode());
      break;
    }
    case HAS_TRAVEL_MODE_NOT_SET: {
      break;
    }
  }
  switch (has_vehicle_type_case()) {
    // optional .valhalla.VehicleType vehicle_type = 25;
    case kVehicleType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
      break;
    }
    case HAS_VEHICLE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_pedestrian_type_case()) {
    // optional .valhalla.PedestrianType pedestrian_type = 26;
    case kPedestrianType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pedestrian_type());
      break;
    }
    case HAS_PEDESTRIAN_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_bicycle_type_case()) {
    // optional .valhalla.BicycleType bicycle_type = 27;
    case kBicycleType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bicycle_type());
      break;
    }
    case HAS_BICYCLE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_transit_type_case()) {
    // optional .valhalla.TransitType transit_type = 28;
    case kTransitType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transit_type());
      break;
    }
    case HAS_TRANSIT_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_begin_path_index_case()) {
    // optional uint32 begin_path_index = 29;
    case kBeginPathIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_path_index());
      break;
    }
    case HAS_BEGIN_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_end_path_index_case()) {
    // optional uint32 end_path_index = 30;
    case kEndPathIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_path_index());
      break;
    }
    case HAS_END_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_to_stay_on_case()) {
    // optional bool to_stay_on = 31;
    case kToStayOn: {
      total_size += 2 + 1;
      break;
    }
    case HAS_TO_STAY_ON_NOT_SET: {
      break;
    }
  }
  switch (has_turn_degree_case()) {
    // optional uint32 turn_degree = 33;
    case kTurnDegree: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_degree());
      break;
    }
    case HAS_TURN_DEGREE_NOT_SET: {
      break;
    }
  }
  switch (has_has_time_restrictions_case()) {
    // optional bool has_time_restrictions = 34;
    case kHasTimeRestrictions: {
      total_size += 2 + 1;
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  switch (has_bss_maneuver_type_case()) {
    // optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
    case kBssManeuverType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bss_maneuver_type());
      break;
    }
    case HAS_BSS_MANEUVER_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_verbal_succinct_transition_instruction_case()) {
    // optional string verbal_succinct_transition_instruction = 37;
    case kVerbalSuccinctTransitionInstruction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_succinct_transition_instruction());
      break;
    }
    case HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsLeg_Maneuver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectionsLeg_Maneuver*>(&from));
}

void DirectionsLeg_Maneuver::MergeFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg.Maneuver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  street_name_.MergeFrom(from.street_name_);
  begin_street_name_.MergeFrom(from.begin_street_name_);
  roundabout_exit_street_names_.MergeFrom(from.roundabout_exit_street_names_);
  guidance_views_.MergeFrom(from.guidance_views_);
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_text_instruction_case()) {
    case kTextInstruction: {
      set_text_instruction(from.text_instruction());
      break;
    }
    case HAS_TEXT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_length_case()) {
    case kLength: {
      set_length(from.length());
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (from.has_time_case()) {
    case kTime: {
      set_time(from.time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_begin_cardinal_direction_case()) {
    case kBeginCardinalDirection: {
      set_begin_cardinal_direction(from.begin_cardinal_direction());
      break;
    }
    case HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_begin_heading_case()) {
    case kBeginHeading: {
      set_begin_heading(from.begin_heading());
      break;
    }
    case HAS_BEGIN_HEADING_NOT_SET: {
      break;
    }
  }
  switch (from.has_begin_shape_index_case()) {
    case kBeginShapeIndex: {
      set_begin_shape_index(from.begin_shape_index());
      break;
    }
    case HAS_BEGIN_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_end_shape_index_case()) {
    case kEndShapeIndex: {
      set_end_shape_index(from.end_shape_index());
      break;
    }
    case HAS_END_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_portions_toll_case()) {
    case kPortionsToll: {
      set_portions_toll(from.portions_toll());
      break;
    }
    case HAS_PORTIONS_TOLL_NOT_SET: {
      break;
    }
  }
  switch (from.has_portions_unpaved_case()) {
    case kPortionsUnpaved: {
      set_portions_unpaved(from.portions_unpaved());
      break;
    }
    case HAS_PORTIONS_UNPAVED_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_transition_alert_instruction_case()) {
    case kVerbalTransitionAlertInstruction: {
      set_verbal_transition_alert_instruction(from.verbal_transition_alert_instruction());
      break;
    }
    case HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_pre_transition_instruction_case()) {
    case kVerbalPreTransitionInstruction: {
      set_verbal_pre_transition_instruction(from.verbal_pre_transition_instruction());
      break;
    }
    case HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_post_transition_instruction_case()) {
    case kVerbalPostTransitionInstruction: {
      set_verbal_post_transition_instruction(from.verbal_post_transition_instruction());
      break;
    }
    case HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_roundabout_exit_count_case()) {
    case kRoundaboutExitCount: {
      set_roundabout_exit_count(from.roundabout_exit_count());
      break;
    }
    case HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET: {
      break;
    }
  }
  switch (from.has_depart_instruction_case()) {
    case kDepartInstruction: {
      set_depart_instruction(from.depart_instruction());
      break;
    }
    case HAS_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_depart_instruction_case()) {
    case kVerbalDepartInstruction: {
      set_verbal_depart_instruction(from.verbal_depart_instruction());
      break;
    }
    case HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_arrive_instruction_case()) {
    case kArriveInstruction: {
      set_arrive_instruction(from.arrive_instruction());
      break;
    }
    case HAS_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_arrive_instruction_case()) {
    case kVerbalArriveInstruction: {
      set_verbal_arrive_instruction(from.verbal_arrive_instruction());
      break;
    }
    case HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_multi_cue_case()) {
    case kVerbalMultiCue: {
      set_verbal_multi_cue(from.verbal_multi_cue());
      break;
    }
    case HAS_VERBAL_MULTI_CUE_NOT_SET: {
      break;
    }
  }
  switch (from.has_travel_mode_case()) {
    case kTravelMode: {
      set_travel_mode(from.travel_mode());
      break;
    }
    case HAS_TRAVEL_MODE_NOT_SET: {
      break;
    }
  }
  switch (from.has_vehicle_type_case()) {
    case kVehicleType: {
      set_vehicle_type(from.vehicle_type());
      break;
    }
    case HAS_VEHICLE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_pedestrian_type_case()) {
    case kPedestrianType: {
      set_pedestrian_type(from.pedestrian_type());
      break;
    }
    case HAS_PEDESTRIAN_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_bicycle_type_case()) {
    case kBicycleType: {
      set_bicycle_type(from.bicycle_type());
      break;
    }
    case HAS_BICYCLE_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_transit_type_case()) {
    case kTransitType: {
      set_transit_type(from.transit_type());
      break;
    }
    case HAS_TRANSIT_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_begin_path_index_case()) {
    case kBeginPathIndex: {
      set_begin_path_index(from.begin_path_index());
      break;
    }
    case HAS_BEGIN_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_end_path_index_case()) {
    case kEndPathIndex: {
      set_end_path_index(from.end_path_index());
      break;
    }
    case HAS_END_PATH_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_to_stay_on_case()) {
    case kToStayOn: {
      set_to_stay_on(from.to_stay_on());
      break;
    }
    case HAS_TO_STAY_ON_NOT_SET: {
      break;
    }
  }
  switch (from.has_turn_degree_case()) {
    case kTurnDegree: {
      set_turn_degree(from.turn_degree());
      break;
    }
    case HAS_TURN_DEGREE_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_time_restrictions_case()) {
    case kHasTimeRestrictions: {
      set_has_time_restrictions(from.has_time_restrictions());
      break;
    }
    case HAS_HAS_TIME_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  switch (from.has_bss_maneuver_type_case()) {
    case kBssManeuverType: {
      set_bss_maneuver_type(from.bss_maneuver_type());
      break;
    }
    case HAS_BSS_MANEUVER_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbal_succinct_transition_instruction_case()) {
    case kVerbalSuccinctTransitionInstruction: {
      set_verbal_succinct_transition_instruction(from.verbal_succinct_transition_instruction());
      break;
    }
    case HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET: {
      break;
    }
  }
  if (from.has_sign()) {
    mutable_sign()->::valhalla::TripSign::MergeFrom(from.sign());
  }
  if (from.has_transit_info()) {
    mutable_transit_info()->::valhalla::TransitRouteInfo::MergeFrom(from.transit_info());
  }
  if (from.has_bss_info()) {
    mutable_bss_info()->::valhalla::BikeShareStationInfo::MergeFrom(from.bss_info());
  }
}

void DirectionsLeg_Maneuver::CopyFrom(const DirectionsLeg_Maneuver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg.Maneuver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg_Maneuver::IsInitialized() const {

  return true;
}

void DirectionsLeg_Maneuver::Swap(DirectionsLeg_Maneuver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectionsLeg_Maneuver::InternalSwap(DirectionsLeg_Maneuver* other) {
  street_name_.UnsafeArenaSwap(&other->street_name_);
  begin_street_name_.UnsafeArenaSwap(&other->begin_street_name_);
  std::swap(sign_, other->sign_);
  std::swap(transit_info_, other->transit_info_);
  roundabout_exit_street_names_.UnsafeArenaSwap(&other->roundabout_exit_street_names_);
  guidance_views_.UnsafeArenaSwap(&other->guidance_views_);
  std::swap(bss_info_, other->bss_info_);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_text_instruction_, other->has_text_instruction_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_length_, other->has_length_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_time_, other->has_time_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_begin_cardinal_direction_, other->has_begin_cardinal_direction_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_begin_heading_, other->has_begin_heading_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_begin_shape_index_, other->has_begin_shape_index_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_end_shape_index_, other->has_end_shape_index_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_portions_toll_, other->has_portions_toll_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_portions_unpaved_, other->has_portions_unpaved_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  std::swap(has_verbal_transition_alert_instruction_, other->has_verbal_transition_alert_instruction_);
  std::swap(_oneof_case_[10], other->_oneof_case_[10]);
  std::swap(has_verbal_pre_transition_instruction_, other->has_verbal_pre_transition_instruction_);
  std::swap(_oneof_case_[11], other->_oneof_case_[11]);
  std::swap(has_verbal_post_transition_instruction_, other->has_verbal_post_transition_instruction_);
  std::swap(_oneof_case_[12], other->_oneof_case_[12]);
  std::swap(has_roundabout_exit_count_, other->has_roundabout_exit_count_);
  std::swap(_oneof_case_[13], other->_oneof_case_[13]);
  std::swap(has_depart_instruction_, other->has_depart_instruction_);
  std::swap(_oneof_case_[14], other->_oneof_case_[14]);
  std::swap(has_verbal_depart_instruction_, other->has_verbal_depart_instruction_);
  std::swap(_oneof_case_[15], other->_oneof_case_[15]);
  std::swap(has_arrive_instruction_, other->has_arrive_instruction_);
  std::swap(_oneof_case_[16], other->_oneof_case_[16]);
  std::swap(has_verbal_arrive_instruction_, other->has_verbal_arrive_instruction_);
  std::swap(_oneof_case_[17], other->_oneof_case_[17]);
  std::swap(has_verbal_multi_cue_, other->has_verbal_multi_cue_);
  std::swap(_oneof_case_[18], other->_oneof_case_[18]);
  std::swap(has_travel_mode_, other->has_travel_mode_);
  std::swap(_oneof_case_[19], other->_oneof_case_[19]);
  std::swap(has_vehicle_type_, other->has_vehicle_type_);
  std::swap(_oneof_case_[20], other->_oneof_case_[20]);
  std::swap(has_pedestrian_type_, other->has_pedestrian_type_);
  std::swap(_oneof_case_[21], other->_oneof_case_[21]);
  std::swap(has_bicycle_type_, other->has_bicycle_type_);
  std::swap(_oneof_case_[22], other->_oneof_case_[22]);
  std::swap(has_transit_type_, other->has_transit_type_);
  std::swap(_oneof_case_[23], other->_oneof_case_[23]);
  std::swap(has_begin_path_index_, other->has_begin_path_index_);
  std::swap(_oneof_case_[24], other->_oneof_case_[24]);
  std::swap(has_end_path_index_, other->has_end_path_index_);
  std::swap(_oneof_case_[25], other->_oneof_case_[25]);
  std::swap(has_to_stay_on_, other->has_to_stay_on_);
  std::swap(_oneof_case_[26], other->_oneof_case_[26]);
  std::swap(has_turn_degree_, other->has_turn_degree_);
  std::swap(_oneof_case_[27], other->_oneof_case_[27]);
  std::swap(has_has_time_restrictions_, other->has_has_time_restrictions_);
  std::swap(_oneof_case_[28], other->_oneof_case_[28]);
  std::swap(has_bss_maneuver_type_, other->has_bss_maneuver_type_);
  std::swap(_oneof_case_[29], other->_oneof_case_[29]);
  std::swap(has_verbal_succinct_transition_instruction_, other->has_verbal_succinct_transition_instruction_);
  std::swap(_oneof_case_[30], other->_oneof_case_[30]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectionsLeg_Maneuver::GetTypeName() const {
  return "valhalla.DirectionsLeg.Maneuver";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectionsLeg::kTripIdFieldNumber;
const int DirectionsLeg::kLegIdFieldNumber;
const int DirectionsLeg::kLegCountFieldNumber;
const int DirectionsLeg::kLocationFieldNumber;
const int DirectionsLeg::kSummaryFieldNumber;
const int DirectionsLeg::kManeuverFieldNumber;
const int DirectionsLeg::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectionsLeg::DirectionsLeg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.DirectionsLeg)
}

void DirectionsLeg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  summary_ = const_cast< ::valhalla::DirectionsLeg_Summary*>(
      ::valhalla::DirectionsLeg_Summary::internal_default_instance());
#else
  summary_ = const_cast< ::valhalla::DirectionsLeg_Summary*>(&::valhalla::DirectionsLeg_Summary::default_instance());
#endif
}

DirectionsLeg::DirectionsLeg(const DirectionsLeg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsLeg)
}

void DirectionsLeg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  summary_ = NULL;
  clear_has_has_trip_id();
  clear_has_has_leg_id();
  clear_has_has_leg_count();
  clear_has_has_shape();
}

DirectionsLeg::~DirectionsLeg() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsLeg)
  SharedDtor();
}

void DirectionsLeg::SharedDtor() {
  if (has_has_trip_id()) {
    clear_has_trip_id();
  }
  if (has_has_leg_id()) {
    clear_has_leg_id();
  }
  if (has_has_leg_count()) {
    clear_has_leg_count();
  }
  if (has_has_shape()) {
    clear_has_shape();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete summary_;
  }
}

void DirectionsLeg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectionsLeg& DirectionsLeg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

DirectionsLeg* DirectionsLeg::default_instance_ = NULL;

DirectionsLeg* DirectionsLeg::New(::google::protobuf::Arena* arena) const {
  DirectionsLeg* n = new DirectionsLeg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectionsLeg::clear_has_trip_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg)
  switch(has_trip_id_case()) {
    case kTripId: {
      // No need to clear
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TRIP_ID_NOT_SET;
}

void DirectionsLeg::clear_has_leg_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg)
  switch(has_leg_id_case()) {
    case kLegId: {
      // No need to clear
      break;
    }
    case HAS_LEG_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_LEG_ID_NOT_SET;
}

void DirectionsLeg::clear_has_leg_count() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg)
  switch(has_leg_count_case()) {
    case kLegCount: {
      // No need to clear
      break;
    }
    case HAS_LEG_COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_LEG_COUNT_NOT_SET;
}

void DirectionsLeg::clear_has_shape() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.DirectionsLeg)
  switch(has_shape_case()) {
    case kShape: {
      has_shape_.shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_SHAPE_NOT_SET;
}


void DirectionsLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsLeg)
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) delete summary_;
  summary_ = NULL;
  location_.Clear();
  maneuver_.Clear();
  clear_has_trip_id();
  clear_has_leg_id();
  clear_has_leg_count();
  clear_has_shape();
}

bool DirectionsLeg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.DirectionsLeg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trip_id = 1;
      case 1: {
        if (tag == 8) {
          clear_has_trip_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &has_trip_id_.trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leg_id;
        break;
      }

      // optional uint32 leg_id = 2;
      case 2: {
        if (tag == 16) {
         parse_leg_id:
          clear_has_leg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_leg_id_.leg_id_)));
          set_has_leg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_leg_count;
        break;
      }

      // optional uint32 leg_count = 3;
      case 3: {
        if (tag == 24) {
         parse_leg_count:
          clear_has_leg_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_leg_count_.leg_count_)));
          set_has_leg_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // repeated .valhalla.Location location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(input->IncrementRecursionDepth());
         parse_loop_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_location;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_summary;
        break;
      }

      // optional .valhalla.DirectionsLeg.Summary summary = 5;
      case 5: {
        if (tag == 42) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_maneuver;
        break;
      }

      // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
      case 6: {
        if (tag == 50) {
         parse_maneuver:
          DO_(input->IncrementRecursionDepth());
         parse_loop_maneuver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_maneuver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_maneuver;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_shape;
        break;
      }

      // optional string shape = 7;
      case 7: {
        if (tag == 58) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.DirectionsLeg.shape"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.DirectionsLeg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.DirectionsLeg)
  return false;
#undef DO_
}

void DirectionsLeg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.DirectionsLeg)
  // optional uint64 trip_id = 1;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trip_id(), output);
  }

  // optional uint32 leg_id = 2;
  if (has_leg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leg_id(), output);
  }

  // optional uint32 leg_count = 3;
  if (has_leg_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leg_count(), output);
  }

  // repeated .valhalla.Location location = 4;
  for (unsigned int i = 0, n = this->location_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->location(i), output);
  }

  // optional .valhalla.DirectionsLeg.Summary summary = 5;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->summary_, output);
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  for (unsigned int i = 0, n = this->maneuver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->maneuver(i), output);
  }

  // optional string shape = 7;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.DirectionsLeg.shape");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->shape(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.DirectionsLeg)
}

int DirectionsLeg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsLeg)
  int total_size = 0;

  // optional .valhalla.DirectionsLeg.Summary summary = 5;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summary_);
  }

  // repeated .valhalla.Location location = 4;
  total_size += 1 * this->location_size();
  for (int i = 0; i < this->location_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->location(i));
  }

  // repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
  total_size += 1 * this->maneuver_size();
  for (int i = 0; i < this->maneuver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maneuver(i));
  }

  switch (has_trip_id_case()) {
    // optional uint64 trip_id = 1;
    case kTripId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trip_id());
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_leg_id_case()) {
    // optional uint32 leg_id = 2;
    case kLegId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_id());
      break;
    }
    case HAS_LEG_ID_NOT_SET: {
      break;
    }
  }
  switch (has_leg_count_case()) {
    // optional uint32 leg_count = 3;
    case kLegCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_count());
      break;
    }
    case HAS_LEG_COUNT_NOT_SET: {
      break;
    }
  }
  switch (has_shape_case()) {
    // optional string shape = 7;
    case kShape: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shape());
      break;
    }
    case HAS_SHAPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsLeg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectionsLeg*>(&from));
}

void DirectionsLeg::MergeFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsLeg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  location_.MergeFrom(from.location_);
  maneuver_.MergeFrom(from.maneuver_);
  switch (from.has_trip_id_case()) {
    case kTripId: {
      set_trip_id(from.trip_id());
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_leg_id_case()) {
    case kLegId: {
      set_leg_id(from.leg_id());
      break;
    }
    case HAS_LEG_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_leg_count_case()) {
    case kLegCount: {
      set_leg_count(from.leg_count());
      break;
    }
    case HAS_LEG_COUNT_NOT_SET: {
      break;
    }
  }
  switch (from.has_shape_case()) {
    case kShape: {
      set_shape(from.shape());
      break;
    }
    case HAS_SHAPE_NOT_SET: {
      break;
    }
  }
  if (from.has_summary()) {
    mutable_summary()->::valhalla::DirectionsLeg_Summary::MergeFrom(from.summary());
  }
}

void DirectionsLeg::CopyFrom(const DirectionsLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsLeg::IsInitialized() const {

  return true;
}

void DirectionsLeg::Swap(DirectionsLeg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectionsLeg::InternalSwap(DirectionsLeg* other) {
  location_.UnsafeArenaSwap(&other->location_);
  std::swap(summary_, other->summary_);
  maneuver_.UnsafeArenaSwap(&other->maneuver_);
  std::swap(has_trip_id_, other->has_trip_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_leg_id_, other->has_leg_id_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_leg_count_, other->has_leg_count_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_shape_, other->has_shape_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectionsLeg::GetTypeName() const {
  return "valhalla.DirectionsLeg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectionsLeg_Summary

// optional float length = 1;
bool DirectionsLeg_Summary::has_length() const {
  return has_length_case() == kLength;
}
void DirectionsLeg_Summary::set_has_length() {
  _oneof_case_[0] = kLength;
}
void DirectionsLeg_Summary::clear_length() {
  if (has_length()) {
    has_length_.length_ = 0;
    clear_has_has_length();
  }
}
 float DirectionsLeg_Summary::length() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Summary.length)
  if (has_length()) {
    return has_length_.length_;
  }
  return 0;
}
 void DirectionsLeg_Summary::set_length(float value) {
  if (!has_length()) {
    clear_has_length();
    set_has_length();
  }
  has_length_.length_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Summary.length)
}

// optional double time = 2;
bool DirectionsLeg_Summary::has_time() const {
  return has_time_case() == kTime;
}
void DirectionsLeg_Summary::set_has_time() {
  _oneof_case_[1] = kTime;
}
void DirectionsLeg_Summary::clear_time() {
  if (has_time()) {
    has_time_.time_ = 0;
    clear_has_has_time();
  }
}
 double DirectionsLeg_Summary::time() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Summary.time)
  if (has_time()) {
    return has_time_.time_;
  }
  return 0;
}
 void DirectionsLeg_Summary::set_time(double value) {
  if (!has_time()) {
    clear_has_time();
    set_has_time();
  }
  has_time_.time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Summary.time)
}

// optional .valhalla.BoundingBox bbox = 3;
bool DirectionsLeg_Summary::has_bbox() const {
  return !_is_default_instance_ && bbox_ != NULL;
}
void DirectionsLeg_Summary::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
}
const ::valhalla::BoundingBox& DirectionsLeg_Summary::bbox() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Summary.bbox)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bbox_ != NULL ? *bbox_ : *default_instance().bbox_;
#else
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
#endif
}
::valhalla::BoundingBox* DirectionsLeg_Summary::mutable_bbox() {
  
  if (bbox_ == NULL) {
    bbox_ = new ::valhalla::BoundingBox;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Summary.bbox)
  return bbox_;
}
::valhalla::BoundingBox* DirectionsLeg_Summary::release_bbox() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Summary.bbox)
  
  ::valhalla::BoundingBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
void DirectionsLeg_Summary::set_allocated_bbox(::valhalla::BoundingBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Summary.bbox)
}

// optional bool has_time_restrictions = 4;
bool DirectionsLeg_Summary::has_has_time_restrictions() const {
  return has_has_time_restrictions_case() == kHasTimeRestrictions;
}
void DirectionsLeg_Summary::set_has_has_time_restrictions() {
  _oneof_case_[2] = kHasTimeRestrictions;
}
void DirectionsLeg_Summary::clear_has_time_restrictions() {
  if (has_has_time_restrictions()) {
    has_has_time_restrictions_.has_time_restrictions_ = false;
    clear_has_has_has_time_restrictions();
  }
}
 bool DirectionsLeg_Summary::has_time_restrictions() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Summary.has_time_restrictions)
  if (has_has_time_restrictions()) {
    return has_has_time_restrictions_.has_time_restrictions_;
  }
  return false;
}
 void DirectionsLeg_Summary::set_has_time_restrictions(bool value) {
  if (!has_has_time_restrictions()) {
    clear_has_has_time_restrictions();
    set_has_has_time_restrictions();
  }
  has_has_time_restrictions_.has_time_restrictions_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Summary.has_time_restrictions)
}

bool DirectionsLeg_Summary::has_has_length() const {
  return has_length_case() != HAS_LENGTH_NOT_SET;
}
void DirectionsLeg_Summary::clear_has_has_length() {
  _oneof_case_[0] = HAS_LENGTH_NOT_SET;
}
bool DirectionsLeg_Summary::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
void DirectionsLeg_Summary::clear_has_has_time() {
  _oneof_case_[1] = HAS_TIME_NOT_SET;
}
bool DirectionsLeg_Summary::has_has_has_time_restrictions() const {
  return has_has_time_restrictions_case() != HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}
void DirectionsLeg_Summary::clear_has_has_has_time_restrictions() {
  _oneof_case_[2] = HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}
DirectionsLeg_Summary::HasLengthCase DirectionsLeg_Summary::has_length_case() const {
  return DirectionsLeg_Summary::HasLengthCase(_oneof_case_[0]);
}
DirectionsLeg_Summary::HasTimeCase DirectionsLeg_Summary::has_time_case() const {
  return DirectionsLeg_Summary::HasTimeCase(_oneof_case_[1]);
}
DirectionsLeg_Summary::HasHasTimeRestrictionsCase DirectionsLeg_Summary::has_has_time_restrictions_case() const {
  return DirectionsLeg_Summary::HasHasTimeRestrictionsCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// DirectionsLeg_GuidanceView

// optional string data_id = 1;
bool DirectionsLeg_GuidanceView::has_data_id() const {
  return has_data_id_case() == kDataId;
}
void DirectionsLeg_GuidanceView::set_has_data_id() {
  _oneof_case_[0] = kDataId;
}
void DirectionsLeg_GuidanceView::clear_data_id() {
  if (has_data_id()) {
    has_data_id_.data_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_data_id();
  }
}
 const ::std::string& DirectionsLeg_GuidanceView::data_id() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.GuidanceView.data_id)
  if (has_data_id()) {
    return has_data_id_.data_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_GuidanceView::set_data_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.data_id)
  if (!has_data_id()) {
    clear_has_data_id();
    set_has_data_id();
    has_data_id_.data_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_data_id_.data_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.data_id)
}
 void DirectionsLeg_GuidanceView::set_data_id(const char* value) {
  if (!has_data_id()) {
    clear_has_data_id();
    set_has_data_id();
    has_data_id_.data_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_data_id_.data_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.GuidanceView.data_id)
}
 void DirectionsLeg_GuidanceView::set_data_id(const char* value, size_t size) {
  if (!has_data_id()) {
    clear_has_data_id();
    set_has_data_id();
    has_data_id_.data_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_data_id_.data_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.GuidanceView.data_id)
}
 ::std::string* DirectionsLeg_GuidanceView::mutable_data_id() {
  if (!has_data_id()) {
    clear_has_data_id();
    set_has_data_id();
    has_data_id_.data_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.GuidanceView.data_id)
  return has_data_id_.data_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_GuidanceView::release_data_id() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.GuidanceView.data_id)
  if (has_data_id()) {
    clear_has_has_data_id();
    return has_data_id_.data_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_GuidanceView::set_allocated_data_id(::std::string* data_id) {
  if (!has_data_id()) {
    has_data_id_.data_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_data_id();
  if (data_id != NULL) {
    set_has_data_id();
    has_data_id_.data_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.GuidanceView.data_id)
}

// optional .valhalla.DirectionsLeg.GuidanceView.Type type = 2;
bool DirectionsLeg_GuidanceView::has_type() const {
  return has_type_case() == kType;
}
void DirectionsLeg_GuidanceView::set_has_type() {
  _oneof_case_[1] = kType;
}
void DirectionsLeg_GuidanceView::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::DirectionsLeg_GuidanceView_Type DirectionsLeg_GuidanceView::type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.GuidanceView.type)
  if (has_type()) {
    return static_cast< ::valhalla::DirectionsLeg_GuidanceView_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::DirectionsLeg_GuidanceView_Type >(0);
}
 void DirectionsLeg_GuidanceView::set_type(::valhalla::DirectionsLeg_GuidanceView_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.type)
}

// optional string base_id = 3;
bool DirectionsLeg_GuidanceView::has_base_id() const {
  return has_base_id_case() == kBaseId;
}
void DirectionsLeg_GuidanceView::set_has_base_id() {
  _oneof_case_[2] = kBaseId;
}
void DirectionsLeg_GuidanceView::clear_base_id() {
  if (has_base_id()) {
    has_base_id_.base_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_base_id();
  }
}
 const ::std::string& DirectionsLeg_GuidanceView::base_id() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.GuidanceView.base_id)
  if (has_base_id()) {
    return has_base_id_.base_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_GuidanceView::set_base_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.base_id)
  if (!has_base_id()) {
    clear_has_base_id();
    set_has_base_id();
    has_base_id_.base_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_base_id_.base_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.base_id)
}
 void DirectionsLeg_GuidanceView::set_base_id(const char* value) {
  if (!has_base_id()) {
    clear_has_base_id();
    set_has_base_id();
    has_base_id_.base_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_base_id_.base_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.GuidanceView.base_id)
}
 void DirectionsLeg_GuidanceView::set_base_id(const char* value, size_t size) {
  if (!has_base_id()) {
    clear_has_base_id();
    set_has_base_id();
    has_base_id_.base_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_base_id_.base_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.GuidanceView.base_id)
}
 ::std::string* DirectionsLeg_GuidanceView::mutable_base_id() {
  if (!has_base_id()) {
    clear_has_base_id();
    set_has_base_id();
    has_base_id_.base_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.GuidanceView.base_id)
  return has_base_id_.base_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_GuidanceView::release_base_id() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.GuidanceView.base_id)
  if (has_base_id()) {
    clear_has_has_base_id();
    return has_base_id_.base_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_GuidanceView::set_allocated_base_id(::std::string* base_id) {
  if (!has_base_id()) {
    has_base_id_.base_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_base_id();
  if (base_id != NULL) {
    set_has_base_id();
    has_base_id_.base_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        base_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.GuidanceView.base_id)
}

// repeated string overlay_ids = 4;
int DirectionsLeg_GuidanceView::overlay_ids_size() const {
  return overlay_ids_.size();
}
void DirectionsLeg_GuidanceView::clear_overlay_ids() {
  overlay_ids_.Clear();
}
 const ::std::string& DirectionsLeg_GuidanceView::overlay_ids(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  return overlay_ids_.Get(index);
}
 ::std::string* DirectionsLeg_GuidanceView::mutable_overlay_ids(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  return overlay_ids_.Mutable(index);
}
 void DirectionsLeg_GuidanceView::set_overlay_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  overlay_ids_.Mutable(index)->assign(value);
}
 void DirectionsLeg_GuidanceView::set_overlay_ids(int index, const char* value) {
  overlay_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
}
 void DirectionsLeg_GuidanceView::set_overlay_ids(int index, const char* value, size_t size) {
  overlay_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
}
 ::std::string* DirectionsLeg_GuidanceView::add_overlay_ids() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  return overlay_ids_.Add();
}
 void DirectionsLeg_GuidanceView::add_overlay_ids(const ::std::string& value) {
  overlay_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
}
 void DirectionsLeg_GuidanceView::add_overlay_ids(const char* value) {
  overlay_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
}
 void DirectionsLeg_GuidanceView::add_overlay_ids(const char* value, size_t size) {
  overlay_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DirectionsLeg_GuidanceView::overlay_ids() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  return overlay_ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DirectionsLeg_GuidanceView::mutable_overlay_ids() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.GuidanceView.overlay_ids)
  return &overlay_ids_;
}

bool DirectionsLeg_GuidanceView::has_has_data_id() const {
  return has_data_id_case() != HAS_DATA_ID_NOT_SET;
}
void DirectionsLeg_GuidanceView::clear_has_has_data_id() {
  _oneof_case_[0] = HAS_DATA_ID_NOT_SET;
}
bool DirectionsLeg_GuidanceView::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void DirectionsLeg_GuidanceView::clear_has_has_type() {
  _oneof_case_[1] = HAS_TYPE_NOT_SET;
}
bool DirectionsLeg_GuidanceView::has_has_base_id() const {
  return has_base_id_case() != HAS_BASE_ID_NOT_SET;
}
void DirectionsLeg_GuidanceView::clear_has_has_base_id() {
  _oneof_case_[2] = HAS_BASE_ID_NOT_SET;
}
DirectionsLeg_GuidanceView::HasDataIdCase DirectionsLeg_GuidanceView::has_data_id_case() const {
  return DirectionsLeg_GuidanceView::HasDataIdCase(_oneof_case_[0]);
}
DirectionsLeg_GuidanceView::HasTypeCase DirectionsLeg_GuidanceView::has_type_case() const {
  return DirectionsLeg_GuidanceView::HasTypeCase(_oneof_case_[1]);
}
DirectionsLeg_GuidanceView::HasBaseIdCase DirectionsLeg_GuidanceView::has_base_id_case() const {
  return DirectionsLeg_GuidanceView::HasBaseIdCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// DirectionsLeg_Maneuver

// optional .valhalla.DirectionsLeg.Maneuver.Type type = 1;
bool DirectionsLeg_Maneuver::has_type() const {
  return has_type_case() == kType;
}
void DirectionsLeg_Maneuver::set_has_type() {
  _oneof_case_[0] = kType;
}
void DirectionsLeg_Maneuver::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::DirectionsLeg_Maneuver_Type DirectionsLeg_Maneuver::type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.type)
  if (has_type()) {
    return static_cast< ::valhalla::DirectionsLeg_Maneuver_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::DirectionsLeg_Maneuver_Type >(0);
}
 void DirectionsLeg_Maneuver::set_type(::valhalla::DirectionsLeg_Maneuver_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.type)
}

// optional string text_instruction = 2;
bool DirectionsLeg_Maneuver::has_text_instruction() const {
  return has_text_instruction_case() == kTextInstruction;
}
void DirectionsLeg_Maneuver::set_has_text_instruction() {
  _oneof_case_[1] = kTextInstruction;
}
void DirectionsLeg_Maneuver::clear_text_instruction() {
  if (has_text_instruction()) {
    has_text_instruction_.text_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_text_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::text_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.text_instruction)
  if (has_text_instruction()) {
    return has_text_instruction_.text_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_text_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.text_instruction)
  if (!has_text_instruction()) {
    clear_has_text_instruction();
    set_has_text_instruction();
    has_text_instruction_.text_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_instruction_.text_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.text_instruction)
}
 void DirectionsLeg_Maneuver::set_text_instruction(const char* value) {
  if (!has_text_instruction()) {
    clear_has_text_instruction();
    set_has_text_instruction();
    has_text_instruction_.text_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_instruction_.text_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.text_instruction)
}
 void DirectionsLeg_Maneuver::set_text_instruction(const char* value, size_t size) {
  if (!has_text_instruction()) {
    clear_has_text_instruction();
    set_has_text_instruction();
    has_text_instruction_.text_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_instruction_.text_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.text_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_text_instruction() {
  if (!has_text_instruction()) {
    clear_has_text_instruction();
    set_has_text_instruction();
    has_text_instruction_.text_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.text_instruction)
  return has_text_instruction_.text_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_text_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.text_instruction)
  if (has_text_instruction()) {
    clear_has_has_text_instruction();
    return has_text_instruction_.text_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_text_instruction(::std::string* text_instruction) {
  if (!has_text_instruction()) {
    has_text_instruction_.text_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_text_instruction();
  if (text_instruction != NULL) {
    set_has_text_instruction();
    has_text_instruction_.text_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.text_instruction)
}

// repeated .valhalla.StreetName street_name = 3;
int DirectionsLeg_Maneuver::street_name_size() const {
  return street_name_.size();
}
void DirectionsLeg_Maneuver::clear_street_name() {
  street_name_.Clear();
}
const ::valhalla::StreetName& DirectionsLeg_Maneuver::street_name(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.street_name)
  return street_name_.Get(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::mutable_street_name(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.street_name)
  return street_name_.Mutable(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::add_street_name() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.Maneuver.street_name)
  return street_name_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >*
DirectionsLeg_Maneuver::mutable_street_name() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.Maneuver.street_name)
  return &street_name_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >&
DirectionsLeg_Maneuver::street_name() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.Maneuver.street_name)
  return street_name_;
}

// optional float length = 4;
bool DirectionsLeg_Maneuver::has_length() const {
  return has_length_case() == kLength;
}
void DirectionsLeg_Maneuver::set_has_length() {
  _oneof_case_[2] = kLength;
}
void DirectionsLeg_Maneuver::clear_length() {
  if (has_length()) {
    has_length_.length_ = 0;
    clear_has_has_length();
  }
}
 float DirectionsLeg_Maneuver::length() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.length)
  if (has_length()) {
    return has_length_.length_;
  }
  return 0;
}
 void DirectionsLeg_Maneuver::set_length(float value) {
  if (!has_length()) {
    clear_has_length();
    set_has_length();
  }
  has_length_.length_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.length)
}

// optional double time = 5;
bool DirectionsLeg_Maneuver::has_time() const {
  return has_time_case() == kTime;
}
void DirectionsLeg_Maneuver::set_has_time() {
  _oneof_case_[3] = kTime;
}
void DirectionsLeg_Maneuver::clear_time() {
  if (has_time()) {
    has_time_.time_ = 0;
    clear_has_has_time();
  }
}
 double DirectionsLeg_Maneuver::time() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.time)
  if (has_time()) {
    return has_time_.time_;
  }
  return 0;
}
 void DirectionsLeg_Maneuver::set_time(double value) {
  if (!has_time()) {
    clear_has_time();
    set_has_time();
  }
  has_time_.time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.time)
}

// optional .valhalla.DirectionsLeg.Maneuver.CardinalDirection begin_cardinal_direction = 6;
bool DirectionsLeg_Maneuver::has_begin_cardinal_direction() const {
  return has_begin_cardinal_direction_case() == kBeginCardinalDirection;
}
void DirectionsLeg_Maneuver::set_has_begin_cardinal_direction() {
  _oneof_case_[4] = kBeginCardinalDirection;
}
void DirectionsLeg_Maneuver::clear_begin_cardinal_direction() {
  if (has_begin_cardinal_direction()) {
    has_begin_cardinal_direction_.begin_cardinal_direction_ = 0;
    clear_has_has_begin_cardinal_direction();
  }
}
 ::valhalla::DirectionsLeg_Maneuver_CardinalDirection DirectionsLeg_Maneuver::begin_cardinal_direction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.begin_cardinal_direction)
  if (has_begin_cardinal_direction()) {
    return static_cast< ::valhalla::DirectionsLeg_Maneuver_CardinalDirection >(has_begin_cardinal_direction_.begin_cardinal_direction_);
  }
  return static_cast< ::valhalla::DirectionsLeg_Maneuver_CardinalDirection >(0);
}
 void DirectionsLeg_Maneuver::set_begin_cardinal_direction(::valhalla::DirectionsLeg_Maneuver_CardinalDirection value) {
  if (!has_begin_cardinal_direction()) {
    clear_has_begin_cardinal_direction();
    set_has_begin_cardinal_direction();
  }
  has_begin_cardinal_direction_.begin_cardinal_direction_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.begin_cardinal_direction)
}

// optional uint32 begin_heading = 7;
bool DirectionsLeg_Maneuver::has_begin_heading() const {
  return has_begin_heading_case() == kBeginHeading;
}
void DirectionsLeg_Maneuver::set_has_begin_heading() {
  _oneof_case_[5] = kBeginHeading;
}
void DirectionsLeg_Maneuver::clear_begin_heading() {
  if (has_begin_heading()) {
    has_begin_heading_.begin_heading_ = 0u;
    clear_has_has_begin_heading();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::begin_heading() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.begin_heading)
  if (has_begin_heading()) {
    return has_begin_heading_.begin_heading_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_begin_heading(::google::protobuf::uint32 value) {
  if (!has_begin_heading()) {
    clear_has_begin_heading();
    set_has_begin_heading();
  }
  has_begin_heading_.begin_heading_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.begin_heading)
}

// optional uint32 begin_shape_index = 8;
bool DirectionsLeg_Maneuver::has_begin_shape_index() const {
  return has_begin_shape_index_case() == kBeginShapeIndex;
}
void DirectionsLeg_Maneuver::set_has_begin_shape_index() {
  _oneof_case_[6] = kBeginShapeIndex;
}
void DirectionsLeg_Maneuver::clear_begin_shape_index() {
  if (has_begin_shape_index()) {
    has_begin_shape_index_.begin_shape_index_ = 0u;
    clear_has_has_begin_shape_index();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::begin_shape_index() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.begin_shape_index)
  if (has_begin_shape_index()) {
    return has_begin_shape_index_.begin_shape_index_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_begin_shape_index(::google::protobuf::uint32 value) {
  if (!has_begin_shape_index()) {
    clear_has_begin_shape_index();
    set_has_begin_shape_index();
  }
  has_begin_shape_index_.begin_shape_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.begin_shape_index)
}

// optional uint32 end_shape_index = 9;
bool DirectionsLeg_Maneuver::has_end_shape_index() const {
  return has_end_shape_index_case() == kEndShapeIndex;
}
void DirectionsLeg_Maneuver::set_has_end_shape_index() {
  _oneof_case_[7] = kEndShapeIndex;
}
void DirectionsLeg_Maneuver::clear_end_shape_index() {
  if (has_end_shape_index()) {
    has_end_shape_index_.end_shape_index_ = 0u;
    clear_has_has_end_shape_index();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::end_shape_index() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.end_shape_index)
  if (has_end_shape_index()) {
    return has_end_shape_index_.end_shape_index_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_end_shape_index(::google::protobuf::uint32 value) {
  if (!has_end_shape_index()) {
    clear_has_end_shape_index();
    set_has_end_shape_index();
  }
  has_end_shape_index_.end_shape_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.end_shape_index)
}

// optional bool portions_toll = 10;
bool DirectionsLeg_Maneuver::has_portions_toll() const {
  return has_portions_toll_case() == kPortionsToll;
}
void DirectionsLeg_Maneuver::set_has_portions_toll() {
  _oneof_case_[8] = kPortionsToll;
}
void DirectionsLeg_Maneuver::clear_portions_toll() {
  if (has_portions_toll()) {
    has_portions_toll_.portions_toll_ = false;
    clear_has_has_portions_toll();
  }
}
 bool DirectionsLeg_Maneuver::portions_toll() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.portions_toll)
  if (has_portions_toll()) {
    return has_portions_toll_.portions_toll_;
  }
  return false;
}
 void DirectionsLeg_Maneuver::set_portions_toll(bool value) {
  if (!has_portions_toll()) {
    clear_has_portions_toll();
    set_has_portions_toll();
  }
  has_portions_toll_.portions_toll_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.portions_toll)
}

// optional bool portions_unpaved = 11;
bool DirectionsLeg_Maneuver::has_portions_unpaved() const {
  return has_portions_unpaved_case() == kPortionsUnpaved;
}
void DirectionsLeg_Maneuver::set_has_portions_unpaved() {
  _oneof_case_[9] = kPortionsUnpaved;
}
void DirectionsLeg_Maneuver::clear_portions_unpaved() {
  if (has_portions_unpaved()) {
    has_portions_unpaved_.portions_unpaved_ = false;
    clear_has_has_portions_unpaved();
  }
}
 bool DirectionsLeg_Maneuver::portions_unpaved() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.portions_unpaved)
  if (has_portions_unpaved()) {
    return has_portions_unpaved_.portions_unpaved_;
  }
  return false;
}
 void DirectionsLeg_Maneuver::set_portions_unpaved(bool value) {
  if (!has_portions_unpaved()) {
    clear_has_portions_unpaved();
    set_has_portions_unpaved();
  }
  has_portions_unpaved_.portions_unpaved_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.portions_unpaved)
}

// optional string verbal_transition_alert_instruction = 12;
bool DirectionsLeg_Maneuver::has_verbal_transition_alert_instruction() const {
  return has_verbal_transition_alert_instruction_case() == kVerbalTransitionAlertInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_transition_alert_instruction() {
  _oneof_case_[10] = kVerbalTransitionAlertInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_transition_alert_instruction() {
  if (has_verbal_transition_alert_instruction()) {
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_transition_alert_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_transition_alert_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
  if (has_verbal_transition_alert_instruction()) {
    return has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_transition_alert_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
  if (!has_verbal_transition_alert_instruction()) {
    clear_has_verbal_transition_alert_instruction();
    set_has_verbal_transition_alert_instruction();
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_transition_alert_instruction(const char* value) {
  if (!has_verbal_transition_alert_instruction()) {
    clear_has_verbal_transition_alert_instruction();
    set_has_verbal_transition_alert_instruction();
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_transition_alert_instruction(const char* value, size_t size) {
  if (!has_verbal_transition_alert_instruction()) {
    clear_has_verbal_transition_alert_instruction();
    set_has_verbal_transition_alert_instruction();
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_transition_alert_instruction() {
  if (!has_verbal_transition_alert_instruction()) {
    clear_has_verbal_transition_alert_instruction();
    set_has_verbal_transition_alert_instruction();
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
  return has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_transition_alert_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
  if (has_verbal_transition_alert_instruction()) {
    clear_has_has_verbal_transition_alert_instruction();
    return has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_transition_alert_instruction(::std::string* verbal_transition_alert_instruction) {
  if (!has_verbal_transition_alert_instruction()) {
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_transition_alert_instruction();
  if (verbal_transition_alert_instruction != NULL) {
    set_has_verbal_transition_alert_instruction();
    has_verbal_transition_alert_instruction_.verbal_transition_alert_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_transition_alert_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_transition_alert_instruction)
}

// optional string verbal_pre_transition_instruction = 13;
bool DirectionsLeg_Maneuver::has_verbal_pre_transition_instruction() const {
  return has_verbal_pre_transition_instruction_case() == kVerbalPreTransitionInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_pre_transition_instruction() {
  _oneof_case_[11] = kVerbalPreTransitionInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_pre_transition_instruction() {
  if (has_verbal_pre_transition_instruction()) {
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_pre_transition_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_pre_transition_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
  if (has_verbal_pre_transition_instruction()) {
    return has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_pre_transition_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
  if (!has_verbal_pre_transition_instruction()) {
    clear_has_verbal_pre_transition_instruction();
    set_has_verbal_pre_transition_instruction();
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_pre_transition_instruction(const char* value) {
  if (!has_verbal_pre_transition_instruction()) {
    clear_has_verbal_pre_transition_instruction();
    set_has_verbal_pre_transition_instruction();
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_pre_transition_instruction(const char* value, size_t size) {
  if (!has_verbal_pre_transition_instruction()) {
    clear_has_verbal_pre_transition_instruction();
    set_has_verbal_pre_transition_instruction();
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_pre_transition_instruction() {
  if (!has_verbal_pre_transition_instruction()) {
    clear_has_verbal_pre_transition_instruction();
    set_has_verbal_pre_transition_instruction();
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
  return has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_pre_transition_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
  if (has_verbal_pre_transition_instruction()) {
    clear_has_has_verbal_pre_transition_instruction();
    return has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_pre_transition_instruction(::std::string* verbal_pre_transition_instruction) {
  if (!has_verbal_pre_transition_instruction()) {
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_pre_transition_instruction();
  if (verbal_pre_transition_instruction != NULL) {
    set_has_verbal_pre_transition_instruction();
    has_verbal_pre_transition_instruction_.verbal_pre_transition_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_pre_transition_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_pre_transition_instruction)
}

// optional string verbal_post_transition_instruction = 14;
bool DirectionsLeg_Maneuver::has_verbal_post_transition_instruction() const {
  return has_verbal_post_transition_instruction_case() == kVerbalPostTransitionInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_post_transition_instruction() {
  _oneof_case_[12] = kVerbalPostTransitionInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_post_transition_instruction() {
  if (has_verbal_post_transition_instruction()) {
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_post_transition_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_post_transition_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
  if (has_verbal_post_transition_instruction()) {
    return has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_post_transition_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
  if (!has_verbal_post_transition_instruction()) {
    clear_has_verbal_post_transition_instruction();
    set_has_verbal_post_transition_instruction();
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_post_transition_instruction(const char* value) {
  if (!has_verbal_post_transition_instruction()) {
    clear_has_verbal_post_transition_instruction();
    set_has_verbal_post_transition_instruction();
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_post_transition_instruction(const char* value, size_t size) {
  if (!has_verbal_post_transition_instruction()) {
    clear_has_verbal_post_transition_instruction();
    set_has_verbal_post_transition_instruction();
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_post_transition_instruction() {
  if (!has_verbal_post_transition_instruction()) {
    clear_has_verbal_post_transition_instruction();
    set_has_verbal_post_transition_instruction();
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
  return has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_post_transition_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
  if (has_verbal_post_transition_instruction()) {
    clear_has_has_verbal_post_transition_instruction();
    return has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_post_transition_instruction(::std::string* verbal_post_transition_instruction) {
  if (!has_verbal_post_transition_instruction()) {
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_post_transition_instruction();
  if (verbal_post_transition_instruction != NULL) {
    set_has_verbal_post_transition_instruction();
    has_verbal_post_transition_instruction_.verbal_post_transition_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_post_transition_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_post_transition_instruction)
}

// repeated .valhalla.StreetName begin_street_name = 15;
int DirectionsLeg_Maneuver::begin_street_name_size() const {
  return begin_street_name_.size();
}
void DirectionsLeg_Maneuver::clear_begin_street_name() {
  begin_street_name_.Clear();
}
const ::valhalla::StreetName& DirectionsLeg_Maneuver::begin_street_name(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.begin_street_name)
  return begin_street_name_.Get(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::mutable_begin_street_name(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.begin_street_name)
  return begin_street_name_.Mutable(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::add_begin_street_name() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.Maneuver.begin_street_name)
  return begin_street_name_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >*
DirectionsLeg_Maneuver::mutable_begin_street_name() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.Maneuver.begin_street_name)
  return &begin_street_name_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >&
DirectionsLeg_Maneuver::begin_street_name() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.Maneuver.begin_street_name)
  return begin_street_name_;
}

// optional .valhalla.TripSign sign = 16;
bool DirectionsLeg_Maneuver::has_sign() const {
  return !_is_default_instance_ && sign_ != NULL;
}
void DirectionsLeg_Maneuver::clear_sign() {
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) delete sign_;
  sign_ = NULL;
}
const ::valhalla::TripSign& DirectionsLeg_Maneuver::sign() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.sign)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sign_ != NULL ? *sign_ : *default_instance().sign_;
#else
  return sign_ != NULL ? *sign_ : *default_instance_->sign_;
#endif
}
::valhalla::TripSign* DirectionsLeg_Maneuver::mutable_sign() {
  
  if (sign_ == NULL) {
    sign_ = new ::valhalla::TripSign;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.sign)
  return sign_;
}
::valhalla::TripSign* DirectionsLeg_Maneuver::release_sign() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.sign)
  
  ::valhalla::TripSign* temp = sign_;
  sign_ = NULL;
  return temp;
}
void DirectionsLeg_Maneuver::set_allocated_sign(::valhalla::TripSign* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.sign)
}

// optional uint32 roundabout_exit_count = 17;
bool DirectionsLeg_Maneuver::has_roundabout_exit_count() const {
  return has_roundabout_exit_count_case() == kRoundaboutExitCount;
}
void DirectionsLeg_Maneuver::set_has_roundabout_exit_count() {
  _oneof_case_[13] = kRoundaboutExitCount;
}
void DirectionsLeg_Maneuver::clear_roundabout_exit_count() {
  if (has_roundabout_exit_count()) {
    has_roundabout_exit_count_.roundabout_exit_count_ = 0u;
    clear_has_has_roundabout_exit_count();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::roundabout_exit_count() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.roundabout_exit_count)
  if (has_roundabout_exit_count()) {
    return has_roundabout_exit_count_.roundabout_exit_count_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_roundabout_exit_count(::google::protobuf::uint32 value) {
  if (!has_roundabout_exit_count()) {
    clear_has_roundabout_exit_count();
    set_has_roundabout_exit_count();
  }
  has_roundabout_exit_count_.roundabout_exit_count_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.roundabout_exit_count)
}

// optional string depart_instruction = 18;
bool DirectionsLeg_Maneuver::has_depart_instruction() const {
  return has_depart_instruction_case() == kDepartInstruction;
}
void DirectionsLeg_Maneuver::set_has_depart_instruction() {
  _oneof_case_[14] = kDepartInstruction;
}
void DirectionsLeg_Maneuver::clear_depart_instruction() {
  if (has_depart_instruction()) {
    has_depart_instruction_.depart_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_depart_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::depart_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.depart_instruction)
  if (has_depart_instruction()) {
    return has_depart_instruction_.depart_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_depart_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.depart_instruction)
  if (!has_depart_instruction()) {
    clear_has_depart_instruction();
    set_has_depart_instruction();
    has_depart_instruction_.depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_depart_instruction_.depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.depart_instruction)
}
 void DirectionsLeg_Maneuver::set_depart_instruction(const char* value) {
  if (!has_depart_instruction()) {
    clear_has_depart_instruction();
    set_has_depart_instruction();
    has_depart_instruction_.depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_depart_instruction_.depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.depart_instruction)
}
 void DirectionsLeg_Maneuver::set_depart_instruction(const char* value, size_t size) {
  if (!has_depart_instruction()) {
    clear_has_depart_instruction();
    set_has_depart_instruction();
    has_depart_instruction_.depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_depart_instruction_.depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.depart_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_depart_instruction() {
  if (!has_depart_instruction()) {
    clear_has_depart_instruction();
    set_has_depart_instruction();
    has_depart_instruction_.depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.depart_instruction)
  return has_depart_instruction_.depart_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_depart_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.depart_instruction)
  if (has_depart_instruction()) {
    clear_has_has_depart_instruction();
    return has_depart_instruction_.depart_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_depart_instruction(::std::string* depart_instruction) {
  if (!has_depart_instruction()) {
    has_depart_instruction_.depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_depart_instruction();
  if (depart_instruction != NULL) {
    set_has_depart_instruction();
    has_depart_instruction_.depart_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        depart_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.depart_instruction)
}

// optional string verbal_depart_instruction = 19;
bool DirectionsLeg_Maneuver::has_verbal_depart_instruction() const {
  return has_verbal_depart_instruction_case() == kVerbalDepartInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_depart_instruction() {
  _oneof_case_[15] = kVerbalDepartInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_depart_instruction() {
  if (has_verbal_depart_instruction()) {
    has_verbal_depart_instruction_.verbal_depart_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_depart_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_depart_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
  if (has_verbal_depart_instruction()) {
    return has_verbal_depart_instruction_.verbal_depart_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_depart_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
  if (!has_verbal_depart_instruction()) {
    clear_has_verbal_depart_instruction();
    set_has_verbal_depart_instruction();
    has_verbal_depart_instruction_.verbal_depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_depart_instruction_.verbal_depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_depart_instruction(const char* value) {
  if (!has_verbal_depart_instruction()) {
    clear_has_verbal_depart_instruction();
    set_has_verbal_depart_instruction();
    has_verbal_depart_instruction_.verbal_depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_depart_instruction_.verbal_depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_depart_instruction(const char* value, size_t size) {
  if (!has_verbal_depart_instruction()) {
    clear_has_verbal_depart_instruction();
    set_has_verbal_depart_instruction();
    has_verbal_depart_instruction_.verbal_depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_depart_instruction_.verbal_depart_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_depart_instruction() {
  if (!has_verbal_depart_instruction()) {
    clear_has_verbal_depart_instruction();
    set_has_verbal_depart_instruction();
    has_verbal_depart_instruction_.verbal_depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
  return has_verbal_depart_instruction_.verbal_depart_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_depart_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
  if (has_verbal_depart_instruction()) {
    clear_has_has_verbal_depart_instruction();
    return has_verbal_depart_instruction_.verbal_depart_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_depart_instruction(::std::string* verbal_depart_instruction) {
  if (!has_verbal_depart_instruction()) {
    has_verbal_depart_instruction_.verbal_depart_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_depart_instruction();
  if (verbal_depart_instruction != NULL) {
    set_has_verbal_depart_instruction();
    has_verbal_depart_instruction_.verbal_depart_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_depart_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_depart_instruction)
}

// optional string arrive_instruction = 20;
bool DirectionsLeg_Maneuver::has_arrive_instruction() const {
  return has_arrive_instruction_case() == kArriveInstruction;
}
void DirectionsLeg_Maneuver::set_has_arrive_instruction() {
  _oneof_case_[16] = kArriveInstruction;
}
void DirectionsLeg_Maneuver::clear_arrive_instruction() {
  if (has_arrive_instruction()) {
    has_arrive_instruction_.arrive_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_arrive_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::arrive_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
  if (has_arrive_instruction()) {
    return has_arrive_instruction_.arrive_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_arrive_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
  if (!has_arrive_instruction()) {
    clear_has_arrive_instruction();
    set_has_arrive_instruction();
    has_arrive_instruction_.arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrive_instruction_.arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
}
 void DirectionsLeg_Maneuver::set_arrive_instruction(const char* value) {
  if (!has_arrive_instruction()) {
    clear_has_arrive_instruction();
    set_has_arrive_instruction();
    has_arrive_instruction_.arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrive_instruction_.arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
}
 void DirectionsLeg_Maneuver::set_arrive_instruction(const char* value, size_t size) {
  if (!has_arrive_instruction()) {
    clear_has_arrive_instruction();
    set_has_arrive_instruction();
    has_arrive_instruction_.arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrive_instruction_.arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_arrive_instruction() {
  if (!has_arrive_instruction()) {
    clear_has_arrive_instruction();
    set_has_arrive_instruction();
    has_arrive_instruction_.arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
  return has_arrive_instruction_.arrive_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_arrive_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
  if (has_arrive_instruction()) {
    clear_has_has_arrive_instruction();
    return has_arrive_instruction_.arrive_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_arrive_instruction(::std::string* arrive_instruction) {
  if (!has_arrive_instruction()) {
    has_arrive_instruction_.arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_arrive_instruction();
  if (arrive_instruction != NULL) {
    set_has_arrive_instruction();
    has_arrive_instruction_.arrive_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        arrive_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.arrive_instruction)
}

// optional string verbal_arrive_instruction = 21;
bool DirectionsLeg_Maneuver::has_verbal_arrive_instruction() const {
  return has_verbal_arrive_instruction_case() == kVerbalArriveInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_arrive_instruction() {
  _oneof_case_[17] = kVerbalArriveInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_arrive_instruction() {
  if (has_verbal_arrive_instruction()) {
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_arrive_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_arrive_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
  if (has_verbal_arrive_instruction()) {
    return has_verbal_arrive_instruction_.verbal_arrive_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_arrive_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
  if (!has_verbal_arrive_instruction()) {
    clear_has_verbal_arrive_instruction();
    set_has_verbal_arrive_instruction();
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_arrive_instruction_.verbal_arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_arrive_instruction(const char* value) {
  if (!has_verbal_arrive_instruction()) {
    clear_has_verbal_arrive_instruction();
    set_has_verbal_arrive_instruction();
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_arrive_instruction_.verbal_arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_arrive_instruction(const char* value, size_t size) {
  if (!has_verbal_arrive_instruction()) {
    clear_has_verbal_arrive_instruction();
    set_has_verbal_arrive_instruction();
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_arrive_instruction_.verbal_arrive_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_arrive_instruction() {
  if (!has_verbal_arrive_instruction()) {
    clear_has_verbal_arrive_instruction();
    set_has_verbal_arrive_instruction();
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
  return has_verbal_arrive_instruction_.verbal_arrive_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_arrive_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
  if (has_verbal_arrive_instruction()) {
    clear_has_has_verbal_arrive_instruction();
    return has_verbal_arrive_instruction_.verbal_arrive_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_arrive_instruction(::std::string* verbal_arrive_instruction) {
  if (!has_verbal_arrive_instruction()) {
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_arrive_instruction();
  if (verbal_arrive_instruction != NULL) {
    set_has_verbal_arrive_instruction();
    has_verbal_arrive_instruction_.verbal_arrive_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_arrive_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_arrive_instruction)
}

// optional .valhalla.TransitRouteInfo transit_info = 22;
bool DirectionsLeg_Maneuver::has_transit_info() const {
  return !_is_default_instance_ && transit_info_ != NULL;
}
void DirectionsLeg_Maneuver::clear_transit_info() {
  if (GetArenaNoVirtual() == NULL && transit_info_ != NULL) delete transit_info_;
  transit_info_ = NULL;
}
const ::valhalla::TransitRouteInfo& DirectionsLeg_Maneuver::transit_info() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.transit_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return transit_info_ != NULL ? *transit_info_ : *default_instance().transit_info_;
#else
  return transit_info_ != NULL ? *transit_info_ : *default_instance_->transit_info_;
#endif
}
::valhalla::TransitRouteInfo* DirectionsLeg_Maneuver::mutable_transit_info() {
  
  if (transit_info_ == NULL) {
    transit_info_ = new ::valhalla::TransitRouteInfo;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.transit_info)
  return transit_info_;
}
::valhalla::TransitRouteInfo* DirectionsLeg_Maneuver::release_transit_info() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.transit_info)
  
  ::valhalla::TransitRouteInfo* temp = transit_info_;
  transit_info_ = NULL;
  return temp;
}
void DirectionsLeg_Maneuver::set_allocated_transit_info(::valhalla::TransitRouteInfo* transit_info) {
  delete transit_info_;
  transit_info_ = transit_info;
  if (transit_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.transit_info)
}

// optional bool verbal_multi_cue = 23;
bool DirectionsLeg_Maneuver::has_verbal_multi_cue() const {
  return has_verbal_multi_cue_case() == kVerbalMultiCue;
}
void DirectionsLeg_Maneuver::set_has_verbal_multi_cue() {
  _oneof_case_[18] = kVerbalMultiCue;
}
void DirectionsLeg_Maneuver::clear_verbal_multi_cue() {
  if (has_verbal_multi_cue()) {
    has_verbal_multi_cue_.verbal_multi_cue_ = false;
    clear_has_has_verbal_multi_cue();
  }
}
 bool DirectionsLeg_Maneuver::verbal_multi_cue() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_multi_cue)
  if (has_verbal_multi_cue()) {
    return has_verbal_multi_cue_.verbal_multi_cue_;
  }
  return false;
}
 void DirectionsLeg_Maneuver::set_verbal_multi_cue(bool value) {
  if (!has_verbal_multi_cue()) {
    clear_has_verbal_multi_cue();
    set_has_verbal_multi_cue();
  }
  has_verbal_multi_cue_.verbal_multi_cue_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_multi_cue)
}

// optional .valhalla.TravelMode travel_mode = 24;
bool DirectionsLeg_Maneuver::has_travel_mode() const {
  return has_travel_mode_case() == kTravelMode;
}
void DirectionsLeg_Maneuver::set_has_travel_mode() {
  _oneof_case_[19] = kTravelMode;
}
void DirectionsLeg_Maneuver::clear_travel_mode() {
  if (has_travel_mode()) {
    has_travel_mode_.travel_mode_ = 0;
    clear_has_has_travel_mode();
  }
}
 ::valhalla::TravelMode DirectionsLeg_Maneuver::travel_mode() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.travel_mode)
  if (has_travel_mode()) {
    return static_cast< ::valhalla::TravelMode >(has_travel_mode_.travel_mode_);
  }
  return static_cast< ::valhalla::TravelMode >(0);
}
 void DirectionsLeg_Maneuver::set_travel_mode(::valhalla::TravelMode value) {
  if (!has_travel_mode()) {
    clear_has_travel_mode();
    set_has_travel_mode();
  }
  has_travel_mode_.travel_mode_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.travel_mode)
}

// optional .valhalla.VehicleType vehicle_type = 25;
bool DirectionsLeg_Maneuver::has_vehicle_type() const {
  return has_vehicle_type_case() == kVehicleType;
}
void DirectionsLeg_Maneuver::set_has_vehicle_type() {
  _oneof_case_[20] = kVehicleType;
}
void DirectionsLeg_Maneuver::clear_vehicle_type() {
  if (has_vehicle_type()) {
    has_vehicle_type_.vehicle_type_ = 0;
    clear_has_has_vehicle_type();
  }
}
 ::valhalla::VehicleType DirectionsLeg_Maneuver::vehicle_type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.vehicle_type)
  if (has_vehicle_type()) {
    return static_cast< ::valhalla::VehicleType >(has_vehicle_type_.vehicle_type_);
  }
  return static_cast< ::valhalla::VehicleType >(0);
}
 void DirectionsLeg_Maneuver::set_vehicle_type(::valhalla::VehicleType value) {
  if (!has_vehicle_type()) {
    clear_has_vehicle_type();
    set_has_vehicle_type();
  }
  has_vehicle_type_.vehicle_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.vehicle_type)
}

// optional .valhalla.PedestrianType pedestrian_type = 26;
bool DirectionsLeg_Maneuver::has_pedestrian_type() const {
  return has_pedestrian_type_case() == kPedestrianType;
}
void DirectionsLeg_Maneuver::set_has_pedestrian_type() {
  _oneof_case_[21] = kPedestrianType;
}
void DirectionsLeg_Maneuver::clear_pedestrian_type() {
  if (has_pedestrian_type()) {
    has_pedestrian_type_.pedestrian_type_ = 0;
    clear_has_has_pedestrian_type();
  }
}
 ::valhalla::PedestrianType DirectionsLeg_Maneuver::pedestrian_type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.pedestrian_type)
  if (has_pedestrian_type()) {
    return static_cast< ::valhalla::PedestrianType >(has_pedestrian_type_.pedestrian_type_);
  }
  return static_cast< ::valhalla::PedestrianType >(0);
}
 void DirectionsLeg_Maneuver::set_pedestrian_type(::valhalla::PedestrianType value) {
  if (!has_pedestrian_type()) {
    clear_has_pedestrian_type();
    set_has_pedestrian_type();
  }
  has_pedestrian_type_.pedestrian_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.pedestrian_type)
}

// optional .valhalla.BicycleType bicycle_type = 27;
bool DirectionsLeg_Maneuver::has_bicycle_type() const {
  return has_bicycle_type_case() == kBicycleType;
}
void DirectionsLeg_Maneuver::set_has_bicycle_type() {
  _oneof_case_[22] = kBicycleType;
}
void DirectionsLeg_Maneuver::clear_bicycle_type() {
  if (has_bicycle_type()) {
    has_bicycle_type_.bicycle_type_ = 0;
    clear_has_has_bicycle_type();
  }
}
 ::valhalla::BicycleType DirectionsLeg_Maneuver::bicycle_type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.bicycle_type)
  if (has_bicycle_type()) {
    return static_cast< ::valhalla::BicycleType >(has_bicycle_type_.bicycle_type_);
  }
  return static_cast< ::valhalla::BicycleType >(0);
}
 void DirectionsLeg_Maneuver::set_bicycle_type(::valhalla::BicycleType value) {
  if (!has_bicycle_type()) {
    clear_has_bicycle_type();
    set_has_bicycle_type();
  }
  has_bicycle_type_.bicycle_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.bicycle_type)
}

// optional .valhalla.TransitType transit_type = 28;
bool DirectionsLeg_Maneuver::has_transit_type() const {
  return has_transit_type_case() == kTransitType;
}
void DirectionsLeg_Maneuver::set_has_transit_type() {
  _oneof_case_[23] = kTransitType;
}
void DirectionsLeg_Maneuver::clear_transit_type() {
  if (has_transit_type()) {
    has_transit_type_.transit_type_ = 0;
    clear_has_has_transit_type();
  }
}
 ::valhalla::TransitType DirectionsLeg_Maneuver::transit_type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.transit_type)
  if (has_transit_type()) {
    return static_cast< ::valhalla::TransitType >(has_transit_type_.transit_type_);
  }
  return static_cast< ::valhalla::TransitType >(0);
}
 void DirectionsLeg_Maneuver::set_transit_type(::valhalla::TransitType value) {
  if (!has_transit_type()) {
    clear_has_transit_type();
    set_has_transit_type();
  }
  has_transit_type_.transit_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.transit_type)
}

// optional uint32 begin_path_index = 29;
bool DirectionsLeg_Maneuver::has_begin_path_index() const {
  return has_begin_path_index_case() == kBeginPathIndex;
}
void DirectionsLeg_Maneuver::set_has_begin_path_index() {
  _oneof_case_[24] = kBeginPathIndex;
}
void DirectionsLeg_Maneuver::clear_begin_path_index() {
  if (has_begin_path_index()) {
    has_begin_path_index_.begin_path_index_ = 0u;
    clear_has_has_begin_path_index();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::begin_path_index() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.begin_path_index)
  if (has_begin_path_index()) {
    return has_begin_path_index_.begin_path_index_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_begin_path_index(::google::protobuf::uint32 value) {
  if (!has_begin_path_index()) {
    clear_has_begin_path_index();
    set_has_begin_path_index();
  }
  has_begin_path_index_.begin_path_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.begin_path_index)
}

// optional uint32 end_path_index = 30;
bool DirectionsLeg_Maneuver::has_end_path_index() const {
  return has_end_path_index_case() == kEndPathIndex;
}
void DirectionsLeg_Maneuver::set_has_end_path_index() {
  _oneof_case_[25] = kEndPathIndex;
}
void DirectionsLeg_Maneuver::clear_end_path_index() {
  if (has_end_path_index()) {
    has_end_path_index_.end_path_index_ = 0u;
    clear_has_has_end_path_index();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::end_path_index() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.end_path_index)
  if (has_end_path_index()) {
    return has_end_path_index_.end_path_index_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_end_path_index(::google::protobuf::uint32 value) {
  if (!has_end_path_index()) {
    clear_has_end_path_index();
    set_has_end_path_index();
  }
  has_end_path_index_.end_path_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.end_path_index)
}

// optional bool to_stay_on = 31;
bool DirectionsLeg_Maneuver::has_to_stay_on() const {
  return has_to_stay_on_case() == kToStayOn;
}
void DirectionsLeg_Maneuver::set_has_to_stay_on() {
  _oneof_case_[26] = kToStayOn;
}
void DirectionsLeg_Maneuver::clear_to_stay_on() {
  if (has_to_stay_on()) {
    has_to_stay_on_.to_stay_on_ = false;
    clear_has_has_to_stay_on();
  }
}
 bool DirectionsLeg_Maneuver::to_stay_on() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.to_stay_on)
  if (has_to_stay_on()) {
    return has_to_stay_on_.to_stay_on_;
  }
  return false;
}
 void DirectionsLeg_Maneuver::set_to_stay_on(bool value) {
  if (!has_to_stay_on()) {
    clear_has_to_stay_on();
    set_has_to_stay_on();
  }
  has_to_stay_on_.to_stay_on_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.to_stay_on)
}

// repeated .valhalla.StreetName roundabout_exit_street_names = 32;
int DirectionsLeg_Maneuver::roundabout_exit_street_names_size() const {
  return roundabout_exit_street_names_.size();
}
void DirectionsLeg_Maneuver::clear_roundabout_exit_street_names() {
  roundabout_exit_street_names_.Clear();
}
const ::valhalla::StreetName& DirectionsLeg_Maneuver::roundabout_exit_street_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names)
  return roundabout_exit_street_names_.Get(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::mutable_roundabout_exit_street_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names)
  return roundabout_exit_street_names_.Mutable(index);
}
::valhalla::StreetName* DirectionsLeg_Maneuver::add_roundabout_exit_street_names() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names)
  return roundabout_exit_street_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >*
DirectionsLeg_Maneuver::mutable_roundabout_exit_street_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names)
  return &roundabout_exit_street_names_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::StreetName >&
DirectionsLeg_Maneuver::roundabout_exit_street_names() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.Maneuver.roundabout_exit_street_names)
  return roundabout_exit_street_names_;
}

// optional uint32 turn_degree = 33;
bool DirectionsLeg_Maneuver::has_turn_degree() const {
  return has_turn_degree_case() == kTurnDegree;
}
void DirectionsLeg_Maneuver::set_has_turn_degree() {
  _oneof_case_[27] = kTurnDegree;
}
void DirectionsLeg_Maneuver::clear_turn_degree() {
  if (has_turn_degree()) {
    has_turn_degree_.turn_degree_ = 0u;
    clear_has_has_turn_degree();
  }
}
 ::google::protobuf::uint32 DirectionsLeg_Maneuver::turn_degree() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.turn_degree)
  if (has_turn_degree()) {
    return has_turn_degree_.turn_degree_;
  }
  return 0u;
}
 void DirectionsLeg_Maneuver::set_turn_degree(::google::protobuf::uint32 value) {
  if (!has_turn_degree()) {
    clear_has_turn_degree();
    set_has_turn_degree();
  }
  has_turn_degree_.turn_degree_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.turn_degree)
}

// optional bool has_time_restrictions = 34;
bool DirectionsLeg_Maneuver::has_has_time_restrictions() const {
  return has_has_time_restrictions_case() == kHasTimeRestrictions;
}
void DirectionsLeg_Maneuver::set_has_has_time_restrictions() {
  _oneof_case_[28] = kHasTimeRestrictions;
}
void DirectionsLeg_Maneuver::clear_has_time_restrictions() {
  if (has_has_time_restrictions()) {
    has_has_time_restrictions_.has_time_restrictions_ = false;
    clear_has_has_has_time_restrictions();
  }
}
 bool DirectionsLeg_Maneuver::has_time_restrictions() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.has_time_restrictions)
  if (has_has_time_restrictions()) {
    return has_has_time_restrictions_.has_time_restrictions_;
  }
  return false;
}
 void DirectionsLeg_Maneuver::set_has_time_restrictions(bool value) {
  if (!has_has_time_restrictions()) {
    clear_has_has_time_restrictions();
    set_has_has_time_restrictions();
  }
  has_has_time_restrictions_.has_time_restrictions_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.has_time_restrictions)
}

// repeated .valhalla.DirectionsLeg.GuidanceView guidance_views = 35;
int DirectionsLeg_Maneuver::guidance_views_size() const {
  return guidance_views_.size();
}
void DirectionsLeg_Maneuver::clear_guidance_views() {
  guidance_views_.Clear();
}
const ::valhalla::DirectionsLeg_GuidanceView& DirectionsLeg_Maneuver::guidance_views(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.guidance_views)
  return guidance_views_.Get(index);
}
::valhalla::DirectionsLeg_GuidanceView* DirectionsLeg_Maneuver::mutable_guidance_views(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.guidance_views)
  return guidance_views_.Mutable(index);
}
::valhalla::DirectionsLeg_GuidanceView* DirectionsLeg_Maneuver::add_guidance_views() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.Maneuver.guidance_views)
  return guidance_views_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg_GuidanceView >*
DirectionsLeg_Maneuver::mutable_guidance_views() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.Maneuver.guidance_views)
  return &guidance_views_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg_GuidanceView >&
DirectionsLeg_Maneuver::guidance_views() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.Maneuver.guidance_views)
  return guidance_views_;
}

// optional .valhalla.DirectionsLeg.Maneuver.BssManeuverType bss_maneuver_type = 36;
bool DirectionsLeg_Maneuver::has_bss_maneuver_type() const {
  return has_bss_maneuver_type_case() == kBssManeuverType;
}
void DirectionsLeg_Maneuver::set_has_bss_maneuver_type() {
  _oneof_case_[29] = kBssManeuverType;
}
void DirectionsLeg_Maneuver::clear_bss_maneuver_type() {
  if (has_bss_maneuver_type()) {
    has_bss_maneuver_type_.bss_maneuver_type_ = 0;
    clear_has_has_bss_maneuver_type();
  }
}
 ::valhalla::DirectionsLeg_Maneuver_BssManeuverType DirectionsLeg_Maneuver::bss_maneuver_type() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.bss_maneuver_type)
  if (has_bss_maneuver_type()) {
    return static_cast< ::valhalla::DirectionsLeg_Maneuver_BssManeuverType >(has_bss_maneuver_type_.bss_maneuver_type_);
  }
  return static_cast< ::valhalla::DirectionsLeg_Maneuver_BssManeuverType >(0);
}
 void DirectionsLeg_Maneuver::set_bss_maneuver_type(::valhalla::DirectionsLeg_Maneuver_BssManeuverType value) {
  if (!has_bss_maneuver_type()) {
    clear_has_bss_maneuver_type();
    set_has_bss_maneuver_type();
  }
  has_bss_maneuver_type_.bss_maneuver_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.bss_maneuver_type)
}

// optional string verbal_succinct_transition_instruction = 37;
bool DirectionsLeg_Maneuver::has_verbal_succinct_transition_instruction() const {
  return has_verbal_succinct_transition_instruction_case() == kVerbalSuccinctTransitionInstruction;
}
void DirectionsLeg_Maneuver::set_has_verbal_succinct_transition_instruction() {
  _oneof_case_[30] = kVerbalSuccinctTransitionInstruction;
}
void DirectionsLeg_Maneuver::clear_verbal_succinct_transition_instruction() {
  if (has_verbal_succinct_transition_instruction()) {
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_verbal_succinct_transition_instruction();
  }
}
 const ::std::string& DirectionsLeg_Maneuver::verbal_succinct_transition_instruction() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
  if (has_verbal_succinct_transition_instruction()) {
    return has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg_Maneuver::set_verbal_succinct_transition_instruction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
  if (!has_verbal_succinct_transition_instruction()) {
    clear_has_verbal_succinct_transition_instruction();
    set_has_verbal_succinct_transition_instruction();
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_succinct_transition_instruction(const char* value) {
  if (!has_verbal_succinct_transition_instruction()) {
    clear_has_verbal_succinct_transition_instruction();
    set_has_verbal_succinct_transition_instruction();
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
}
 void DirectionsLeg_Maneuver::set_verbal_succinct_transition_instruction(const char* value, size_t size) {
  if (!has_verbal_succinct_transition_instruction()) {
    clear_has_verbal_succinct_transition_instruction();
    set_has_verbal_succinct_transition_instruction();
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
}
 ::std::string* DirectionsLeg_Maneuver::mutable_verbal_succinct_transition_instruction() {
  if (!has_verbal_succinct_transition_instruction()) {
    clear_has_verbal_succinct_transition_instruction();
    set_has_verbal_succinct_transition_instruction();
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
  return has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg_Maneuver::release_verbal_succinct_transition_instruction() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
  if (has_verbal_succinct_transition_instruction()) {
    clear_has_has_verbal_succinct_transition_instruction();
    return has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg_Maneuver::set_allocated_verbal_succinct_transition_instruction(::std::string* verbal_succinct_transition_instruction) {
  if (!has_verbal_succinct_transition_instruction()) {
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_verbal_succinct_transition_instruction();
  if (verbal_succinct_transition_instruction != NULL) {
    set_has_verbal_succinct_transition_instruction();
    has_verbal_succinct_transition_instruction_.verbal_succinct_transition_instruction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        verbal_succinct_transition_instruction);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.verbal_succinct_transition_instruction)
}

// optional .valhalla.BikeShareStationInfo bss_info = 38;
bool DirectionsLeg_Maneuver::has_bss_info() const {
  return !_is_default_instance_ && bss_info_ != NULL;
}
void DirectionsLeg_Maneuver::clear_bss_info() {
  if (GetArenaNoVirtual() == NULL && bss_info_ != NULL) delete bss_info_;
  bss_info_ = NULL;
}
const ::valhalla::BikeShareStationInfo& DirectionsLeg_Maneuver::bss_info() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.Maneuver.bss_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return bss_info_ != NULL ? *bss_info_ : *default_instance().bss_info_;
#else
  return bss_info_ != NULL ? *bss_info_ : *default_instance_->bss_info_;
#endif
}
::valhalla::BikeShareStationInfo* DirectionsLeg_Maneuver::mutable_bss_info() {
  
  if (bss_info_ == NULL) {
    bss_info_ = new ::valhalla::BikeShareStationInfo;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.Maneuver.bss_info)
  return bss_info_;
}
::valhalla::BikeShareStationInfo* DirectionsLeg_Maneuver::release_bss_info() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.Maneuver.bss_info)
  
  ::valhalla::BikeShareStationInfo* temp = bss_info_;
  bss_info_ = NULL;
  return temp;
}
void DirectionsLeg_Maneuver::set_allocated_bss_info(::valhalla::BikeShareStationInfo* bss_info) {
  delete bss_info_;
  bss_info_ = bss_info;
  if (bss_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.Maneuver.bss_info)
}

bool DirectionsLeg_Maneuver::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_type() {
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_text_instruction() const {
  return has_text_instruction_case() != HAS_TEXT_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_text_instruction() {
  _oneof_case_[1] = HAS_TEXT_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_length() const {
  return has_length_case() != HAS_LENGTH_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_length() {
  _oneof_case_[2] = HAS_LENGTH_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_time() {
  _oneof_case_[3] = HAS_TIME_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_begin_cardinal_direction() const {
  return has_begin_cardinal_direction_case() != HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_begin_cardinal_direction() {
  _oneof_case_[4] = HAS_BEGIN_CARDINAL_DIRECTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_begin_heading() const {
  return has_begin_heading_case() != HAS_BEGIN_HEADING_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_begin_heading() {
  _oneof_case_[5] = HAS_BEGIN_HEADING_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_begin_shape_index() const {
  return has_begin_shape_index_case() != HAS_BEGIN_SHAPE_INDEX_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_begin_shape_index() {
  _oneof_case_[6] = HAS_BEGIN_SHAPE_INDEX_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_end_shape_index() const {
  return has_end_shape_index_case() != HAS_END_SHAPE_INDEX_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_end_shape_index() {
  _oneof_case_[7] = HAS_END_SHAPE_INDEX_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_portions_toll() const {
  return has_portions_toll_case() != HAS_PORTIONS_TOLL_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_portions_toll() {
  _oneof_case_[8] = HAS_PORTIONS_TOLL_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_portions_unpaved() const {
  return has_portions_unpaved_case() != HAS_PORTIONS_UNPAVED_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_portions_unpaved() {
  _oneof_case_[9] = HAS_PORTIONS_UNPAVED_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_transition_alert_instruction() const {
  return has_verbal_transition_alert_instruction_case() != HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_transition_alert_instruction() {
  _oneof_case_[10] = HAS_VERBAL_TRANSITION_ALERT_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_pre_transition_instruction() const {
  return has_verbal_pre_transition_instruction_case() != HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_pre_transition_instruction() {
  _oneof_case_[11] = HAS_VERBAL_PRE_TRANSITION_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_post_transition_instruction() const {
  return has_verbal_post_transition_instruction_case() != HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_post_transition_instruction() {
  _oneof_case_[12] = HAS_VERBAL_POST_TRANSITION_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_roundabout_exit_count() const {
  return has_roundabout_exit_count_case() != HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_roundabout_exit_count() {
  _oneof_case_[13] = HAS_ROUNDABOUT_EXIT_COUNT_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_depart_instruction() const {
  return has_depart_instruction_case() != HAS_DEPART_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_depart_instruction() {
  _oneof_case_[14] = HAS_DEPART_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_depart_instruction() const {
  return has_verbal_depart_instruction_case() != HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_depart_instruction() {
  _oneof_case_[15] = HAS_VERBAL_DEPART_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_arrive_instruction() const {
  return has_arrive_instruction_case() != HAS_ARRIVE_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_arrive_instruction() {
  _oneof_case_[16] = HAS_ARRIVE_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_arrive_instruction() const {
  return has_verbal_arrive_instruction_case() != HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_arrive_instruction() {
  _oneof_case_[17] = HAS_VERBAL_ARRIVE_INSTRUCTION_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_multi_cue() const {
  return has_verbal_multi_cue_case() != HAS_VERBAL_MULTI_CUE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_multi_cue() {
  _oneof_case_[18] = HAS_VERBAL_MULTI_CUE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_travel_mode() const {
  return has_travel_mode_case() != HAS_TRAVEL_MODE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_travel_mode() {
  _oneof_case_[19] = HAS_TRAVEL_MODE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_vehicle_type() const {
  return has_vehicle_type_case() != HAS_VEHICLE_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_vehicle_type() {
  _oneof_case_[20] = HAS_VEHICLE_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_pedestrian_type() const {
  return has_pedestrian_type_case() != HAS_PEDESTRIAN_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_pedestrian_type() {
  _oneof_case_[21] = HAS_PEDESTRIAN_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_bicycle_type() const {
  return has_bicycle_type_case() != HAS_BICYCLE_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_bicycle_type() {
  _oneof_case_[22] = HAS_BICYCLE_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_transit_type() const {
  return has_transit_type_case() != HAS_TRANSIT_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_transit_type() {
  _oneof_case_[23] = HAS_TRANSIT_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_begin_path_index() const {
  return has_begin_path_index_case() != HAS_BEGIN_PATH_INDEX_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_begin_path_index() {
  _oneof_case_[24] = HAS_BEGIN_PATH_INDEX_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_end_path_index() const {
  return has_end_path_index_case() != HAS_END_PATH_INDEX_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_end_path_index() {
  _oneof_case_[25] = HAS_END_PATH_INDEX_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_to_stay_on() const {
  return has_to_stay_on_case() != HAS_TO_STAY_ON_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_to_stay_on() {
  _oneof_case_[26] = HAS_TO_STAY_ON_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_turn_degree() const {
  return has_turn_degree_case() != HAS_TURN_DEGREE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_turn_degree() {
  _oneof_case_[27] = HAS_TURN_DEGREE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_has_time_restrictions() const {
  return has_has_time_restrictions_case() != HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_has_time_restrictions() {
  _oneof_case_[28] = HAS_HAS_TIME_RESTRICTIONS_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_bss_maneuver_type() const {
  return has_bss_maneuver_type_case() != HAS_BSS_MANEUVER_TYPE_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_bss_maneuver_type() {
  _oneof_case_[29] = HAS_BSS_MANEUVER_TYPE_NOT_SET;
}
bool DirectionsLeg_Maneuver::has_has_verbal_succinct_transition_instruction() const {
  return has_verbal_succinct_transition_instruction_case() != HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET;
}
void DirectionsLeg_Maneuver::clear_has_has_verbal_succinct_transition_instruction() {
  _oneof_case_[30] = HAS_VERBAL_SUCCINCT_TRANSITION_INSTRUCTION_NOT_SET;
}
DirectionsLeg_Maneuver::HasTypeCase DirectionsLeg_Maneuver::has_type_case() const {
  return DirectionsLeg_Maneuver::HasTypeCase(_oneof_case_[0]);
}
DirectionsLeg_Maneuver::HasTextInstructionCase DirectionsLeg_Maneuver::has_text_instruction_case() const {
  return DirectionsLeg_Maneuver::HasTextInstructionCase(_oneof_case_[1]);
}
DirectionsLeg_Maneuver::HasLengthCase DirectionsLeg_Maneuver::has_length_case() const {
  return DirectionsLeg_Maneuver::HasLengthCase(_oneof_case_[2]);
}
DirectionsLeg_Maneuver::HasTimeCase DirectionsLeg_Maneuver::has_time_case() const {
  return DirectionsLeg_Maneuver::HasTimeCase(_oneof_case_[3]);
}
DirectionsLeg_Maneuver::HasBeginCardinalDirectionCase DirectionsLeg_Maneuver::has_begin_cardinal_direction_case() const {
  return DirectionsLeg_Maneuver::HasBeginCardinalDirectionCase(_oneof_case_[4]);
}
DirectionsLeg_Maneuver::HasBeginHeadingCase DirectionsLeg_Maneuver::has_begin_heading_case() const {
  return DirectionsLeg_Maneuver::HasBeginHeadingCase(_oneof_case_[5]);
}
DirectionsLeg_Maneuver::HasBeginShapeIndexCase DirectionsLeg_Maneuver::has_begin_shape_index_case() const {
  return DirectionsLeg_Maneuver::HasBeginShapeIndexCase(_oneof_case_[6]);
}
DirectionsLeg_Maneuver::HasEndShapeIndexCase DirectionsLeg_Maneuver::has_end_shape_index_case() const {
  return DirectionsLeg_Maneuver::HasEndShapeIndexCase(_oneof_case_[7]);
}
DirectionsLeg_Maneuver::HasPortionsTollCase DirectionsLeg_Maneuver::has_portions_toll_case() const {
  return DirectionsLeg_Maneuver::HasPortionsTollCase(_oneof_case_[8]);
}
DirectionsLeg_Maneuver::HasPortionsUnpavedCase DirectionsLeg_Maneuver::has_portions_unpaved_case() const {
  return DirectionsLeg_Maneuver::HasPortionsUnpavedCase(_oneof_case_[9]);
}
DirectionsLeg_Maneuver::HasVerbalTransitionAlertInstructionCase DirectionsLeg_Maneuver::has_verbal_transition_alert_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalTransitionAlertInstructionCase(_oneof_case_[10]);
}
DirectionsLeg_Maneuver::HasVerbalPreTransitionInstructionCase DirectionsLeg_Maneuver::has_verbal_pre_transition_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalPreTransitionInstructionCase(_oneof_case_[11]);
}
DirectionsLeg_Maneuver::HasVerbalPostTransitionInstructionCase DirectionsLeg_Maneuver::has_verbal_post_transition_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalPostTransitionInstructionCase(_oneof_case_[12]);
}
DirectionsLeg_Maneuver::HasRoundaboutExitCountCase DirectionsLeg_Maneuver::has_roundabout_exit_count_case() const {
  return DirectionsLeg_Maneuver::HasRoundaboutExitCountCase(_oneof_case_[13]);
}
DirectionsLeg_Maneuver::HasDepartInstructionCase DirectionsLeg_Maneuver::has_depart_instruction_case() const {
  return DirectionsLeg_Maneuver::HasDepartInstructionCase(_oneof_case_[14]);
}
DirectionsLeg_Maneuver::HasVerbalDepartInstructionCase DirectionsLeg_Maneuver::has_verbal_depart_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalDepartInstructionCase(_oneof_case_[15]);
}
DirectionsLeg_Maneuver::HasArriveInstructionCase DirectionsLeg_Maneuver::has_arrive_instruction_case() const {
  return DirectionsLeg_Maneuver::HasArriveInstructionCase(_oneof_case_[16]);
}
DirectionsLeg_Maneuver::HasVerbalArriveInstructionCase DirectionsLeg_Maneuver::has_verbal_arrive_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalArriveInstructionCase(_oneof_case_[17]);
}
DirectionsLeg_Maneuver::HasVerbalMultiCueCase DirectionsLeg_Maneuver::has_verbal_multi_cue_case() const {
  return DirectionsLeg_Maneuver::HasVerbalMultiCueCase(_oneof_case_[18]);
}
DirectionsLeg_Maneuver::HasTravelModeCase DirectionsLeg_Maneuver::has_travel_mode_case() const {
  return DirectionsLeg_Maneuver::HasTravelModeCase(_oneof_case_[19]);
}
DirectionsLeg_Maneuver::HasVehicleTypeCase DirectionsLeg_Maneuver::has_vehicle_type_case() const {
  return DirectionsLeg_Maneuver::HasVehicleTypeCase(_oneof_case_[20]);
}
DirectionsLeg_Maneuver::HasPedestrianTypeCase DirectionsLeg_Maneuver::has_pedestrian_type_case() const {
  return DirectionsLeg_Maneuver::HasPedestrianTypeCase(_oneof_case_[21]);
}
DirectionsLeg_Maneuver::HasBicycleTypeCase DirectionsLeg_Maneuver::has_bicycle_type_case() const {
  return DirectionsLeg_Maneuver::HasBicycleTypeCase(_oneof_case_[22]);
}
DirectionsLeg_Maneuver::HasTransitTypeCase DirectionsLeg_Maneuver::has_transit_type_case() const {
  return DirectionsLeg_Maneuver::HasTransitTypeCase(_oneof_case_[23]);
}
DirectionsLeg_Maneuver::HasBeginPathIndexCase DirectionsLeg_Maneuver::has_begin_path_index_case() const {
  return DirectionsLeg_Maneuver::HasBeginPathIndexCase(_oneof_case_[24]);
}
DirectionsLeg_Maneuver::HasEndPathIndexCase DirectionsLeg_Maneuver::has_end_path_index_case() const {
  return DirectionsLeg_Maneuver::HasEndPathIndexCase(_oneof_case_[25]);
}
DirectionsLeg_Maneuver::HasToStayOnCase DirectionsLeg_Maneuver::has_to_stay_on_case() const {
  return DirectionsLeg_Maneuver::HasToStayOnCase(_oneof_case_[26]);
}
DirectionsLeg_Maneuver::HasTurnDegreeCase DirectionsLeg_Maneuver::has_turn_degree_case() const {
  return DirectionsLeg_Maneuver::HasTurnDegreeCase(_oneof_case_[27]);
}
DirectionsLeg_Maneuver::HasHasTimeRestrictionsCase DirectionsLeg_Maneuver::has_has_time_restrictions_case() const {
  return DirectionsLeg_Maneuver::HasHasTimeRestrictionsCase(_oneof_case_[28]);
}
DirectionsLeg_Maneuver::HasBssManeuverTypeCase DirectionsLeg_Maneuver::has_bss_maneuver_type_case() const {
  return DirectionsLeg_Maneuver::HasBssManeuverTypeCase(_oneof_case_[29]);
}
DirectionsLeg_Maneuver::HasVerbalSuccinctTransitionInstructionCase DirectionsLeg_Maneuver::has_verbal_succinct_transition_instruction_case() const {
  return DirectionsLeg_Maneuver::HasVerbalSuccinctTransitionInstructionCase(_oneof_case_[30]);
}
// -------------------------------------------------------------------

// DirectionsLeg

// optional uint64 trip_id = 1;
bool DirectionsLeg::has_trip_id() const {
  return has_trip_id_case() == kTripId;
}
void DirectionsLeg::set_has_trip_id() {
  _oneof_case_[0] = kTripId;
}
void DirectionsLeg::clear_trip_id() {
  if (has_trip_id()) {
    has_trip_id_.trip_id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_trip_id();
  }
}
 ::google::protobuf::uint64 DirectionsLeg::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.trip_id)
  if (has_trip_id()) {
    return has_trip_id_.trip_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void DirectionsLeg::set_trip_id(::google::protobuf::uint64 value) {
  if (!has_trip_id()) {
    clear_has_trip_id();
    set_has_trip_id();
  }
  has_trip_id_.trip_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.trip_id)
}

// optional uint32 leg_id = 2;
bool DirectionsLeg::has_leg_id() const {
  return has_leg_id_case() == kLegId;
}
void DirectionsLeg::set_has_leg_id() {
  _oneof_case_[1] = kLegId;
}
void DirectionsLeg::clear_leg_id() {
  if (has_leg_id()) {
    has_leg_id_.leg_id_ = 0u;
    clear_has_has_leg_id();
  }
}
 ::google::protobuf::uint32 DirectionsLeg::leg_id() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.leg_id)
  if (has_leg_id()) {
    return has_leg_id_.leg_id_;
  }
  return 0u;
}
 void DirectionsLeg::set_leg_id(::google::protobuf::uint32 value) {
  if (!has_leg_id()) {
    clear_has_leg_id();
    set_has_leg_id();
  }
  has_leg_id_.leg_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.leg_id)
}

// optional uint32 leg_count = 3;
bool DirectionsLeg::has_leg_count() const {
  return has_leg_count_case() == kLegCount;
}
void DirectionsLeg::set_has_leg_count() {
  _oneof_case_[2] = kLegCount;
}
void DirectionsLeg::clear_leg_count() {
  if (has_leg_count()) {
    has_leg_count_.leg_count_ = 0u;
    clear_has_has_leg_count();
  }
}
 ::google::protobuf::uint32 DirectionsLeg::leg_count() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.leg_count)
  if (has_leg_count()) {
    return has_leg_count_.leg_count_;
  }
  return 0u;
}
 void DirectionsLeg::set_leg_count(::google::protobuf::uint32 value) {
  if (!has_leg_count()) {
    clear_has_leg_count();
    set_has_leg_count();
  }
  has_leg_count_.leg_count_ = value;
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.leg_count)
}

// repeated .valhalla.Location location = 4;
int DirectionsLeg::location_size() const {
  return location_.size();
}
void DirectionsLeg::clear_location() {
  location_.Clear();
}
const ::valhalla::Location& DirectionsLeg::location(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.location)
  return location_.Get(index);
}
::valhalla::Location* DirectionsLeg::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.location)
  return location_.Mutable(index);
}
::valhalla::Location* DirectionsLeg::add_location() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.location)
  return location_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
DirectionsLeg::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.location)
  return &location_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
DirectionsLeg::location() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.location)
  return location_;
}

// optional .valhalla.DirectionsLeg.Summary summary = 5;
bool DirectionsLeg::has_summary() const {
  return !_is_default_instance_ && summary_ != NULL;
}
void DirectionsLeg::clear_summary() {
  if (GetArenaNoVirtual() == NULL && summary_ != NULL) delete summary_;
  summary_ = NULL;
}
const ::valhalla::DirectionsLeg_Summary& DirectionsLeg::summary() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.summary)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return summary_ != NULL ? *summary_ : *default_instance().summary_;
#else
  return summary_ != NULL ? *summary_ : *default_instance_->summary_;
#endif
}
::valhalla::DirectionsLeg_Summary* DirectionsLeg::mutable_summary() {
  
  if (summary_ == NULL) {
    summary_ = new ::valhalla::DirectionsLeg_Summary;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.summary)
  return summary_;
}
::valhalla::DirectionsLeg_Summary* DirectionsLeg::release_summary() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.summary)
  
  ::valhalla::DirectionsLeg_Summary* temp = summary_;
  summary_ = NULL;
  return temp;
}
void DirectionsLeg::set_allocated_summary(::valhalla::DirectionsLeg_Summary* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.summary)
}

// repeated .valhalla.DirectionsLeg.Maneuver maneuver = 6;
int DirectionsLeg::maneuver_size() const {
  return maneuver_.size();
}
void DirectionsLeg::clear_maneuver() {
  maneuver_.Clear();
}
const ::valhalla::DirectionsLeg_Maneuver& DirectionsLeg::maneuver(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.maneuver)
  return maneuver_.Get(index);
}
::valhalla::DirectionsLeg_Maneuver* DirectionsLeg::mutable_maneuver(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.maneuver)
  return maneuver_.Mutable(index);
}
::valhalla::DirectionsLeg_Maneuver* DirectionsLeg::add_maneuver() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsLeg.maneuver)
  return maneuver_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg_Maneuver >*
DirectionsLeg::mutable_maneuver() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsLeg.maneuver)
  return &maneuver_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg_Maneuver >&
DirectionsLeg::maneuver() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsLeg.maneuver)
  return maneuver_;
}

// optional string shape = 7;
bool DirectionsLeg::has_shape() const {
  return has_shape_case() == kShape;
}
void DirectionsLeg::set_has_shape() {
  _oneof_case_[3] = kShape;
}
void DirectionsLeg::clear_shape() {
  if (has_shape()) {
    has_shape_.shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_shape();
  }
}
 const ::std::string& DirectionsLeg::shape() const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsLeg.shape)
  if (has_shape()) {
    return has_shape_.shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void DirectionsLeg::set_shape(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.shape)
  if (!has_shape()) {
    clear_has_shape();
    set_has_shape();
    has_shape_.shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_shape_.shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.DirectionsLeg.shape)
}
 void DirectionsLeg::set_shape(const char* value) {
  if (!has_shape()) {
    clear_has_shape();
    set_has_shape();
    has_shape_.shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_shape_.shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.DirectionsLeg.shape)
}
 void DirectionsLeg::set_shape(const char* value, size_t size) {
  if (!has_shape()) {
    clear_has_shape();
    set_has_shape();
    has_shape_.shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_shape_.shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.DirectionsLeg.shape)
}
 ::std::string* DirectionsLeg::mutable_shape() {
  if (!has_shape()) {
    clear_has_shape();
    set_has_shape();
    has_shape_.shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsLeg.shape)
  return has_shape_.shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DirectionsLeg::release_shape() {
  // @@protoc_insertion_point(field_release:valhalla.DirectionsLeg.shape)
  if (has_shape()) {
    clear_has_has_shape();
    return has_shape_.shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void DirectionsLeg::set_allocated_shape(::std::string* shape) {
  if (!has_shape()) {
    has_shape_.shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_shape();
  if (shape != NULL) {
    set_has_shape();
    has_shape_.shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        shape);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.DirectionsLeg.shape)
}

bool DirectionsLeg::has_has_trip_id() const {
  return has_trip_id_case() != HAS_TRIP_ID_NOT_SET;
}
void DirectionsLeg::clear_has_has_trip_id() {
  _oneof_case_[0] = HAS_TRIP_ID_NOT_SET;
}
bool DirectionsLeg::has_has_leg_id() const {
  return has_leg_id_case() != HAS_LEG_ID_NOT_SET;
}
void DirectionsLeg::clear_has_has_leg_id() {
  _oneof_case_[1] = HAS_LEG_ID_NOT_SET;
}
bool DirectionsLeg::has_has_leg_count() const {
  return has_leg_count_case() != HAS_LEG_COUNT_NOT_SET;
}
void DirectionsLeg::clear_has_has_leg_count() {
  _oneof_case_[2] = HAS_LEG_COUNT_NOT_SET;
}
bool DirectionsLeg::has_has_shape() const {
  return has_shape_case() != HAS_SHAPE_NOT_SET;
}
void DirectionsLeg::clear_has_has_shape() {
  _oneof_case_[3] = HAS_SHAPE_NOT_SET;
}
DirectionsLeg::HasTripIdCase DirectionsLeg::has_trip_id_case() const {
  return DirectionsLeg::HasTripIdCase(_oneof_case_[0]);
}
DirectionsLeg::HasLegIdCase DirectionsLeg::has_leg_id_case() const {
  return DirectionsLeg::HasLegIdCase(_oneof_case_[1]);
}
DirectionsLeg::HasLegCountCase DirectionsLeg::has_leg_count_case() const {
  return DirectionsLeg::HasLegCountCase(_oneof_case_[2]);
}
DirectionsLeg::HasShapeCase DirectionsLeg::has_shape_case() const {
  return DirectionsLeg::HasShapeCase(_oneof_case_[3]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectionsRoute::kLegsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectionsRoute::DirectionsRoute()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.DirectionsRoute)
}

void DirectionsRoute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DirectionsRoute::DirectionsRoute(const DirectionsRoute& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.DirectionsRoute)
}

void DirectionsRoute::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DirectionsRoute::~DirectionsRoute() {
  // @@protoc_insertion_point(destructor:valhalla.DirectionsRoute)
  SharedDtor();
}

void DirectionsRoute::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DirectionsRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DirectionsRoute& DirectionsRoute::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

DirectionsRoute* DirectionsRoute::default_instance_ = NULL;

DirectionsRoute* DirectionsRoute::New(::google::protobuf::Arena* arena) const {
  DirectionsRoute* n = new DirectionsRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectionsRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.DirectionsRoute)
  legs_.Clear();
}

bool DirectionsRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.DirectionsRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.DirectionsLeg legs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_legs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_legs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.DirectionsRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.DirectionsRoute)
  return false;
#undef DO_
}

void DirectionsRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.DirectionsRoute)
  // repeated .valhalla.DirectionsLeg legs = 1;
  for (unsigned int i = 0, n = this->legs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->legs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.DirectionsRoute)
}

int DirectionsRoute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.DirectionsRoute)
  int total_size = 0;

  // repeated .valhalla.DirectionsLeg legs = 1;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectionsRoute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DirectionsRoute*>(&from));
}

void DirectionsRoute::MergeFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.DirectionsRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  legs_.MergeFrom(from.legs_);
}

void DirectionsRoute::CopyFrom(const DirectionsRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.DirectionsRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionsRoute::IsInitialized() const {

  return true;
}

void DirectionsRoute::Swap(DirectionsRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectionsRoute::InternalSwap(DirectionsRoute* other) {
  legs_.UnsafeArenaSwap(&other->legs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DirectionsRoute::GetTypeName() const {
  return "valhalla.DirectionsRoute";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectionsRoute

// repeated .valhalla.DirectionsLeg legs = 1;
int DirectionsRoute::legs_size() const {
  return legs_.size();
}
void DirectionsRoute::clear_legs() {
  legs_.Clear();
}
const ::valhalla::DirectionsLeg& DirectionsRoute::legs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.DirectionsRoute.legs)
  return legs_.Get(index);
}
::valhalla::DirectionsLeg* DirectionsRoute::mutable_legs(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.DirectionsRoute.legs)
  return legs_.Mutable(index);
}
::valhalla::DirectionsLeg* DirectionsRoute::add_legs() {
  // @@protoc_insertion_point(field_add:valhalla.DirectionsRoute.legs)
  return legs_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg >*
DirectionsRoute::mutable_legs() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.DirectionsRoute.legs)
  return &legs_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsLeg >&
DirectionsRoute::legs() const {
  // @@protoc_insertion_point(field_list:valhalla.DirectionsRoute.legs)
  return legs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Directions::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Directions::Directions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Directions)
}

void Directions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Directions::Directions(const Directions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Directions)
}

void Directions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Directions::~Directions() {
  // @@protoc_insertion_point(destructor:valhalla.Directions)
  SharedDtor();
}

void Directions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Directions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Directions& Directions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_directions_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_directions_2eproto();
#endif
  return *default_instance_;
}

Directions* Directions::default_instance_ = NULL;

Directions* Directions::New(::google::protobuf::Arena* arena) const {
  Directions* n = new Directions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Directions::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Directions)
  routes_.Clear();
}

bool Directions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Directions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.DirectionsRoute routes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Directions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Directions)
  return false;
#undef DO_
}

void Directions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Directions)
  // repeated .valhalla.DirectionsRoute routes = 1;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->routes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Directions)
}

int Directions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Directions)
  int total_size = 0;

  // repeated .valhalla.DirectionsRoute routes = 1;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Directions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Directions*>(&from));
}

void Directions::MergeFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Directions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  routes_.MergeFrom(from.routes_);
}

void Directions::CopyFrom(const Directions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Directions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directions::IsInitialized() const {

  return true;
}

void Directions::Swap(Directions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Directions::InternalSwap(Directions* other) {
  routes_.UnsafeArenaSwap(&other->routes_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Directions::GetTypeName() const {
  return "valhalla.Directions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Directions

// repeated .valhalla.DirectionsRoute routes = 1;
int Directions::routes_size() const {
  return routes_.size();
}
void Directions::clear_routes() {
  routes_.Clear();
}
const ::valhalla::DirectionsRoute& Directions::routes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Directions.routes)
  return routes_.Get(index);
}
::valhalla::DirectionsRoute* Directions::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Directions.routes)
  return routes_.Mutable(index);
}
::valhalla::DirectionsRoute* Directions::add_routes() {
  // @@protoc_insertion_point(field_add:valhalla.Directions.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsRoute >*
Directions::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Directions.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::DirectionsRoute >&
Directions::routes() const {
  // @@protoc_insertion_point(field_list:valhalla.Directions.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

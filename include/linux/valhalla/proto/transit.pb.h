// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit.proto

#ifndef PROTOBUF_transit_2eproto__INCLUDED
#define PROTOBUF_transit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace mjolnir {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transit_2eproto();
void protobuf_AssignDesc_transit_2eproto();
void protobuf_ShutdownFile_transit_2eproto();

class Transit;
class Transit_Node;
class Transit_Route;
class Transit_Shape;
class Transit_StopPair;

enum Transit_VehicleType {
  Transit_VehicleType_kTram = 0,
  Transit_VehicleType_kMetro = 1,
  Transit_VehicleType_kRail = 2,
  Transit_VehicleType_kBus = 3,
  Transit_VehicleType_kFerry = 4,
  Transit_VehicleType_kCableCar = 5,
  Transit_VehicleType_kGondola = 6,
  Transit_VehicleType_kFunicular = 7
};
bool Transit_VehicleType_IsValid(int value);
const Transit_VehicleType Transit_VehicleType_VehicleType_MIN = Transit_VehicleType_kTram;
const Transit_VehicleType Transit_VehicleType_VehicleType_MAX = Transit_VehicleType_kFunicular;
const int Transit_VehicleType_VehicleType_ARRAYSIZE = Transit_VehicleType_VehicleType_MAX + 1;

// ===================================================================

class Transit_Node : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit.Node) */ {
 public:
  Transit_Node();
  virtual ~Transit_Node();

  Transit_Node(const Transit_Node& from);

  inline Transit_Node& operator=(const Transit_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Transit_Node& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transit_Node* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transit_Node* other);

  // implements Message ----------------------------------------------

  inline Transit_Node* New() const { return New(NULL); }

  Transit_Node* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transit_Node& from);
  void MergeFrom(const Transit_Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float lon = 1;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 1;
  float lon() const;
  void set_lon(float value);

  // optional float lat = 2;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  float lat() const;
  void set_lat(float value);

  // optional uint32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint64 graphid = 4;
  bool has_graphid() const;
  void clear_graphid();
  static const int kGraphidFieldNumber = 4;
  ::google::protobuf::uint64 graphid() const;
  void set_graphid(::google::protobuf::uint64 value);

  // optional uint64 prev_type_graphid = 5;
  bool has_prev_type_graphid() const;
  void clear_prev_type_graphid();
  static const int kPrevTypeGraphidFieldNumber = 5;
  ::google::protobuf::uint64 prev_type_graphid() const;
  void set_prev_type_graphid(::google::protobuf::uint64 value);

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string onestop_id = 7;
  bool has_onestop_id() const;
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 7;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional uint64 osm_way_id = 8;
  bool has_osm_way_id() const;
  void clear_osm_way_id();
  static const int kOsmWayIdFieldNumber = 8;
  ::google::protobuf::uint64 osm_way_id() const;
  void set_osm_way_id(::google::protobuf::uint64 value);

  // optional string timezone = 9;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 9;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional bool wheelchair_boarding = 10;
  bool has_wheelchair_boarding() const;
  void clear_wheelchair_boarding();
  static const int kWheelchairBoardingFieldNumber = 10;
  bool wheelchair_boarding() const;
  void set_wheelchair_boarding(bool value);

  // optional bool generated = 11;
  bool has_generated() const;
  void clear_generated();
  static const int kGeneratedFieldNumber = 11;
  bool generated() const;
  void set_generated(bool value);

  // optional uint32 traversability = 12;
  bool has_traversability() const;
  void clear_traversability();
  static const int kTraversabilityFieldNumber = 12;
  ::google::protobuf::uint32 traversability() const;
  void set_traversability(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Node)
 private:
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_graphid();
  inline void clear_has_graphid();
  inline void set_has_prev_type_graphid();
  inline void clear_has_prev_type_graphid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_onestop_id();
  inline void clear_has_onestop_id();
  inline void set_has_osm_way_id();
  inline void clear_has_osm_way_id();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_wheelchair_boarding();
  inline void clear_has_wheelchair_boarding();
  inline void set_has_generated();
  inline void clear_has_generated();
  inline void set_has_traversability();
  inline void clear_has_traversability();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float lon_;
  float lat_;
  ::google::protobuf::uint64 graphid_;
  ::google::protobuf::uint64 prev_type_graphid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  ::google::protobuf::uint64 osm_way_id_;
  ::google::protobuf::uint32 type_;
  bool wheelchair_boarding_;
  bool generated_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::uint32 traversability_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_transit_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_transit_2eproto();
  #endif
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Node* default_instance_;
};
// -------------------------------------------------------------------

class Transit_StopPair : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit.StopPair) */ {
 public:
  Transit_StopPair();
  virtual ~Transit_StopPair();

  Transit_StopPair(const Transit_StopPair& from);

  inline Transit_StopPair& operator=(const Transit_StopPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Transit_StopPair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transit_StopPair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transit_StopPair* other);

  // implements Message ----------------------------------------------

  inline Transit_StopPair* New() const { return New(NULL); }

  Transit_StopPair* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transit_StopPair& from);
  void MergeFrom(const Transit_StopPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_StopPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bikes_allowed = 1;
  bool has_bikes_allowed() const;
  void clear_bikes_allowed();
  static const int kBikesAllowedFieldNumber = 1;
  bool bikes_allowed() const;
  void set_bikes_allowed(bool value);

  // optional uint32 block_id = 2;
  bool has_block_id() const;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  ::google::protobuf::uint32 block_id() const;
  void set_block_id(::google::protobuf::uint32 value);

  // optional uint32 destination_arrival_time = 3;
  bool has_destination_arrival_time() const;
  void clear_destination_arrival_time();
  static const int kDestinationArrivalTimeFieldNumber = 3;
  ::google::protobuf::uint32 destination_arrival_time() const;
  void set_destination_arrival_time(::google::protobuf::uint32 value);

  // optional uint64 destination_graphid = 4;
  bool has_destination_graphid() const;
  void clear_destination_graphid();
  static const int kDestinationGraphidFieldNumber = 4;
  ::google::protobuf::uint64 destination_graphid() const;
  void set_destination_graphid(::google::protobuf::uint64 value);

  // optional string destination_onestop_id = 5;
  bool has_destination_onestop_id() const;
  void clear_destination_onestop_id();
  static const int kDestinationOnestopIdFieldNumber = 5;
  const ::std::string& destination_onestop_id() const;
  void set_destination_onestop_id(const ::std::string& value);
  void set_destination_onestop_id(const char* value);
  void set_destination_onestop_id(const char* value, size_t size);
  ::std::string* mutable_destination_onestop_id();
  ::std::string* release_destination_onestop_id();
  void set_allocated_destination_onestop_id(::std::string* destination_onestop_id);

  // optional string operated_by_onestop_id = 6;
  bool has_operated_by_onestop_id() const;
  void clear_operated_by_onestop_id();
  static const int kOperatedByOnestopIdFieldNumber = 6;
  const ::std::string& operated_by_onestop_id() const;
  void set_operated_by_onestop_id(const ::std::string& value);
  void set_operated_by_onestop_id(const char* value);
  void set_operated_by_onestop_id(const char* value, size_t size);
  ::std::string* mutable_operated_by_onestop_id();
  ::std::string* release_operated_by_onestop_id();
  void set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id);

  // optional uint32 origin_departure_time = 7;
  bool has_origin_departure_time() const;
  void clear_origin_departure_time();
  static const int kOriginDepartureTimeFieldNumber = 7;
  ::google::protobuf::uint32 origin_departure_time() const;
  void set_origin_departure_time(::google::protobuf::uint32 value);

  // optional uint64 origin_graphid = 8;
  bool has_origin_graphid() const;
  void clear_origin_graphid();
  static const int kOriginGraphidFieldNumber = 8;
  ::google::protobuf::uint64 origin_graphid() const;
  void set_origin_graphid(::google::protobuf::uint64 value);

  // optional string origin_onestop_id = 9;
  bool has_origin_onestop_id() const;
  void clear_origin_onestop_id();
  static const int kOriginOnestopIdFieldNumber = 9;
  const ::std::string& origin_onestop_id() const;
  void set_origin_onestop_id(const ::std::string& value);
  void set_origin_onestop_id(const char* value);
  void set_origin_onestop_id(const char* value, size_t size);
  ::std::string* mutable_origin_onestop_id();
  ::std::string* release_origin_onestop_id();
  void set_allocated_origin_onestop_id(::std::string* origin_onestop_id);

  // optional uint32 route_index = 10;
  bool has_route_index() const;
  void clear_route_index();
  static const int kRouteIndexFieldNumber = 10;
  ::google::protobuf::uint32 route_index() const;
  void set_route_index(::google::protobuf::uint32 value);

  // repeated uint32 service_added_dates = 11;
  int service_added_dates_size() const;
  void clear_service_added_dates();
  static const int kServiceAddedDatesFieldNumber = 11;
  ::google::protobuf::uint32 service_added_dates(int index) const;
  void set_service_added_dates(int index, ::google::protobuf::uint32 value);
  void add_service_added_dates(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      service_added_dates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_service_added_dates();

  // repeated bool service_days_of_week = 12;
  int service_days_of_week_size() const;
  void clear_service_days_of_week();
  static const int kServiceDaysOfWeekFieldNumber = 12;
  bool service_days_of_week(int index) const;
  void set_service_days_of_week(int index, bool value);
  void add_service_days_of_week(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      service_days_of_week() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_service_days_of_week();

  // optional uint32 service_end_date = 13;
  bool has_service_end_date() const;
  void clear_service_end_date();
  static const int kServiceEndDateFieldNumber = 13;
  ::google::protobuf::uint32 service_end_date() const;
  void set_service_end_date(::google::protobuf::uint32 value);

  // repeated uint32 service_except_dates = 14;
  int service_except_dates_size() const;
  void clear_service_except_dates();
  static const int kServiceExceptDatesFieldNumber = 14;
  ::google::protobuf::uint32 service_except_dates(int index) const;
  void set_service_except_dates(int index, ::google::protobuf::uint32 value);
  void add_service_except_dates(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      service_except_dates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_service_except_dates();

  // optional uint32 service_start_date = 15;
  bool has_service_start_date() const;
  void clear_service_start_date();
  static const int kServiceStartDateFieldNumber = 15;
  ::google::protobuf::uint32 service_start_date() const;
  void set_service_start_date(::google::protobuf::uint32 value);

  // optional string trip_headsign = 16;
  bool has_trip_headsign() const;
  void clear_trip_headsign();
  static const int kTripHeadsignFieldNumber = 16;
  const ::std::string& trip_headsign() const;
  void set_trip_headsign(const ::std::string& value);
  void set_trip_headsign(const char* value);
  void set_trip_headsign(const char* value, size_t size);
  ::std::string* mutable_trip_headsign();
  ::std::string* release_trip_headsign();
  void set_allocated_trip_headsign(::std::string* trip_headsign);

  // optional uint32 trip_id = 17;
  bool has_trip_id() const;
  void clear_trip_id();
  static const int kTripIdFieldNumber = 17;
  ::google::protobuf::uint32 trip_id() const;
  void set_trip_id(::google::protobuf::uint32 value);

  // optional bool wheelchair_accessible = 18;
  bool has_wheelchair_accessible() const;
  void clear_wheelchair_accessible();
  static const int kWheelchairAccessibleFieldNumber = 18;
  bool wheelchair_accessible() const;
  void set_wheelchair_accessible(bool value);

  // optional uint32 shape_id = 20;
  bool has_shape_id() const;
  void clear_shape_id();
  static const int kShapeIdFieldNumber = 20;
  ::google::protobuf::uint32 shape_id() const;
  void set_shape_id(::google::protobuf::uint32 value);

  // optional float origin_dist_traveled = 21;
  bool has_origin_dist_traveled() const;
  void clear_origin_dist_traveled();
  static const int kOriginDistTraveledFieldNumber = 21;
  float origin_dist_traveled() const;
  void set_origin_dist_traveled(float value);

  // optional float destination_dist_traveled = 22;
  bool has_destination_dist_traveled() const;
  void clear_destination_dist_traveled();
  static const int kDestinationDistTraveledFieldNumber = 22;
  float destination_dist_traveled() const;
  void set_destination_dist_traveled(float value);

  // optional uint32 frequency_end_time = 23;
  bool has_frequency_end_time() const;
  void clear_frequency_end_time();
  static const int kFrequencyEndTimeFieldNumber = 23;
  ::google::protobuf::uint32 frequency_end_time() const;
  void set_frequency_end_time(::google::protobuf::uint32 value);

  // optional uint32 frequency_headway_seconds = 24;
  bool has_frequency_headway_seconds() const;
  void clear_frequency_headway_seconds();
  static const int kFrequencyHeadwaySecondsFieldNumber = 24;
  ::google::protobuf::uint32 frequency_headway_seconds() const;
  void set_frequency_headway_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.StopPair)
 private:
  inline void set_has_bikes_allowed();
  inline void clear_has_bikes_allowed();
  inline void set_has_block_id();
  inline void clear_has_block_id();
  inline void set_has_destination_arrival_time();
  inline void clear_has_destination_arrival_time();
  inline void set_has_destination_graphid();
  inline void clear_has_destination_graphid();
  inline void set_has_destination_onestop_id();
  inline void clear_has_destination_onestop_id();
  inline void set_has_operated_by_onestop_id();
  inline void clear_has_operated_by_onestop_id();
  inline void set_has_origin_departure_time();
  inline void clear_has_origin_departure_time();
  inline void set_has_origin_graphid();
  inline void clear_has_origin_graphid();
  inline void set_has_origin_onestop_id();
  inline void clear_has_origin_onestop_id();
  inline void set_has_route_index();
  inline void clear_has_route_index();
  inline void set_has_service_end_date();
  inline void clear_has_service_end_date();
  inline void set_has_service_start_date();
  inline void clear_has_service_start_date();
  inline void set_has_trip_headsign();
  inline void clear_has_trip_headsign();
  inline void set_has_trip_id();
  inline void clear_has_trip_id();
  inline void set_has_wheelchair_accessible();
  inline void clear_has_wheelchair_accessible();
  inline void set_has_shape_id();
  inline void clear_has_shape_id();
  inline void set_has_origin_dist_traveled();
  inline void clear_has_origin_dist_traveled();
  inline void set_has_destination_dist_traveled();
  inline void clear_has_destination_dist_traveled();
  inline void set_has_frequency_end_time();
  inline void clear_has_frequency_end_time();
  inline void set_has_frequency_headway_seconds();
  inline void clear_has_frequency_headway_seconds();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 block_id_;
  ::google::protobuf::uint32 destination_arrival_time_;
  ::google::protobuf::uint64 destination_graphid_;
  ::google::protobuf::internal::ArenaStringPtr destination_onestop_id_;
  ::google::protobuf::internal::ArenaStringPtr operated_by_onestop_id_;
  ::google::protobuf::uint64 origin_graphid_;
  ::google::protobuf::uint32 origin_departure_time_;
  bool bikes_allowed_;
  bool wheelchair_accessible_;
  ::google::protobuf::internal::ArenaStringPtr origin_onestop_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > service_added_dates_;
  ::google::protobuf::uint32 route_index_;
  ::google::protobuf::uint32 service_end_date_;
  ::google::protobuf::RepeatedField< bool > service_days_of_week_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > service_except_dates_;
  ::google::protobuf::internal::ArenaStringPtr trip_headsign_;
  ::google::protobuf::uint32 service_start_date_;
  ::google::protobuf::uint32 trip_id_;
  ::google::protobuf::uint32 shape_id_;
  float origin_dist_traveled_;
  float destination_dist_traveled_;
  ::google::protobuf::uint32 frequency_end_time_;
  ::google::protobuf::uint32 frequency_headway_seconds_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_transit_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_transit_2eproto();
  #endif
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_StopPair* default_instance_;
};
// -------------------------------------------------------------------

class Transit_Route : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit.Route) */ {
 public:
  Transit_Route();
  virtual ~Transit_Route();

  Transit_Route(const Transit_Route& from);

  inline Transit_Route& operator=(const Transit_Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Transit_Route& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transit_Route* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transit_Route* other);

  // implements Message ----------------------------------------------

  inline Transit_Route* New() const { return New(NULL); }

  Transit_Route* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transit_Route& from);
  void MergeFrom(const Transit_Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string onestop_id = 2;
  bool has_onestop_id() const;
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 2;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional string operated_by_name = 3;
  bool has_operated_by_name() const;
  void clear_operated_by_name();
  static const int kOperatedByNameFieldNumber = 3;
  const ::std::string& operated_by_name() const;
  void set_operated_by_name(const ::std::string& value);
  void set_operated_by_name(const char* value);
  void set_operated_by_name(const char* value, size_t size);
  ::std::string* mutable_operated_by_name();
  ::std::string* release_operated_by_name();
  void set_allocated_operated_by_name(::std::string* operated_by_name);

  // optional string operated_by_onestop_id = 4;
  bool has_operated_by_onestop_id() const;
  void clear_operated_by_onestop_id();
  static const int kOperatedByOnestopIdFieldNumber = 4;
  const ::std::string& operated_by_onestop_id() const;
  void set_operated_by_onestop_id(const ::std::string& value);
  void set_operated_by_onestop_id(const char* value);
  void set_operated_by_onestop_id(const char* value, size_t size);
  ::std::string* mutable_operated_by_onestop_id();
  ::std::string* release_operated_by_onestop_id();
  void set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id);

  // optional string operated_by_website = 5;
  bool has_operated_by_website() const;
  void clear_operated_by_website();
  static const int kOperatedByWebsiteFieldNumber = 5;
  const ::std::string& operated_by_website() const;
  void set_operated_by_website(const ::std::string& value);
  void set_operated_by_website(const char* value);
  void set_operated_by_website(const char* value, size_t size);
  ::std::string* mutable_operated_by_website();
  ::std::string* release_operated_by_website();
  void set_allocated_operated_by_website(::std::string* operated_by_website);

  // optional uint32 route_color = 6;
  bool has_route_color() const;
  void clear_route_color();
  static const int kRouteColorFieldNumber = 6;
  ::google::protobuf::uint32 route_color() const;
  void set_route_color(::google::protobuf::uint32 value);

  // optional string route_desc = 7;
  bool has_route_desc() const;
  void clear_route_desc();
  static const int kRouteDescFieldNumber = 7;
  const ::std::string& route_desc() const;
  void set_route_desc(const ::std::string& value);
  void set_route_desc(const char* value);
  void set_route_desc(const char* value, size_t size);
  ::std::string* mutable_route_desc();
  ::std::string* release_route_desc();
  void set_allocated_route_desc(::std::string* route_desc);

  // optional string route_long_name = 8;
  bool has_route_long_name() const;
  void clear_route_long_name();
  static const int kRouteLongNameFieldNumber = 8;
  const ::std::string& route_long_name() const;
  void set_route_long_name(const ::std::string& value);
  void set_route_long_name(const char* value);
  void set_route_long_name(const char* value, size_t size);
  ::std::string* mutable_route_long_name();
  ::std::string* release_route_long_name();
  void set_allocated_route_long_name(::std::string* route_long_name);

  // optional uint32 route_text_color = 9;
  bool has_route_text_color() const;
  void clear_route_text_color();
  static const int kRouteTextColorFieldNumber = 9;
  ::google::protobuf::uint32 route_text_color() const;
  void set_route_text_color(::google::protobuf::uint32 value);

  // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
  bool has_vehicle_type() const;
  void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 10;
  ::valhalla::mjolnir::Transit_VehicleType vehicle_type() const;
  void set_vehicle_type(::valhalla::mjolnir::Transit_VehicleType value);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Route)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_onestop_id();
  inline void clear_has_onestop_id();
  inline void set_has_operated_by_name();
  inline void clear_has_operated_by_name();
  inline void set_has_operated_by_onestop_id();
  inline void clear_has_operated_by_onestop_id();
  inline void set_has_operated_by_website();
  inline void clear_has_operated_by_website();
  inline void set_has_route_color();
  inline void clear_has_route_color();
  inline void set_has_route_desc();
  inline void clear_has_route_desc();
  inline void set_has_route_long_name();
  inline void clear_has_route_long_name();
  inline void set_has_route_text_color();
  inline void clear_has_route_text_color();
  inline void set_has_vehicle_type();
  inline void clear_has_vehicle_type();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  ::google::protobuf::internal::ArenaStringPtr operated_by_name_;
  ::google::protobuf::internal::ArenaStringPtr operated_by_onestop_id_;
  ::google::protobuf::internal::ArenaStringPtr operated_by_website_;
  ::google::protobuf::internal::ArenaStringPtr route_desc_;
  ::google::protobuf::uint32 route_color_;
  ::google::protobuf::uint32 route_text_color_;
  ::google::protobuf::internal::ArenaStringPtr route_long_name_;
  int vehicle_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_transit_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_transit_2eproto();
  #endif
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Route* default_instance_;
};
// -------------------------------------------------------------------

class Transit_Shape : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit.Shape) */ {
 public:
  Transit_Shape();
  virtual ~Transit_Shape();

  Transit_Shape(const Transit_Shape& from);

  inline Transit_Shape& operator=(const Transit_Shape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Transit_Shape& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transit_Shape* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transit_Shape* other);

  // implements Message ----------------------------------------------

  inline Transit_Shape* New() const { return New(NULL); }

  Transit_Shape* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transit_Shape& from);
  void MergeFrom(const Transit_Shape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 shape_id = 1;
  bool has_shape_id() const;
  void clear_shape_id();
  static const int kShapeIdFieldNumber = 1;
  ::google::protobuf::uint32 shape_id() const;
  void set_shape_id(::google::protobuf::uint32 value);

  // optional bytes encoded_shape = 2;
  bool has_encoded_shape() const;
  void clear_encoded_shape();
  static const int kEncodedShapeFieldNumber = 2;
  const ::std::string& encoded_shape() const;
  void set_encoded_shape(const ::std::string& value);
  void set_encoded_shape(const char* value);
  void set_encoded_shape(const void* value, size_t size);
  ::std::string* mutable_encoded_shape();
  ::std::string* release_encoded_shape();
  void set_allocated_encoded_shape(::std::string* encoded_shape);

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit.Shape)
 private:
  inline void set_has_shape_id();
  inline void clear_has_shape_id();
  inline void set_has_encoded_shape();
  inline void clear_has_encoded_shape();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr encoded_shape_;
  ::google::protobuf::uint32 shape_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_transit_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_transit_2eproto();
  #endif
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit_Shape* default_instance_;
};
// -------------------------------------------------------------------

class Transit : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit) */ {
 public:
  Transit();
  virtual ~Transit();

  Transit(const Transit& from);

  inline Transit& operator=(const Transit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Transit& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Transit* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Transit* other);

  // implements Message ----------------------------------------------

  inline Transit* New() const { return New(NULL); }

  Transit* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Transit& from);
  void MergeFrom(const Transit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Transit_Node Node;
  typedef Transit_StopPair StopPair;
  typedef Transit_Route Route;
  typedef Transit_Shape Shape;

  typedef Transit_VehicleType VehicleType;
  static const VehicleType kTram =
    Transit_VehicleType_kTram;
  static const VehicleType kMetro =
    Transit_VehicleType_kMetro;
  static const VehicleType kRail =
    Transit_VehicleType_kRail;
  static const VehicleType kBus =
    Transit_VehicleType_kBus;
  static const VehicleType kFerry =
    Transit_VehicleType_kFerry;
  static const VehicleType kCableCar =
    Transit_VehicleType_kCableCar;
  static const VehicleType kGondola =
    Transit_VehicleType_kGondola;
  static const VehicleType kFunicular =
    Transit_VehicleType_kFunicular;
  static inline bool VehicleType_IsValid(int value) {
    return Transit_VehicleType_IsValid(value);
  }
  static const VehicleType VehicleType_MIN =
    Transit_VehicleType_VehicleType_MIN;
  static const VehicleType VehicleType_MAX =
    Transit_VehicleType_VehicleType_MAX;
  static const int VehicleType_ARRAYSIZE =
    Transit_VehicleType_VehicleType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .valhalla.mjolnir.Transit.Node nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::valhalla::mjolnir::Transit_Node& nodes(int index) const;
  ::valhalla::mjolnir::Transit_Node* mutable_nodes(int index);
  ::valhalla::mjolnir::Transit_Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Node >&
      nodes() const;

  // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
  int stop_pairs_size() const;
  void clear_stop_pairs();
  static const int kStopPairsFieldNumber = 2;
  const ::valhalla::mjolnir::Transit_StopPair& stop_pairs(int index) const;
  ::valhalla::mjolnir::Transit_StopPair* mutable_stop_pairs(int index);
  ::valhalla::mjolnir::Transit_StopPair* add_stop_pairs();
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >*
      mutable_stop_pairs();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >&
      stop_pairs() const;

  // repeated .valhalla.mjolnir.Transit.Route routes = 3;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 3;
  const ::valhalla::mjolnir::Transit_Route& routes(int index) const;
  ::valhalla::mjolnir::Transit_Route* mutable_routes(int index);
  ::valhalla::mjolnir::Transit_Route* add_routes();
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >*
      mutable_routes();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >&
      routes() const;

  // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
  int shapes_size() const;
  void clear_shapes();
  static const int kShapesFieldNumber = 4;
  const ::valhalla::mjolnir::Transit_Shape& shapes(int index) const;
  ::valhalla::mjolnir::Transit_Shape* mutable_shapes(int index);
  ::valhalla::mjolnir::Transit_Shape* add_shapes();
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >*
      mutable_shapes();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >&
      shapes() const;

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair > stop_pairs_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route > routes_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape > shapes_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_transit_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_transit_2eproto();
  #endif
  friend void protobuf_AssignDesc_transit_2eproto();
  friend void protobuf_ShutdownFile_transit_2eproto();

  void InitAsDefaultInstance();
  static Transit* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Transit_Node

// optional float lon = 1;
inline bool Transit_Node::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Node::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Node::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Node::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline float Transit_Node::lon() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.lon)
  return lon_;
}
inline void Transit_Node::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.lon)
}

// optional float lat = 2;
inline bool Transit_Node::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Node::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Node::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Node::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float Transit_Node::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.lat)
  return lat_;
}
inline void Transit_Node::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.lat)
}

// optional uint32 type = 3;
inline bool Transit_Node::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_Node::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_Node::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_Node::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Transit_Node::type() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.type)
  return type_;
}
inline void Transit_Node::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.type)
}

// optional uint64 graphid = 4;
inline bool Transit_Node::has_graphid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_Node::set_has_graphid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_Node::clear_has_graphid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_Node::clear_graphid() {
  graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_graphid();
}
inline ::google::protobuf::uint64 Transit_Node::graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.graphid)
  return graphid_;
}
inline void Transit_Node::set_graphid(::google::protobuf::uint64 value) {
  set_has_graphid();
  graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.graphid)
}

// optional uint64 prev_type_graphid = 5;
inline bool Transit_Node::has_prev_type_graphid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_Node::set_has_prev_type_graphid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_Node::clear_has_prev_type_graphid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_Node::clear_prev_type_graphid() {
  prev_type_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_type_graphid();
}
inline ::google::protobuf::uint64 Transit_Node::prev_type_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.prev_type_graphid)
  return prev_type_graphid_;
}
inline void Transit_Node::set_prev_type_graphid(::google::protobuf::uint64 value) {
  set_has_prev_type_graphid();
  prev_type_graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.prev_type_graphid)
}

// optional string name = 6;
inline bool Transit_Node::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_Node::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Transit_Node::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.name)
}
inline void Transit_Node::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Node.name)
}
inline void Transit_Node::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Node.name)
}
inline ::std::string* Transit_Node::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Node::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Node.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Node.name)
}

// optional string onestop_id = 7;
inline bool Transit_Node::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_Node::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_Node::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_Node::clear_onestop_id() {
  onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onestop_id();
}
inline const ::std::string& Transit_Node::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.onestop_id)
  return onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.onestop_id)
}
inline void Transit_Node::set_onestop_id(const char* value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Node.onestop_id)
}
inline void Transit_Node::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Node.onestop_id)
}
inline ::std::string* Transit_Node::mutable_onestop_id() {
  set_has_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Node.onestop_id)
  return onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Node::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Node.onestop_id)
  clear_has_onestop_id();
  return onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id != NULL) {
    set_has_onestop_id();
  } else {
    clear_has_onestop_id();
  }
  onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Node.onestop_id)
}

// optional uint64 osm_way_id = 8;
inline bool Transit_Node::has_osm_way_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_Node::set_has_osm_way_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_Node::clear_has_osm_way_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_Node::clear_osm_way_id() {
  osm_way_id_ = GOOGLE_ULONGLONG(0);
  clear_has_osm_way_id();
}
inline ::google::protobuf::uint64 Transit_Node::osm_way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.osm_way_id)
  return osm_way_id_;
}
inline void Transit_Node::set_osm_way_id(::google::protobuf::uint64 value) {
  set_has_osm_way_id();
  osm_way_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.osm_way_id)
}

// optional string timezone = 9;
inline bool Transit_Node::has_timezone() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transit_Node::set_has_timezone() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transit_Node::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transit_Node::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& Transit_Node::timezone() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.timezone)
}
inline void Transit_Node::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Node.timezone)
}
inline void Transit_Node::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Node.timezone)
}
inline ::std::string* Transit_Node::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Node.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Node::release_timezone() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Node.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Node::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Node.timezone)
}

// optional bool wheelchair_boarding = 10;
inline bool Transit_Node::has_wheelchair_boarding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transit_Node::set_has_wheelchair_boarding() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transit_Node::clear_has_wheelchair_boarding() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transit_Node::clear_wheelchair_boarding() {
  wheelchair_boarding_ = false;
  clear_has_wheelchair_boarding();
}
inline bool Transit_Node::wheelchair_boarding() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.wheelchair_boarding)
  return wheelchair_boarding_;
}
inline void Transit_Node::set_wheelchair_boarding(bool value) {
  set_has_wheelchair_boarding();
  wheelchair_boarding_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.wheelchair_boarding)
}

// optional bool generated = 11;
inline bool Transit_Node::has_generated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Transit_Node::set_has_generated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Transit_Node::clear_has_generated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Transit_Node::clear_generated() {
  generated_ = false;
  clear_has_generated();
}
inline bool Transit_Node::generated() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.generated)
  return generated_;
}
inline void Transit_Node::set_generated(bool value) {
  set_has_generated();
  generated_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.generated)
}

// optional uint32 traversability = 12;
inline bool Transit_Node::has_traversability() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Transit_Node::set_has_traversability() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Transit_Node::clear_has_traversability() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Transit_Node::clear_traversability() {
  traversability_ = 0u;
  clear_has_traversability();
}
inline ::google::protobuf::uint32 Transit_Node::traversability() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Node.traversability)
  return traversability_;
}
inline void Transit_Node::set_traversability(::google::protobuf::uint32 value) {
  set_has_traversability();
  traversability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Node.traversability)
}

// -------------------------------------------------------------------

// Transit_StopPair

// optional bool bikes_allowed = 1;
inline bool Transit_StopPair::has_bikes_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_StopPair::set_has_bikes_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_StopPair::clear_has_bikes_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_StopPair::clear_bikes_allowed() {
  bikes_allowed_ = false;
  clear_has_bikes_allowed();
}
inline bool Transit_StopPair::bikes_allowed() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.bikes_allowed)
  return bikes_allowed_;
}
inline void Transit_StopPair::set_bikes_allowed(bool value) {
  set_has_bikes_allowed();
  bikes_allowed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.bikes_allowed)
}

// optional uint32 block_id = 2;
inline bool Transit_StopPair::has_block_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_StopPair::set_has_block_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_StopPair::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_StopPair::clear_block_id() {
  block_id_ = 0u;
  clear_has_block_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.block_id)
  return block_id_;
}
inline void Transit_StopPair::set_block_id(::google::protobuf::uint32 value) {
  set_has_block_id();
  block_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.block_id)
}

// optional uint32 destination_arrival_time = 3;
inline bool Transit_StopPair::has_destination_arrival_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_StopPair::set_has_destination_arrival_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_StopPair::clear_has_destination_arrival_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_StopPair::clear_destination_arrival_time() {
  destination_arrival_time_ = 0u;
  clear_has_destination_arrival_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::destination_arrival_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.destination_arrival_time)
  return destination_arrival_time_;
}
inline void Transit_StopPair::set_destination_arrival_time(::google::protobuf::uint32 value) {
  set_has_destination_arrival_time();
  destination_arrival_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.destination_arrival_time)
}

// optional uint64 destination_graphid = 4;
inline bool Transit_StopPair::has_destination_graphid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_StopPair::set_has_destination_graphid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_StopPair::clear_has_destination_graphid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_StopPair::clear_destination_graphid() {
  destination_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_destination_graphid();
}
inline ::google::protobuf::uint64 Transit_StopPair::destination_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.destination_graphid)
  return destination_graphid_;
}
inline void Transit_StopPair::set_destination_graphid(::google::protobuf::uint64 value) {
  set_has_destination_graphid();
  destination_graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.destination_graphid)
}

// optional string destination_onestop_id = 5;
inline bool Transit_StopPair::has_destination_onestop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_StopPair::set_has_destination_onestop_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_StopPair::clear_has_destination_onestop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_StopPair::clear_destination_onestop_id() {
  destination_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_onestop_id();
}
inline const ::std::string& Transit_StopPair::destination_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
  return destination_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_destination_onestop_id(const ::std::string& value) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
}
inline void Transit_StopPair::set_destination_onestop_id(const char* value) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
}
inline void Transit_StopPair::set_destination_onestop_id(const char* value, size_t size) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
}
inline ::std::string* Transit_StopPair::mutable_destination_onestop_id() {
  set_has_destination_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
  return destination_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_StopPair::release_destination_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
  clear_has_destination_onestop_id();
  return destination_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_allocated_destination_onestop_id(::std::string* destination_onestop_id) {
  if (destination_onestop_id != NULL) {
    set_has_destination_onestop_id();
  } else {
    clear_has_destination_onestop_id();
  }
  destination_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.StopPair.destination_onestop_id)
}

// optional string operated_by_onestop_id = 6;
inline bool Transit_StopPair::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_StopPair::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_StopPair::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_StopPair::clear_operated_by_onestop_id() {
  operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_onestop_id();
}
inline const ::std::string& Transit_StopPair::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
  return operated_by_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
}
inline void Transit_StopPair::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
}
inline void Transit_StopPair::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
}
inline ::std::string* Transit_StopPair::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
  return operated_by_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_StopPair::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
  clear_has_operated_by_onestop_id();
  return operated_by_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != NULL) {
    set_has_operated_by_onestop_id();
  } else {
    clear_has_operated_by_onestop_id();
  }
  operated_by_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.StopPair.operated_by_onestop_id)
}

// optional uint32 origin_departure_time = 7;
inline bool Transit_StopPair::has_origin_departure_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_StopPair::set_has_origin_departure_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_StopPair::clear_has_origin_departure_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_StopPair::clear_origin_departure_time() {
  origin_departure_time_ = 0u;
  clear_has_origin_departure_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::origin_departure_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.origin_departure_time)
  return origin_departure_time_;
}
inline void Transit_StopPair::set_origin_departure_time(::google::protobuf::uint32 value) {
  set_has_origin_departure_time();
  origin_departure_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.origin_departure_time)
}

// optional uint64 origin_graphid = 8;
inline bool Transit_StopPair::has_origin_graphid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_StopPair::set_has_origin_graphid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_StopPair::clear_has_origin_graphid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_StopPair::clear_origin_graphid() {
  origin_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_graphid();
}
inline ::google::protobuf::uint64 Transit_StopPair::origin_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.origin_graphid)
  return origin_graphid_;
}
inline void Transit_StopPair::set_origin_graphid(::google::protobuf::uint64 value) {
  set_has_origin_graphid();
  origin_graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.origin_graphid)
}

// optional string origin_onestop_id = 9;
inline bool Transit_StopPair::has_origin_onestop_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transit_StopPair::set_has_origin_onestop_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transit_StopPair::clear_has_origin_onestop_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transit_StopPair::clear_origin_onestop_id() {
  origin_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_onestop_id();
}
inline const ::std::string& Transit_StopPair::origin_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
  return origin_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_origin_onestop_id(const ::std::string& value) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
}
inline void Transit_StopPair::set_origin_onestop_id(const char* value) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
}
inline void Transit_StopPair::set_origin_onestop_id(const char* value, size_t size) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
}
inline ::std::string* Transit_StopPair::mutable_origin_onestop_id() {
  set_has_origin_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
  return origin_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_StopPair::release_origin_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
  clear_has_origin_onestop_id();
  return origin_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_allocated_origin_onestop_id(::std::string* origin_onestop_id) {
  if (origin_onestop_id != NULL) {
    set_has_origin_onestop_id();
  } else {
    clear_has_origin_onestop_id();
  }
  origin_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.StopPair.origin_onestop_id)
}

// optional uint32 route_index = 10;
inline bool Transit_StopPair::has_route_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transit_StopPair::set_has_route_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transit_StopPair::clear_has_route_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transit_StopPair::clear_route_index() {
  route_index_ = 0u;
  clear_has_route_index();
}
inline ::google::protobuf::uint32 Transit_StopPair::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.route_index)
  return route_index_;
}
inline void Transit_StopPair::set_route_index(::google::protobuf::uint32 value) {
  set_has_route_index();
  route_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.route_index)
}

// repeated uint32 service_added_dates = 11;
inline int Transit_StopPair::service_added_dates_size() const {
  return service_added_dates_.size();
}
inline void Transit_StopPair::clear_service_added_dates() {
  service_added_dates_.Clear();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_added_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.service_added_dates)
  return service_added_dates_.Get(index);
}
inline void Transit_StopPair::set_service_added_dates(int index, ::google::protobuf::uint32 value) {
  service_added_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.service_added_dates)
}
inline void Transit_StopPair::add_service_added_dates(::google::protobuf::uint32 value) {
  service_added_dates_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.StopPair.service_added_dates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_StopPair::service_added_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.StopPair.service_added_dates)
  return service_added_dates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_StopPair::mutable_service_added_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.StopPair.service_added_dates)
  return &service_added_dates_;
}

// repeated bool service_days_of_week = 12;
inline int Transit_StopPair::service_days_of_week_size() const {
  return service_days_of_week_.size();
}
inline void Transit_StopPair::clear_service_days_of_week() {
  service_days_of_week_.Clear();
}
inline bool Transit_StopPair::service_days_of_week(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.service_days_of_week)
  return service_days_of_week_.Get(index);
}
inline void Transit_StopPair::set_service_days_of_week(int index, bool value) {
  service_days_of_week_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.service_days_of_week)
}
inline void Transit_StopPair::add_service_days_of_week(bool value) {
  service_days_of_week_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.StopPair.service_days_of_week)
}
inline const ::google::protobuf::RepeatedField< bool >&
Transit_StopPair::service_days_of_week() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.StopPair.service_days_of_week)
  return service_days_of_week_;
}
inline ::google::protobuf::RepeatedField< bool >*
Transit_StopPair::mutable_service_days_of_week() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.StopPair.service_days_of_week)
  return &service_days_of_week_;
}

// optional uint32 service_end_date = 13;
inline bool Transit_StopPair::has_service_end_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Transit_StopPair::set_has_service_end_date() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Transit_StopPair::clear_has_service_end_date() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Transit_StopPair::clear_service_end_date() {
  service_end_date_ = 0u;
  clear_has_service_end_date();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_end_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.service_end_date)
  return service_end_date_;
}
inline void Transit_StopPair::set_service_end_date(::google::protobuf::uint32 value) {
  set_has_service_end_date();
  service_end_date_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.service_end_date)
}

// repeated uint32 service_except_dates = 14;
inline int Transit_StopPair::service_except_dates_size() const {
  return service_except_dates_.size();
}
inline void Transit_StopPair::clear_service_except_dates() {
  service_except_dates_.Clear();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_except_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.service_except_dates)
  return service_except_dates_.Get(index);
}
inline void Transit_StopPair::set_service_except_dates(int index, ::google::protobuf::uint32 value) {
  service_except_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.service_except_dates)
}
inline void Transit_StopPair::add_service_except_dates(::google::protobuf::uint32 value) {
  service_except_dates_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.StopPair.service_except_dates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_StopPair::service_except_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.StopPair.service_except_dates)
  return service_except_dates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_StopPair::mutable_service_except_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.StopPair.service_except_dates)
  return &service_except_dates_;
}

// optional uint32 service_start_date = 15;
inline bool Transit_StopPair::has_service_start_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Transit_StopPair::set_has_service_start_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Transit_StopPair::clear_has_service_start_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Transit_StopPair::clear_service_start_date() {
  service_start_date_ = 0u;
  clear_has_service_start_date();
}
inline ::google::protobuf::uint32 Transit_StopPair::service_start_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.service_start_date)
  return service_start_date_;
}
inline void Transit_StopPair::set_service_start_date(::google::protobuf::uint32 value) {
  set_has_service_start_date();
  service_start_date_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.service_start_date)
}

// optional string trip_headsign = 16;
inline bool Transit_StopPair::has_trip_headsign() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Transit_StopPair::set_has_trip_headsign() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Transit_StopPair::clear_has_trip_headsign() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Transit_StopPair::clear_trip_headsign() {
  trip_headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trip_headsign();
}
inline const ::std::string& Transit_StopPair::trip_headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.trip_headsign)
  return trip_headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_trip_headsign(const ::std::string& value) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.trip_headsign)
}
inline void Transit_StopPair::set_trip_headsign(const char* value) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.StopPair.trip_headsign)
}
inline void Transit_StopPair::set_trip_headsign(const char* value, size_t size) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.StopPair.trip_headsign)
}
inline ::std::string* Transit_StopPair::mutable_trip_headsign() {
  set_has_trip_headsign();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.StopPair.trip_headsign)
  return trip_headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_StopPair::release_trip_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.StopPair.trip_headsign)
  clear_has_trip_headsign();
  return trip_headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_StopPair::set_allocated_trip_headsign(::std::string* trip_headsign) {
  if (trip_headsign != NULL) {
    set_has_trip_headsign();
  } else {
    clear_has_trip_headsign();
  }
  trip_headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_headsign);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.StopPair.trip_headsign)
}

// optional uint32 trip_id = 17;
inline bool Transit_StopPair::has_trip_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Transit_StopPair::set_has_trip_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Transit_StopPair::clear_has_trip_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Transit_StopPair::clear_trip_id() {
  trip_id_ = 0u;
  clear_has_trip_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.trip_id)
  return trip_id_;
}
inline void Transit_StopPair::set_trip_id(::google::protobuf::uint32 value) {
  set_has_trip_id();
  trip_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.trip_id)
}

// optional bool wheelchair_accessible = 18;
inline bool Transit_StopPair::has_wheelchair_accessible() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Transit_StopPair::set_has_wheelchair_accessible() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Transit_StopPair::clear_has_wheelchair_accessible() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Transit_StopPair::clear_wheelchair_accessible() {
  wheelchair_accessible_ = false;
  clear_has_wheelchair_accessible();
}
inline bool Transit_StopPair::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.wheelchair_accessible)
  return wheelchair_accessible_;
}
inline void Transit_StopPair::set_wheelchair_accessible(bool value) {
  set_has_wheelchair_accessible();
  wheelchair_accessible_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.wheelchair_accessible)
}

// optional uint32 shape_id = 20;
inline bool Transit_StopPair::has_shape_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Transit_StopPair::set_has_shape_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Transit_StopPair::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Transit_StopPair::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
inline ::google::protobuf::uint32 Transit_StopPair::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.shape_id)
  return shape_id_;
}
inline void Transit_StopPair::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.shape_id)
}

// optional float origin_dist_traveled = 21;
inline bool Transit_StopPair::has_origin_dist_traveled() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Transit_StopPair::set_has_origin_dist_traveled() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Transit_StopPair::clear_has_origin_dist_traveled() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Transit_StopPair::clear_origin_dist_traveled() {
  origin_dist_traveled_ = 0;
  clear_has_origin_dist_traveled();
}
inline float Transit_StopPair::origin_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.origin_dist_traveled)
  return origin_dist_traveled_;
}
inline void Transit_StopPair::set_origin_dist_traveled(float value) {
  set_has_origin_dist_traveled();
  origin_dist_traveled_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.origin_dist_traveled)
}

// optional float destination_dist_traveled = 22;
inline bool Transit_StopPair::has_destination_dist_traveled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Transit_StopPair::set_has_destination_dist_traveled() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Transit_StopPair::clear_has_destination_dist_traveled() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Transit_StopPair::clear_destination_dist_traveled() {
  destination_dist_traveled_ = 0;
  clear_has_destination_dist_traveled();
}
inline float Transit_StopPair::destination_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.destination_dist_traveled)
  return destination_dist_traveled_;
}
inline void Transit_StopPair::set_destination_dist_traveled(float value) {
  set_has_destination_dist_traveled();
  destination_dist_traveled_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.destination_dist_traveled)
}

// optional uint32 frequency_end_time = 23;
inline bool Transit_StopPair::has_frequency_end_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Transit_StopPair::set_has_frequency_end_time() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Transit_StopPair::clear_has_frequency_end_time() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Transit_StopPair::clear_frequency_end_time() {
  frequency_end_time_ = 0u;
  clear_has_frequency_end_time();
}
inline ::google::protobuf::uint32 Transit_StopPair::frequency_end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.frequency_end_time)
  return frequency_end_time_;
}
inline void Transit_StopPair::set_frequency_end_time(::google::protobuf::uint32 value) {
  set_has_frequency_end_time();
  frequency_end_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.frequency_end_time)
}

// optional uint32 frequency_headway_seconds = 24;
inline bool Transit_StopPair::has_frequency_headway_seconds() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Transit_StopPair::set_has_frequency_headway_seconds() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Transit_StopPair::clear_has_frequency_headway_seconds() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Transit_StopPair::clear_frequency_headway_seconds() {
  frequency_headway_seconds_ = 0u;
  clear_has_frequency_headway_seconds();
}
inline ::google::protobuf::uint32 Transit_StopPair::frequency_headway_seconds() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.StopPair.frequency_headway_seconds)
  return frequency_headway_seconds_;
}
inline void Transit_StopPair::set_frequency_headway_seconds(::google::protobuf::uint32 value) {
  set_has_frequency_headway_seconds();
  frequency_headway_seconds_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.StopPair.frequency_headway_seconds)
}

// -------------------------------------------------------------------

// Transit_Route

// optional string name = 1;
inline bool Transit_Route::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Route::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Route::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Route::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Transit_Route::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.name)
}
inline void Transit_Route::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.name)
}
inline void Transit_Route::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.name)
}
inline ::std::string* Transit_Route::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.name)
}

// optional string onestop_id = 2;
inline bool Transit_Route::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Route::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Route::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Route::clear_onestop_id() {
  onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onestop_id();
}
inline const ::std::string& Transit_Route::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.onestop_id)
  return onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.onestop_id)
}
inline void Transit_Route::set_onestop_id(const char* value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.onestop_id)
}
inline void Transit_Route::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.onestop_id)
}
inline ::std::string* Transit_Route::mutable_onestop_id() {
  set_has_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.onestop_id)
  return onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.onestop_id)
  clear_has_onestop_id();
  return onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id != NULL) {
    set_has_onestop_id();
  } else {
    clear_has_onestop_id();
  }
  onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.onestop_id)
}

// optional string operated_by_name = 3;
inline bool Transit_Route::has_operated_by_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transit_Route::set_has_operated_by_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transit_Route::clear_has_operated_by_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transit_Route::clear_operated_by_name() {
  operated_by_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_name();
}
inline const ::std::string& Transit_Route::operated_by_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.operated_by_name)
  return operated_by_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_operated_by_name(const ::std::string& value) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.operated_by_name)
}
inline void Transit_Route::set_operated_by_name(const char* value) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.operated_by_name)
}
inline void Transit_Route::set_operated_by_name(const char* value, size_t size) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.operated_by_name)
}
inline ::std::string* Transit_Route::mutable_operated_by_name() {
  set_has_operated_by_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.operated_by_name)
  return operated_by_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_operated_by_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.operated_by_name)
  clear_has_operated_by_name();
  return operated_by_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_operated_by_name(::std::string* operated_by_name) {
  if (operated_by_name != NULL) {
    set_has_operated_by_name();
  } else {
    clear_has_operated_by_name();
  }
  operated_by_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.operated_by_name)
}

// optional string operated_by_onestop_id = 4;
inline bool Transit_Route::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transit_Route::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transit_Route::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transit_Route::clear_operated_by_onestop_id() {
  operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_onestop_id();
}
inline const ::std::string& Transit_Route::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
  return operated_by_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
}
inline void Transit_Route::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
}
inline void Transit_Route::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
}
inline ::std::string* Transit_Route::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
  return operated_by_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
  clear_has_operated_by_onestop_id();
  return operated_by_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != NULL) {
    set_has_operated_by_onestop_id();
  } else {
    clear_has_operated_by_onestop_id();
  }
  operated_by_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.operated_by_onestop_id)
}

// optional string operated_by_website = 5;
inline bool Transit_Route::has_operated_by_website() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transit_Route::set_has_operated_by_website() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transit_Route::clear_has_operated_by_website() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transit_Route::clear_operated_by_website() {
  operated_by_website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_website();
}
inline const ::std::string& Transit_Route::operated_by_website() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.operated_by_website)
  return operated_by_website_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_operated_by_website(const ::std::string& value) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.operated_by_website)
}
inline void Transit_Route::set_operated_by_website(const char* value) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.operated_by_website)
}
inline void Transit_Route::set_operated_by_website(const char* value, size_t size) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.operated_by_website)
}
inline ::std::string* Transit_Route::mutable_operated_by_website() {
  set_has_operated_by_website();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.operated_by_website)
  return operated_by_website_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_operated_by_website() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.operated_by_website)
  clear_has_operated_by_website();
  return operated_by_website_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_operated_by_website(::std::string* operated_by_website) {
  if (operated_by_website != NULL) {
    set_has_operated_by_website();
  } else {
    clear_has_operated_by_website();
  }
  operated_by_website_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_website);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.operated_by_website)
}

// optional uint32 route_color = 6;
inline bool Transit_Route::has_route_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transit_Route::set_has_route_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transit_Route::clear_has_route_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transit_Route::clear_route_color() {
  route_color_ = 0u;
  clear_has_route_color();
}
inline ::google::protobuf::uint32 Transit_Route::route_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.route_color)
  return route_color_;
}
inline void Transit_Route::set_route_color(::google::protobuf::uint32 value) {
  set_has_route_color();
  route_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.route_color)
}

// optional string route_desc = 7;
inline bool Transit_Route::has_route_desc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transit_Route::set_has_route_desc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transit_Route::clear_has_route_desc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transit_Route::clear_route_desc() {
  route_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_desc();
}
inline const ::std::string& Transit_Route::route_desc() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.route_desc)
  return route_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_route_desc(const ::std::string& value) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.route_desc)
}
inline void Transit_Route::set_route_desc(const char* value) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.route_desc)
}
inline void Transit_Route::set_route_desc(const char* value, size_t size) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.route_desc)
}
inline ::std::string* Transit_Route::mutable_route_desc() {
  set_has_route_desc();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.route_desc)
  return route_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_route_desc() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.route_desc)
  clear_has_route_desc();
  return route_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_route_desc(::std::string* route_desc) {
  if (route_desc != NULL) {
    set_has_route_desc();
  } else {
    clear_has_route_desc();
  }
  route_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_desc);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.route_desc)
}

// optional string route_long_name = 8;
inline bool Transit_Route::has_route_long_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transit_Route::set_has_route_long_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transit_Route::clear_has_route_long_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transit_Route::clear_route_long_name() {
  route_long_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_long_name();
}
inline const ::std::string& Transit_Route::route_long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.route_long_name)
  return route_long_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_route_long_name(const ::std::string& value) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.route_long_name)
}
inline void Transit_Route::set_route_long_name(const char* value) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Route.route_long_name)
}
inline void Transit_Route::set_route_long_name(const char* value, size_t size) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Route.route_long_name)
}
inline ::std::string* Transit_Route::mutable_route_long_name() {
  set_has_route_long_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Route.route_long_name)
  return route_long_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Route::release_route_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Route.route_long_name)
  clear_has_route_long_name();
  return route_long_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Route::set_allocated_route_long_name(::std::string* route_long_name) {
  if (route_long_name != NULL) {
    set_has_route_long_name();
  } else {
    clear_has_route_long_name();
  }
  route_long_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_long_name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Route.route_long_name)
}

// optional uint32 route_text_color = 9;
inline bool Transit_Route::has_route_text_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transit_Route::set_has_route_text_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transit_Route::clear_has_route_text_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transit_Route::clear_route_text_color() {
  route_text_color_ = 0u;
  clear_has_route_text_color();
}
inline ::google::protobuf::uint32 Transit_Route::route_text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.route_text_color)
  return route_text_color_;
}
inline void Transit_Route::set_route_text_color(::google::protobuf::uint32 value) {
  set_has_route_text_color();
  route_text_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.route_text_color)
}

// optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
inline bool Transit_Route::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transit_Route::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transit_Route::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transit_Route::clear_vehicle_type() {
  vehicle_type_ = 0;
  clear_has_vehicle_type();
}
inline ::valhalla::mjolnir::Transit_VehicleType Transit_Route::vehicle_type() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Route.vehicle_type)
  return static_cast< ::valhalla::mjolnir::Transit_VehicleType >(vehicle_type_);
}
inline void Transit_Route::set_vehicle_type(::valhalla::mjolnir::Transit_VehicleType value) {
  assert(::valhalla::mjolnir::Transit_VehicleType_IsValid(value));
  set_has_vehicle_type();
  vehicle_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Route.vehicle_type)
}

// -------------------------------------------------------------------

// Transit_Shape

// optional uint32 shape_id = 1;
inline bool Transit_Shape::has_shape_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transit_Shape::set_has_shape_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transit_Shape::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transit_Shape::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
inline ::google::protobuf::uint32 Transit_Shape::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Shape.shape_id)
  return shape_id_;
}
inline void Transit_Shape::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Shape.shape_id)
}

// optional bytes encoded_shape = 2;
inline bool Transit_Shape::has_encoded_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transit_Shape::set_has_encoded_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transit_Shape::clear_has_encoded_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transit_Shape::clear_encoded_shape() {
  encoded_shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoded_shape();
}
inline const ::std::string& Transit_Shape::encoded_shape() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.Shape.encoded_shape)
  return encoded_shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Shape::set_encoded_shape(const ::std::string& value) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit.Shape.encoded_shape)
}
inline void Transit_Shape::set_encoded_shape(const char* value) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit.Shape.encoded_shape)
}
inline void Transit_Shape::set_encoded_shape(const void* value, size_t size) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit.Shape.encoded_shape)
}
inline ::std::string* Transit_Shape::mutable_encoded_shape() {
  set_has_encoded_shape();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.Shape.encoded_shape)
  return encoded_shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transit_Shape::release_encoded_shape() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit.Shape.encoded_shape)
  clear_has_encoded_shape();
  return encoded_shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transit_Shape::set_allocated_encoded_shape(::std::string* encoded_shape) {
  if (encoded_shape != NULL) {
    set_has_encoded_shape();
  } else {
    clear_has_encoded_shape();
  }
  encoded_shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoded_shape);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit.Shape.encoded_shape)
}

// -------------------------------------------------------------------

// Transit

// repeated .valhalla.mjolnir.Transit.Node nodes = 1;
inline int Transit::nodes_size() const {
  return nodes_.size();
}
inline void Transit::clear_nodes() {
  nodes_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Node& Transit::nodes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.nodes)
  return nodes_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Node* Transit::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.nodes)
  return nodes_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Node* Transit::add_nodes() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Node >*
Transit::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Node >&
Transit::nodes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.nodes)
  return nodes_;
}

// repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
inline int Transit::stop_pairs_size() const {
  return stop_pairs_.size();
}
inline void Transit::clear_stop_pairs() {
  stop_pairs_.Clear();
}
inline const ::valhalla::mjolnir::Transit_StopPair& Transit::stop_pairs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.stop_pairs)
  return stop_pairs_.Get(index);
}
inline ::valhalla::mjolnir::Transit_StopPair* Transit::mutable_stop_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.stop_pairs)
  return stop_pairs_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_StopPair* Transit::add_stop_pairs() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.stop_pairs)
  return stop_pairs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >*
Transit::mutable_stop_pairs() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.stop_pairs)
  return &stop_pairs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_StopPair >&
Transit::stop_pairs() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.stop_pairs)
  return stop_pairs_;
}

// repeated .valhalla.mjolnir.Transit.Route routes = 3;
inline int Transit::routes_size() const {
  return routes_.size();
}
inline void Transit::clear_routes() {
  routes_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Route& Transit::routes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.routes)
  return routes_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Route* Transit::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.routes)
  return routes_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Route* Transit::add_routes() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.routes)
  return routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >*
Transit::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.routes)
  return &routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Route >&
Transit::routes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.routes)
  return routes_;
}

// repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
inline int Transit::shapes_size() const {
  return shapes_.size();
}
inline void Transit::clear_shapes() {
  shapes_.Clear();
}
inline const ::valhalla::mjolnir::Transit_Shape& Transit::shapes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit.shapes)
  return shapes_.Get(index);
}
inline ::valhalla::mjolnir::Transit_Shape* Transit::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit.shapes)
  return shapes_.Mutable(index);
}
inline ::valhalla::mjolnir::Transit_Shape* Transit::add_shapes() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit.shapes)
  return shapes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >*
Transit::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit.shapes)
  return &shapes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Shape >&
Transit::shapes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit.shapes)
  return shapes_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mjolnir
}  // namespace valhalla

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::valhalla::mjolnir::Transit_VehicleType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transit_2eproto__INCLUDED

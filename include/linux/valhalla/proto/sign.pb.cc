// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_sign_2eproto() {
  delete TripSignElement::default_instance_;
  delete TripSign::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sign_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sign_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sign_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::valhalla::protobuf_AddDesc_tripcommon_2eproto();
  TripSignElement::default_instance_ = new TripSignElement();
  TripSign::default_instance_ = new TripSign();
  TripSignElement::default_instance_->InitAsDefaultInstance();
  TripSign::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sign_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sign_2eproto_once_);
void protobuf_AddDesc_sign_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sign_2eproto_once_,
                 &protobuf_AddDesc_sign_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sign_2eproto {
  StaticDescriptorInitializer_sign_2eproto() {
    protobuf_AddDesc_sign_2eproto();
  }
} static_descriptor_initializer_sign_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripSignElement::kTextFieldNumber;
const int TripSignElement::kIsRouteNumberFieldNumber;
const int TripSignElement::kConsecutiveCountFieldNumber;
const int TripSignElement::kPronunciationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripSignElement::TripSignElement()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TripSignElement)
}

void TripSignElement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pronunciation_ = const_cast< ::valhalla::Pronunciation*>(
      ::valhalla::Pronunciation::internal_default_instance());
#else
  pronunciation_ = const_cast< ::valhalla::Pronunciation*>(&::valhalla::Pronunciation::default_instance());
#endif
}

TripSignElement::TripSignElement(const TripSignElement& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TripSignElement)
}

void TripSignElement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pronunciation_ = NULL;
  clear_has_has_text();
  clear_has_has_is_route_number();
  clear_has_has_consecutive_count();
}

TripSignElement::~TripSignElement() {
  // @@protoc_insertion_point(destructor:valhalla.TripSignElement)
  SharedDtor();
}

void TripSignElement::SharedDtor() {
  if (has_has_text()) {
    clear_has_text();
  }
  if (has_has_is_route_number()) {
    clear_has_is_route_number();
  }
  if (has_has_consecutive_count()) {
    clear_has_consecutive_count();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pronunciation_;
  }
}

void TripSignElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripSignElement& TripSignElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sign_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sign_2eproto();
#endif
  return *default_instance_;
}

TripSignElement* TripSignElement::default_instance_ = NULL;

TripSignElement* TripSignElement::New(::google::protobuf::Arena* arena) const {
  TripSignElement* n = new TripSignElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripSignElement::clear_has_text() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TripSignElement)
  switch(has_text_case()) {
    case kText: {
      has_text_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_TEXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TEXT_NOT_SET;
}

void TripSignElement::clear_has_is_route_number() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TripSignElement)
  switch(has_is_route_number_case()) {
    case kIsRouteNumber: {
      // No need to clear
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}

void TripSignElement::clear_has_consecutive_count() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TripSignElement)
  switch(has_consecutive_count_case()) {
    case kConsecutiveCount: {
      // No need to clear
      break;
    }
    case HAS_CONSECUTIVE_COUNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_CONSECUTIVE_COUNT_NOT_SET;
}


void TripSignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSignElement)
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
  clear_has_text();
  clear_has_is_route_number();
  clear_has_consecutive_count();
}

bool TripSignElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TripSignElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TripSignElement.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_route_number;
        break;
      }

      // optional bool is_route_number = 2;
      case 2: {
        if (tag == 16) {
         parse_is_route_number:
          clear_has_is_route_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_is_route_number_.is_route_number_)));
          set_has_is_route_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consecutive_count;
        break;
      }

      // optional uint32 consecutive_count = 3;
      case 3: {
        if (tag == 24) {
         parse_consecutive_count:
          clear_has_consecutive_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_consecutive_count_.consecutive_count_)));
          set_has_consecutive_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pronunciation;
        break;
      }

      // optional .valhalla.Pronunciation pronunciation = 4;
      case 4: {
        if (tag == 34) {
         parse_pronunciation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pronunciation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TripSignElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TripSignElement)
  return false;
#undef DO_
}

void TripSignElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TripSignElement)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TripSignElement.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_route_number(), output);
  }

  // optional uint32 consecutive_count = 3;
  if (has_consecutive_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consecutive_count(), output);
  }

  // optional .valhalla.Pronunciation pronunciation = 4;
  if (this->has_pronunciation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->pronunciation_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TripSignElement)
}

int TripSignElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSignElement)
  int total_size = 0;

  // optional .valhalla.Pronunciation pronunciation = 4;
  if (this->has_pronunciation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pronunciation_);
  }

  switch (has_text_case()) {
    // optional string text = 1;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    case HAS_TEXT_NOT_SET: {
      break;
    }
  }
  switch (has_is_route_number_case()) {
    // optional bool is_route_number = 2;
    case kIsRouteNumber: {
      total_size += 1 + 1;
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  switch (has_consecutive_count_case()) {
    // optional uint32 consecutive_count = 3;
    case kConsecutiveCount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutive_count());
      break;
    }
    case HAS_CONSECUTIVE_COUNT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripSignElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripSignElement*>(&from));
}

void TripSignElement::MergeFrom(const TripSignElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSignElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_text_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case HAS_TEXT_NOT_SET: {
      break;
    }
  }
  switch (from.has_is_route_number_case()) {
    case kIsRouteNumber: {
      set_is_route_number(from.is_route_number());
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  switch (from.has_consecutive_count_case()) {
    case kConsecutiveCount: {
      set_consecutive_count(from.consecutive_count());
      break;
    }
    case HAS_CONSECUTIVE_COUNT_NOT_SET: {
      break;
    }
  }
  if (from.has_pronunciation()) {
    mutable_pronunciation()->::valhalla::Pronunciation::MergeFrom(from.pronunciation());
  }
}

void TripSignElement::CopyFrom(const TripSignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripSignElement::IsInitialized() const {

  return true;
}

void TripSignElement::Swap(TripSignElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripSignElement::InternalSwap(TripSignElement* other) {
  std::swap(pronunciation_, other->pronunciation_);
  std::swap(has_text_, other->has_text_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_is_route_number_, other->has_is_route_number_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_consecutive_count_, other->has_consecutive_count_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TripSignElement::GetTypeName() const {
  return "valhalla.TripSignElement";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripSignElement

// optional string text = 1;
bool TripSignElement::has_text() const {
  return has_text_case() == kText;
}
void TripSignElement::set_has_text() {
  _oneof_case_[0] = kText;
}
void TripSignElement::clear_text() {
  if (has_text()) {
    has_text_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_text();
  }
}
 const ::std::string& TripSignElement::text() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.text)
  if (has_text()) {
    return has_text_.text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TripSignElement::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
}
 void TripSignElement::set_text(const char* value) {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TripSignElement.text)
}
 void TripSignElement::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TripSignElement.text)
}
 ::std::string* TripSignElement::mutable_text() {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.text)
  return has_text_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TripSignElement::release_text() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.text)
  if (has_text()) {
    clear_has_has_text();
    return has_text_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TripSignElement::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_text();
  if (text != NULL) {
    set_has_text();
    has_text_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.text)
}

// optional bool is_route_number = 2;
bool TripSignElement::has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
void TripSignElement::set_has_is_route_number() {
  _oneof_case_[1] = kIsRouteNumber;
}
void TripSignElement::clear_is_route_number() {
  if (has_is_route_number()) {
    has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
 bool TripSignElement::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.is_route_number)
  if (has_is_route_number()) {
    return has_is_route_number_.is_route_number_;
  }
  return false;
}
 void TripSignElement::set_is_route_number(bool value) {
  if (!has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  has_is_route_number_.is_route_number_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.is_route_number)
}

// optional uint32 consecutive_count = 3;
bool TripSignElement::has_consecutive_count() const {
  return has_consecutive_count_case() == kConsecutiveCount;
}
void TripSignElement::set_has_consecutive_count() {
  _oneof_case_[2] = kConsecutiveCount;
}
void TripSignElement::clear_consecutive_count() {
  if (has_consecutive_count()) {
    has_consecutive_count_.consecutive_count_ = 0u;
    clear_has_has_consecutive_count();
  }
}
 ::google::protobuf::uint32 TripSignElement::consecutive_count() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.consecutive_count)
  if (has_consecutive_count()) {
    return has_consecutive_count_.consecutive_count_;
  }
  return 0u;
}
 void TripSignElement::set_consecutive_count(::google::protobuf::uint32 value) {
  if (!has_consecutive_count()) {
    clear_has_consecutive_count();
    set_has_consecutive_count();
  }
  has_consecutive_count_.consecutive_count_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.consecutive_count)
}

// optional .valhalla.Pronunciation pronunciation = 4;
bool TripSignElement::has_pronunciation() const {
  return !_is_default_instance_ && pronunciation_ != NULL;
}
void TripSignElement::clear_pronunciation() {
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
}
const ::valhalla::Pronunciation& TripSignElement::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.pronunciation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance().pronunciation_;
#else
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance_->pronunciation_;
#endif
}
::valhalla::Pronunciation* TripSignElement::mutable_pronunciation() {
  
  if (pronunciation_ == NULL) {
    pronunciation_ = new ::valhalla::Pronunciation;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.pronunciation)
  return pronunciation_;
}
::valhalla::Pronunciation* TripSignElement::release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.pronunciation)
  
  ::valhalla::Pronunciation* temp = pronunciation_;
  pronunciation_ = NULL;
  return temp;
}
void TripSignElement::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  delete pronunciation_;
  pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.pronunciation)
}

bool TripSignElement::has_has_text() const {
  return has_text_case() != HAS_TEXT_NOT_SET;
}
void TripSignElement::clear_has_has_text() {
  _oneof_case_[0] = HAS_TEXT_NOT_SET;
}
bool TripSignElement::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
void TripSignElement::clear_has_has_is_route_number() {
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
bool TripSignElement::has_has_consecutive_count() const {
  return has_consecutive_count_case() != HAS_CONSECUTIVE_COUNT_NOT_SET;
}
void TripSignElement::clear_has_has_consecutive_count() {
  _oneof_case_[2] = HAS_CONSECUTIVE_COUNT_NOT_SET;
}
TripSignElement::HasTextCase TripSignElement::has_text_case() const {
  return TripSignElement::HasTextCase(_oneof_case_[0]);
}
TripSignElement::HasIsRouteNumberCase TripSignElement::has_is_route_number_case() const {
  return TripSignElement::HasIsRouteNumberCase(_oneof_case_[1]);
}
TripSignElement::HasConsecutiveCountCase TripSignElement::has_consecutive_count_case() const {
  return TripSignElement::HasConsecutiveCountCase(_oneof_case_[2]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripSign::kExitNumbersFieldNumber;
const int TripSign::kExitOntoStreetsFieldNumber;
const int TripSign::kExitTowardLocationsFieldNumber;
const int TripSign::kExitNamesFieldNumber;
const int TripSign::kGuideOntoStreetsFieldNumber;
const int TripSign::kGuideTowardLocationsFieldNumber;
const int TripSign::kJunctionNamesFieldNumber;
const int TripSign::kGuidanceViewJunctionsFieldNumber;
const int TripSign::kGuidanceViewSignboardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripSign::TripSign()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TripSign)
}

void TripSign::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TripSign::TripSign(const TripSign& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TripSign)
}

void TripSign::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TripSign::~TripSign() {
  // @@protoc_insertion_point(destructor:valhalla.TripSign)
  SharedDtor();
}

void TripSign::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TripSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TripSign& TripSign::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sign_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sign_2eproto();
#endif
  return *default_instance_;
}

TripSign* TripSign::default_instance_ = NULL;

TripSign* TripSign::New(::google::protobuf::Arena* arena) const {
  TripSign* n = new TripSign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripSign::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSign)
  exit_numbers_.Clear();
  exit_onto_streets_.Clear();
  exit_toward_locations_.Clear();
  exit_names_.Clear();
  guide_onto_streets_.Clear();
  guide_toward_locations_.Clear();
  junction_names_.Clear();
  guidance_view_junctions_.Clear();
  guidance_view_signboards_.Clear();
}

bool TripSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TripSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.TripSignElement exit_numbers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exit_numbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exit_numbers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_exit_numbers;
        if (input->ExpectTag(18)) goto parse_loop_exit_onto_streets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement exit_onto_streets = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exit_onto_streets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exit_onto_streets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_exit_onto_streets;
        if (input->ExpectTag(26)) goto parse_loop_exit_toward_locations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement exit_toward_locations = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exit_toward_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exit_toward_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_exit_toward_locations;
        if (input->ExpectTag(34)) goto parse_loop_exit_names;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement exit_names = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exit_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exit_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_exit_names;
        if (input->ExpectTag(42)) goto parse_loop_guide_onto_streets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement guide_onto_streets = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guide_onto_streets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guide_onto_streets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_guide_onto_streets;
        if (input->ExpectTag(50)) goto parse_loop_guide_toward_locations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement guide_toward_locations = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guide_toward_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guide_toward_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_guide_toward_locations;
        if (input->ExpectTag(58)) goto parse_loop_junction_names;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement junction_names = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_junction_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_junction_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_junction_names;
        if (input->ExpectTag(66)) goto parse_loop_guidance_view_junctions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guidance_view_junctions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guidance_view_junctions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_guidance_view_junctions;
        if (input->ExpectTag(74)) goto parse_loop_guidance_view_signboards;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guidance_view_signboards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guidance_view_signboards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_guidance_view_signboards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TripSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TripSign)
  return false;
#undef DO_
}

void TripSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TripSign)
  // repeated .valhalla.TripSignElement exit_numbers = 1;
  for (unsigned int i = 0, n = this->exit_numbers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->exit_numbers(i), output);
  }

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  for (unsigned int i = 0, n = this->exit_onto_streets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->exit_onto_streets(i), output);
  }

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  for (unsigned int i = 0, n = this->exit_toward_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->exit_toward_locations(i), output);
  }

  // repeated .valhalla.TripSignElement exit_names = 4;
  for (unsigned int i = 0, n = this->exit_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->exit_names(i), output);
  }

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  for (unsigned int i = 0, n = this->guide_onto_streets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->guide_onto_streets(i), output);
  }

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  for (unsigned int i = 0, n = this->guide_toward_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->guide_toward_locations(i), output);
  }

  // repeated .valhalla.TripSignElement junction_names = 7;
  for (unsigned int i = 0, n = this->junction_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->junction_names(i), output);
  }

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  for (unsigned int i = 0, n = this->guidance_view_junctions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->guidance_view_junctions(i), output);
  }

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  for (unsigned int i = 0, n = this->guidance_view_signboards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->guidance_view_signboards(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TripSign)
}

int TripSign::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSign)
  int total_size = 0;

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  total_size += 1 * this->exit_numbers_size();
  for (int i = 0; i < this->exit_numbers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_numbers(i));
  }

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  total_size += 1 * this->exit_onto_streets_size();
  for (int i = 0; i < this->exit_onto_streets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_onto_streets(i));
  }

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  total_size += 1 * this->exit_toward_locations_size();
  for (int i = 0; i < this->exit_toward_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_toward_locations(i));
  }

  // repeated .valhalla.TripSignElement exit_names = 4;
  total_size += 1 * this->exit_names_size();
  for (int i = 0; i < this->exit_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_names(i));
  }

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  total_size += 1 * this->guide_onto_streets_size();
  for (int i = 0; i < this->guide_onto_streets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_onto_streets(i));
  }

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  total_size += 1 * this->guide_toward_locations_size();
  for (int i = 0; i < this->guide_toward_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_toward_locations(i));
  }

  // repeated .valhalla.TripSignElement junction_names = 7;
  total_size += 1 * this->junction_names_size();
  for (int i = 0; i < this->junction_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->junction_names(i));
  }

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  total_size += 1 * this->guidance_view_junctions_size();
  for (int i = 0; i < this->guidance_view_junctions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidance_view_junctions(i));
  }

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  total_size += 1 * this->guidance_view_signboards_size();
  for (int i = 0; i < this->guidance_view_signboards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidance_view_signboards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripSign::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TripSign*>(&from));
}

void TripSign::MergeFrom(const TripSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSign)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  exit_numbers_.MergeFrom(from.exit_numbers_);
  exit_onto_streets_.MergeFrom(from.exit_onto_streets_);
  exit_toward_locations_.MergeFrom(from.exit_toward_locations_);
  exit_names_.MergeFrom(from.exit_names_);
  guide_onto_streets_.MergeFrom(from.guide_onto_streets_);
  guide_toward_locations_.MergeFrom(from.guide_toward_locations_);
  junction_names_.MergeFrom(from.junction_names_);
  guidance_view_junctions_.MergeFrom(from.guidance_view_junctions_);
  guidance_view_signboards_.MergeFrom(from.guidance_view_signboards_);
}

void TripSign::CopyFrom(const TripSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripSign::IsInitialized() const {

  return true;
}

void TripSign::Swap(TripSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripSign::InternalSwap(TripSign* other) {
  exit_numbers_.UnsafeArenaSwap(&other->exit_numbers_);
  exit_onto_streets_.UnsafeArenaSwap(&other->exit_onto_streets_);
  exit_toward_locations_.UnsafeArenaSwap(&other->exit_toward_locations_);
  exit_names_.UnsafeArenaSwap(&other->exit_names_);
  guide_onto_streets_.UnsafeArenaSwap(&other->guide_onto_streets_);
  guide_toward_locations_.UnsafeArenaSwap(&other->guide_toward_locations_);
  junction_names_.UnsafeArenaSwap(&other->junction_names_);
  guidance_view_junctions_.UnsafeArenaSwap(&other->guidance_view_junctions_);
  guidance_view_signboards_.UnsafeArenaSwap(&other->guidance_view_signboards_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TripSign::GetTypeName() const {
  return "valhalla.TripSign";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripSign

// repeated .valhalla.TripSignElement exit_numbers = 1;
int TripSign::exit_numbers_size() const {
  return exit_numbers_.size();
}
void TripSign::clear_exit_numbers() {
  exit_numbers_.Clear();
}
const ::valhalla::TripSignElement& TripSign::exit_numbers(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_exit_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_exit_numbers() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_numbers() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_numbers)
  return &exit_numbers_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_numbers() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_numbers)
  return exit_numbers_;
}

// repeated .valhalla.TripSignElement exit_onto_streets = 2;
int TripSign::exit_onto_streets_size() const {
  return exit_onto_streets_.size();
}
void TripSign::clear_exit_onto_streets() {
  exit_onto_streets_.Clear();
}
const ::valhalla::TripSignElement& TripSign::exit_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_exit_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_exit_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_onto_streets)
  return &exit_onto_streets_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_;
}

// repeated .valhalla.TripSignElement exit_toward_locations = 3;
int TripSign::exit_toward_locations_size() const {
  return exit_toward_locations_.size();
}
void TripSign::clear_exit_toward_locations() {
  exit_toward_locations_.Clear();
}
const ::valhalla::TripSignElement& TripSign::exit_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_exit_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_exit_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_toward_locations)
  return &exit_toward_locations_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_;
}

// repeated .valhalla.TripSignElement exit_names = 4;
int TripSign::exit_names_size() const {
  return exit_names_.size();
}
void TripSign::clear_exit_names() {
  exit_names_.Clear();
}
const ::valhalla::TripSignElement& TripSign::exit_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_names)
  return exit_names_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_exit_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_names)
  return exit_names_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_exit_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_names)
  return exit_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_names)
  return &exit_names_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_names)
  return exit_names_;
}

// repeated .valhalla.TripSignElement guide_onto_streets = 5;
int TripSign::guide_onto_streets_size() const {
  return guide_onto_streets_.size();
}
void TripSign::clear_guide_onto_streets() {
  guide_onto_streets_.Clear();
}
const ::valhalla::TripSignElement& TripSign::guide_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_guide_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_guide_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_onto_streets)
  return &guide_onto_streets_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_;
}

// repeated .valhalla.TripSignElement guide_toward_locations = 6;
int TripSign::guide_toward_locations_size() const {
  return guide_toward_locations_.size();
}
void TripSign::clear_guide_toward_locations() {
  guide_toward_locations_.Clear();
}
const ::valhalla::TripSignElement& TripSign::guide_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_guide_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_guide_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_toward_locations)
  return &guide_toward_locations_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_;
}

// repeated .valhalla.TripSignElement junction_names = 7;
int TripSign::junction_names_size() const {
  return junction_names_.size();
}
void TripSign::clear_junction_names() {
  junction_names_.Clear();
}
const ::valhalla::TripSignElement& TripSign::junction_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.junction_names)
  return junction_names_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_junction_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.junction_names)
  return junction_names_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_junction_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.junction_names)
  return junction_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_junction_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.junction_names)
  return &junction_names_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::junction_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.junction_names)
  return junction_names_;
}

// repeated .valhalla.TripSignElement guidance_view_junctions = 8;
int TripSign::guidance_view_junctions_size() const {
  return guidance_view_junctions_.size();
}
void TripSign::clear_guidance_view_junctions() {
  guidance_view_junctions_.Clear();
}
const ::valhalla::TripSignElement& TripSign::guidance_view_junctions(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_guidance_view_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_guidance_view_junctions() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_junctions() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_junctions)
  return &guidance_view_junctions_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_junctions() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_;
}

// repeated .valhalla.TripSignElement guidance_view_signboards = 9;
int TripSign::guidance_view_signboards_size() const {
  return guidance_view_signboards_.size();
}
void TripSign::clear_guidance_view_signboards() {
  guidance_view_signboards_.Clear();
}
const ::valhalla::TripSignElement& TripSign::guidance_view_signboards(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Get(index);
}
::valhalla::TripSignElement* TripSign::mutable_guidance_view_signboards(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Mutable(index);
}
::valhalla::TripSignElement* TripSign::add_guidance_view_signboards() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_signboards() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_signboards)
  return &guidance_view_signboards_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_signboards() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

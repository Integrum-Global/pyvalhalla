// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripcommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tripcommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_tripcommon_2eproto() {
  delete LatLng::default_instance_;
  delete BoundingBox::default_instance_;
  delete Location::default_instance_;
  delete Location_PathEdge::default_instance_;
  delete Location_SearchFilter::default_instance_;
  delete TransitEgressInfo::default_instance_;
  delete TransitStationInfo::default_instance_;
  delete BikeShareStationInfo::default_instance_;
  delete TransitPlatformInfo::default_instance_;
  delete TransitRouteInfo::default_instance_;
  delete Pronunciation::default_instance_;
  delete StreetName::default_instance_;
  delete TurnLane::default_instance_;
  delete TaggedValue::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_tripcommon_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_tripcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tripcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LatLng::default_instance_ = new LatLng();
  BoundingBox::default_instance_ = new BoundingBox();
  Location::default_instance_ = new Location();
  Location_PathEdge::default_instance_ = new Location_PathEdge();
  Location_SearchFilter::default_instance_ = new Location_SearchFilter();
  TransitEgressInfo::default_instance_ = new TransitEgressInfo();
  TransitStationInfo::default_instance_ = new TransitStationInfo();
  BikeShareStationInfo::default_instance_ = new BikeShareStationInfo();
  TransitPlatformInfo::default_instance_ = new TransitPlatformInfo();
  TransitRouteInfo::default_instance_ = new TransitRouteInfo();
  Pronunciation::default_instance_ = new Pronunciation();
  StreetName::default_instance_ = new StreetName();
  TurnLane::default_instance_ = new TurnLane();
  TaggedValue::default_instance_ = new TaggedValue();
  LatLng::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Location_PathEdge::default_instance_->InitAsDefaultInstance();
  Location_SearchFilter::default_instance_->InitAsDefaultInstance();
  TransitEgressInfo::default_instance_->InitAsDefaultInstance();
  TransitStationInfo::default_instance_->InitAsDefaultInstance();
  BikeShareStationInfo::default_instance_->InitAsDefaultInstance();
  TransitPlatformInfo::default_instance_->InitAsDefaultInstance();
  TransitRouteInfo::default_instance_->InitAsDefaultInstance();
  Pronunciation::default_instance_->InitAsDefaultInstance();
  StreetName::default_instance_->InitAsDefaultInstance();
  TurnLane::default_instance_->InitAsDefaultInstance();
  TaggedValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tripcommon_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tripcommon_2eproto_once_);
void protobuf_AddDesc_tripcommon_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tripcommon_2eproto_once_,
                 &protobuf_AddDesc_tripcommon_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tripcommon_2eproto {
  StaticDescriptorInitializer_tripcommon_2eproto() {
    protobuf_AddDesc_tripcommon_2eproto();
  }
} static_descriptor_initializer_tripcommon_2eproto_;
#endif
bool RoadClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool TravelMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool PedestrianType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool BicycleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool TransitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatLng::kLatFieldNumber;
const int LatLng::kLngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatLng::LatLng()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.LatLng)
}

void LatLng::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LatLng::LatLng(const LatLng& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.LatLng)
}

void LatLng::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_has_lat();
  clear_has_has_lng();
}

LatLng::~LatLng() {
  // @@protoc_insertion_point(destructor:valhalla.LatLng)
  SharedDtor();
}

void LatLng::SharedDtor() {
  if (has_has_lat()) {
    clear_has_lat();
  }
  if (has_has_lng()) {
    clear_has_lng();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LatLng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LatLng& LatLng::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

LatLng* LatLng::default_instance_ = NULL;

LatLng* LatLng::New(::google::protobuf::Arena* arena) const {
  LatLng* n = new LatLng;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatLng::clear_has_lat() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.LatLng)
  switch(has_lat_case()) {
    case kLat: {
      // No need to clear
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_LAT_NOT_SET;
}

void LatLng::clear_has_lng() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.LatLng)
  switch(has_lng_case()) {
    case kLng: {
      // No need to clear
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_LNG_NOT_SET;
}


void LatLng::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.LatLng)
  clear_has_lat();
  clear_has_lng();
}

bool LatLng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.LatLng)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          clear_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_lat_.lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lng;
        break;
      }

      // optional double lng = 2;
      case 2: {
        if (tag == 17) {
         parse_lng:
          clear_has_lng();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_lng_.lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.LatLng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.LatLng)
  return false;
#undef DO_
}

void LatLng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.LatLng)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lng(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.LatLng)
}

int LatLng::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.LatLng)
  int total_size = 0;

  switch (has_lat_case()) {
    // optional double lat = 1;
    case kLat: {
      total_size += 1 + 8;
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  switch (has_lng_case()) {
    // optional double lng = 2;
    case kLng: {
      total_size += 1 + 8;
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatLng::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LatLng*>(&from));
}

void LatLng::MergeFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.LatLng)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_lat_case()) {
    case kLat: {
      set_lat(from.lat());
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  switch (from.has_lng_case()) {
    case kLng: {
      set_lng(from.lng());
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
}

void LatLng::CopyFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.LatLng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLng::IsInitialized() const {

  return true;
}

void LatLng::Swap(LatLng* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatLng::InternalSwap(LatLng* other) {
  std::swap(has_lat_, other->has_lat_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_lng_, other->has_lng_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LatLng::GetTypeName() const {
  return "valhalla.LatLng";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatLng

// optional double lat = 1;
bool LatLng::has_lat() const {
  return has_lat_case() == kLat;
}
void LatLng::set_has_lat() {
  _oneof_case_[0] = kLat;
}
void LatLng::clear_lat() {
  if (has_lat()) {
    has_lat_.lat_ = 0;
    clear_has_has_lat();
  }
}
 double LatLng::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lat)
  if (has_lat()) {
    return has_lat_.lat_;
  }
  return 0;
}
 void LatLng::set_lat(double value) {
  if (!has_lat()) {
    clear_has_lat();
    set_has_lat();
  }
  has_lat_.lat_ = value;
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lat)
}

// optional double lng = 2;
bool LatLng::has_lng() const {
  return has_lng_case() == kLng;
}
void LatLng::set_has_lng() {
  _oneof_case_[1] = kLng;
}
void LatLng::clear_lng() {
  if (has_lng()) {
    has_lng_.lng_ = 0;
    clear_has_has_lng();
  }
}
 double LatLng::lng() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lng)
  if (has_lng()) {
    return has_lng_.lng_;
  }
  return 0;
}
 void LatLng::set_lng(double value) {
  if (!has_lng()) {
    clear_has_lng();
    set_has_lng();
  }
  has_lng_.lng_ = value;
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lng)
}

bool LatLng::has_has_lat() const {
  return has_lat_case() != HAS_LAT_NOT_SET;
}
void LatLng::clear_has_has_lat() {
  _oneof_case_[0] = HAS_LAT_NOT_SET;
}
bool LatLng::has_has_lng() const {
  return has_lng_case() != HAS_LNG_NOT_SET;
}
void LatLng::clear_has_has_lng() {
  _oneof_case_[1] = HAS_LNG_NOT_SET;
}
LatLng::HasLatCase LatLng::has_lat_case() const {
  return LatLng::HasLatCase(_oneof_case_[0]);
}
LatLng::HasLngCase LatLng::has_lng_case() const {
  return LatLng::HasLngCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kMinLlFieldNumber;
const int BoundingBox::kMaxLlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.BoundingBox)
}

void BoundingBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  min_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  min_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  max_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  max_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.BoundingBox)
}

void BoundingBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  min_ll_ = NULL;
  max_ll_ = NULL;
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:valhalla.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete min_ll_;
    delete max_ll_;
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BoundingBox& BoundingBox::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New(::google::protobuf::Arena* arena) const {
  BoundingBox* n = new BoundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.BoundingBox)
  if (GetArenaNoVirtual() == NULL && min_ll_ != NULL) delete min_ll_;
  min_ll_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_ll_ != NULL) delete max_ll_;
  max_ll_ = NULL;
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.LatLng min_ll = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_max_ll;
        break;
      }

      // optional .valhalla.LatLng max_ll = 2;
      case 2: {
        if (tag == 18) {
         parse_max_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.BoundingBox)
  // optional .valhalla.LatLng min_ll = 1;
  if (this->has_min_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->min_ll_, output);
  }

  // optional .valhalla.LatLng max_ll = 2;
  if (this->has_max_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->max_ll_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.BoundingBox)
}

int BoundingBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.BoundingBox)
  int total_size = 0;

  // optional .valhalla.LatLng min_ll = 1;
  if (this->has_min_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->min_ll_);
  }

  // optional .valhalla.LatLng max_ll = 2;
  if (this->has_max_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_ll_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BoundingBox*>(&from));
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.BoundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_min_ll()) {
    mutable_min_ll()->::valhalla::LatLng::MergeFrom(from.min_ll());
  }
  if (from.has_max_ll()) {
    mutable_max_ll()->::valhalla::LatLng::MergeFrom(from.max_ll());
  }
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  std::swap(min_ll_, other->min_ll_);
  std::swap(max_ll_, other->max_ll_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BoundingBox::GetTypeName() const {
  return "valhalla.BoundingBox";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundingBox

// optional .valhalla.LatLng min_ll = 1;
bool BoundingBox::has_min_ll() const {
  return !_is_default_instance_ && min_ll_ != NULL;
}
void BoundingBox::clear_min_ll() {
  if (GetArenaNoVirtual() == NULL && min_ll_ != NULL) delete min_ll_;
  min_ll_ = NULL;
}
const ::valhalla::LatLng& BoundingBox::min_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.min_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return min_ll_ != NULL ? *min_ll_ : *default_instance().min_ll_;
#else
  return min_ll_ != NULL ? *min_ll_ : *default_instance_->min_ll_;
#endif
}
::valhalla::LatLng* BoundingBox::mutable_min_ll() {
  
  if (min_ll_ == NULL) {
    min_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.min_ll)
  return min_ll_;
}
::valhalla::LatLng* BoundingBox::release_min_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.min_ll)
  
  ::valhalla::LatLng* temp = min_ll_;
  min_ll_ = NULL;
  return temp;
}
void BoundingBox::set_allocated_min_ll(::valhalla::LatLng* min_ll) {
  delete min_ll_;
  min_ll_ = min_ll;
  if (min_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.min_ll)
}

// optional .valhalla.LatLng max_ll = 2;
bool BoundingBox::has_max_ll() const {
  return !_is_default_instance_ && max_ll_ != NULL;
}
void BoundingBox::clear_max_ll() {
  if (GetArenaNoVirtual() == NULL && max_ll_ != NULL) delete max_ll_;
  max_ll_ = NULL;
}
const ::valhalla::LatLng& BoundingBox::max_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.max_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return max_ll_ != NULL ? *max_ll_ : *default_instance().max_ll_;
#else
  return max_ll_ != NULL ? *max_ll_ : *default_instance_->max_ll_;
#endif
}
::valhalla::LatLng* BoundingBox::mutable_max_ll() {
  
  if (max_ll_ == NULL) {
    max_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.max_ll)
  return max_ll_;
}
::valhalla::LatLng* BoundingBox::release_max_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.max_ll)
  
  ::valhalla::LatLng* temp = max_ll_;
  max_ll_ = NULL;
  return temp;
}
void BoundingBox::set_allocated_max_ll(::valhalla::LatLng* max_ll) {
  delete max_ll_;
  max_ll_ = max_ll;
  if (max_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.max_ll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool Location_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Location_Type Location::kBreak;
const Location_Type Location::kThrough;
const Location_Type Location::kVia;
const Location_Type Location::kBreakThrough;
const Location_Type Location::Type_MIN;
const Location_Type Location::Type_MAX;
const int Location::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Location_SideOfStreet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Location_SideOfStreet Location::kNone;
const Location_SideOfStreet Location::kLeft;
const Location_SideOfStreet Location::kRight;
const Location_SideOfStreet Location::SideOfStreet_MIN;
const Location_SideOfStreet Location::SideOfStreet_MAX;
const int Location::SideOfStreet_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Location_PreferredSide_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Location_PreferredSide Location::either;
const Location_PreferredSide Location::same;
const Location_PreferredSide Location::opposite;
const Location_PreferredSide Location::PreferredSide_MIN;
const Location_PreferredSide Location::PreferredSide_MAX;
const int Location::PreferredSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location_PathEdge::kGraphIdFieldNumber;
const int Location_PathEdge::kPercentAlongFieldNumber;
const int Location_PathEdge::kLlFieldNumber;
const int Location_PathEdge::kSideOfStreetFieldNumber;
const int Location_PathEdge::kDistanceFieldNumber;
const int Location_PathEdge::kMinimumReachabilityFieldNumber;
const int Location_PathEdge::kBeginNodeFieldNumber;
const int Location_PathEdge::kEndNodeFieldNumber;
const int Location_PathEdge::kNamesFieldNumber;
const int Location_PathEdge::kOutboundReachFieldNumber;
const int Location_PathEdge::kInboundReachFieldNumber;
const int Location_PathEdge::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location_PathEdge::Location_PathEdge()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Location.PathEdge)
}

void Location_PathEdge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

Location_PathEdge::Location_PathEdge(const Location_PathEdge& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Location.PathEdge)
}

void Location_PathEdge::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ll_ = NULL;
  clear_has_has_graph_id();
  clear_has_has_percent_along();
  clear_has_has_side_of_street();
  clear_has_has_distance();
  clear_has_has_minimum_reachability();
  clear_has_has_begin_node();
  clear_has_has_end_node();
  clear_has_has_outbound_reach();
  clear_has_has_inbound_reach();
  clear_has_has_heading();
}

Location_PathEdge::~Location_PathEdge() {
  // @@protoc_insertion_point(destructor:valhalla.Location.PathEdge)
  SharedDtor();
}

void Location_PathEdge::SharedDtor() {
  if (has_has_graph_id()) {
    clear_has_graph_id();
  }
  if (has_has_percent_along()) {
    clear_has_percent_along();
  }
  if (has_has_side_of_street()) {
    clear_has_side_of_street();
  }
  if (has_has_distance()) {
    clear_has_distance();
  }
  if (has_has_minimum_reachability()) {
    clear_has_minimum_reachability();
  }
  if (has_has_begin_node()) {
    clear_has_begin_node();
  }
  if (has_has_end_node()) {
    clear_has_end_node();
  }
  if (has_has_outbound_reach()) {
    clear_has_outbound_reach();
  }
  if (has_has_inbound_reach()) {
    clear_has_inbound_reach();
  }
  if (has_has_heading()) {
    clear_has_heading();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void Location_PathEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location_PathEdge& Location_PathEdge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Location_PathEdge* Location_PathEdge::default_instance_ = NULL;

Location_PathEdge* Location_PathEdge::New(::google::protobuf::Arena* arena) const {
  Location_PathEdge* n = new Location_PathEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location_PathEdge::clear_has_graph_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_graph_id_case()) {
    case kGraphId: {
      // No need to clear
      break;
    }
    case HAS_GRAPH_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_GRAPH_ID_NOT_SET;
}

void Location_PathEdge::clear_has_percent_along() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_percent_along_case()) {
    case kPercentAlong: {
      // No need to clear
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}

void Location_PathEdge::clear_has_side_of_street() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_side_of_street_case()) {
    case kSideOfStreet: {
      // No need to clear
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_SIDE_OF_STREET_NOT_SET;
}

void Location_PathEdge::clear_has_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_distance_case()) {
    case kDistance: {
      // No need to clear
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_DISTANCE_NOT_SET;
}

void Location_PathEdge::clear_has_minimum_reachability() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_minimum_reachability_case()) {
    case kMinimumReachability: {
      // No need to clear
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}

void Location_PathEdge::clear_has_begin_node() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_begin_node_case()) {
    case kBeginNode: {
      // No need to clear
      break;
    }
    case HAS_BEGIN_NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_BEGIN_NODE_NOT_SET;
}

void Location_PathEdge::clear_has_end_node() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_end_node_case()) {
    case kEndNode: {
      // No need to clear
      break;
    }
    case HAS_END_NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_END_NODE_NOT_SET;
}

void Location_PathEdge::clear_has_outbound_reach() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_outbound_reach_case()) {
    case kOutboundReach: {
      // No need to clear
      break;
    }
    case HAS_OUTBOUND_REACH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_OUTBOUND_REACH_NOT_SET;
}

void Location_PathEdge::clear_has_inbound_reach() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_inbound_reach_case()) {
    case kInboundReach: {
      // No need to clear
      break;
    }
    case HAS_INBOUND_REACH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_INBOUND_REACH_NOT_SET;
}

void Location_PathEdge::clear_has_heading() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.PathEdge)
  switch(has_heading_case()) {
    case kHeading: {
      // No need to clear
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_HEADING_NOT_SET;
}


void Location_PathEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Location.PathEdge)
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
  names_.Clear();
  clear_has_graph_id();
  clear_has_percent_along();
  clear_has_side_of_street();
  clear_has_distance();
  clear_has_minimum_reachability();
  clear_has_begin_node();
  clear_has_end_node();
  clear_has_outbound_reach();
  clear_has_inbound_reach();
  clear_has_heading();
}

bool Location_PathEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Location.PathEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 graph_id = 1;
      case 1: {
        if (tag == 8) {
          clear_has_graph_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &has_graph_id_.graph_id_)));
          set_has_graph_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_percent_along;
        break;
      }

      // optional double percent_along = 2;
      case 2: {
        if (tag == 17) {
         parse_percent_along:
          clear_has_percent_along();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_percent_along_.percent_along_)));
          set_has_percent_along();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (tag == 26) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.Location.SideOfStreet side_of_street = 4;
      case 4: {
        if (tag == 32) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side_of_street(static_cast< ::valhalla::Location_SideOfStreet >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_distance;
        break;
      }

      // optional double distance = 5;
      case 5: {
        if (tag == 41) {
         parse_distance:
          clear_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_distance_.distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_minimum_reachability;
        break;
      }

      // optional int32 minimum_reachability = 6;
      case 6: {
        if (tag == 48) {
         parse_minimum_reachability:
          clear_has_minimum_reachability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_minimum_reachability_.minimum_reachability_)));
          set_has_minimum_reachability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_begin_node;
        break;
      }

      // optional bool begin_node = 7;
      case 7: {
        if (tag == 56) {
         parse_begin_node:
          clear_has_begin_node();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_begin_node_.begin_node_)));
          set_has_begin_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_node;
        break;
      }

      // optional bool end_node = 8;
      case 8: {
        if (tag == 64) {
         parse_end_node:
          clear_has_end_node();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_end_node_.end_node_)));
          set_has_end_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_names;
        break;
      }

      // repeated string names = 10;
      case 10: {
        if (tag == 82) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.PathEdge.names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_names;
        if (input->ExpectTag(88)) goto parse_outbound_reach;
        break;
      }

      // optional int32 outbound_reach = 11;
      case 11: {
        if (tag == 88) {
         parse_outbound_reach:
          clear_has_outbound_reach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_outbound_reach_.outbound_reach_)));
          set_has_outbound_reach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_inbound_reach;
        break;
      }

      // optional int32 inbound_reach = 12;
      case 12: {
        if (tag == 96) {
         parse_inbound_reach:
          clear_has_inbound_reach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_inbound_reach_.inbound_reach_)));
          set_has_inbound_reach();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_heading;
        break;
      }

      // optional float heading = 13;
      case 13: {
        if (tag == 109) {
         parse_heading:
          clear_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_heading_.heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Location.PathEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Location.PathEdge)
  return false;
#undef DO_
}

void Location_PathEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Location.PathEdge)
  // optional uint64 graph_id = 1;
  if (has_graph_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->graph_id(), output);
  }

  // optional double percent_along = 2;
  if (has_percent_along()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->percent_along(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->ll_, output);
  }

  // optional .valhalla.Location.SideOfStreet side_of_street = 4;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side_of_street(), output);
  }

  // optional double distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->distance(), output);
  }

  // optional int32 minimum_reachability = 6;
  if (has_minimum_reachability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minimum_reachability(), output);
  }

  // optional bool begin_node = 7;
  if (has_begin_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->begin_node(), output);
  }

  // optional bool end_node = 8;
  if (has_end_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->end_node(), output);
  }

  // repeated string names = 10;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.PathEdge.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->names(i), output);
  }

  // optional int32 outbound_reach = 11;
  if (has_outbound_reach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->outbound_reach(), output);
  }

  // optional int32 inbound_reach = 12;
  if (has_inbound_reach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->inbound_reach(), output);
  }

  // optional float heading = 13;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->heading(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Location.PathEdge)
}

int Location_PathEdge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Location.PathEdge)
  int total_size = 0;

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ll_);
  }

  // repeated string names = 10;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  switch (has_graph_id_case()) {
    // optional uint64 graph_id = 1;
    case kGraphId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->graph_id());
      break;
    }
    case HAS_GRAPH_ID_NOT_SET: {
      break;
    }
  }
  switch (has_percent_along_case()) {
    // optional double percent_along = 2;
    case kPercentAlong: {
      total_size += 1 + 8;
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
  switch (has_side_of_street_case()) {
    // optional .valhalla.Location.SideOfStreet side_of_street = 4;
    case kSideOfStreet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  switch (has_distance_case()) {
    // optional double distance = 5;
    case kDistance: {
      total_size += 1 + 8;
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_minimum_reachability_case()) {
    // optional int32 minimum_reachability = 6;
    case kMinimumReachability: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (has_begin_node_case()) {
    // optional bool begin_node = 7;
    case kBeginNode: {
      total_size += 1 + 1;
      break;
    }
    case HAS_BEGIN_NODE_NOT_SET: {
      break;
    }
  }
  switch (has_end_node_case()) {
    // optional bool end_node = 8;
    case kEndNode: {
      total_size += 1 + 1;
      break;
    }
    case HAS_END_NODE_NOT_SET: {
      break;
    }
  }
  switch (has_outbound_reach_case()) {
    // optional int32 outbound_reach = 11;
    case kOutboundReach: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outbound_reach());
      break;
    }
    case HAS_OUTBOUND_REACH_NOT_SET: {
      break;
    }
  }
  switch (has_inbound_reach_case()) {
    // optional int32 inbound_reach = 12;
    case kInboundReach: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inbound_reach());
      break;
    }
    case HAS_INBOUND_REACH_NOT_SET: {
      break;
    }
  }
  switch (has_heading_case()) {
    // optional float heading = 13;
    case kHeading: {
      total_size += 1 + 4;
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_PathEdge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location_PathEdge*>(&from));
}

void Location_PathEdge::MergeFrom(const Location_PathEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Location.PathEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  names_.MergeFrom(from.names_);
  switch (from.has_graph_id_case()) {
    case kGraphId: {
      set_graph_id(from.graph_id());
      break;
    }
    case HAS_GRAPH_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_percent_along_case()) {
    case kPercentAlong: {
      set_percent_along(from.percent_along());
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
  switch (from.has_side_of_street_case()) {
    case kSideOfStreet: {
      set_side_of_street(from.side_of_street());
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  switch (from.has_distance_case()) {
    case kDistance: {
      set_distance(from.distance());
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_minimum_reachability_case()) {
    case kMinimumReachability: {
      set_minimum_reachability(from.minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_begin_node_case()) {
    case kBeginNode: {
      set_begin_node(from.begin_node());
      break;
    }
    case HAS_BEGIN_NODE_NOT_SET: {
      break;
    }
  }
  switch (from.has_end_node_case()) {
    case kEndNode: {
      set_end_node(from.end_node());
      break;
    }
    case HAS_END_NODE_NOT_SET: {
      break;
    }
  }
  switch (from.has_outbound_reach_case()) {
    case kOutboundReach: {
      set_outbound_reach(from.outbound_reach());
      break;
    }
    case HAS_OUTBOUND_REACH_NOT_SET: {
      break;
    }
  }
  switch (from.has_inbound_reach_case()) {
    case kInboundReach: {
      set_inbound_reach(from.inbound_reach());
      break;
    }
    case HAS_INBOUND_REACH_NOT_SET: {
      break;
    }
  }
  switch (from.has_heading_case()) {
    case kHeading: {
      set_heading(from.heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  if (from.has_ll()) {
    mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
  }
}

void Location_PathEdge::CopyFrom(const Location_PathEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Location.PathEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_PathEdge::IsInitialized() const {

  return true;
}

void Location_PathEdge::Swap(Location_PathEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location_PathEdge::InternalSwap(Location_PathEdge* other) {
  std::swap(ll_, other->ll_);
  names_.UnsafeArenaSwap(&other->names_);
  std::swap(has_graph_id_, other->has_graph_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_percent_along_, other->has_percent_along_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_side_of_street_, other->has_side_of_street_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_distance_, other->has_distance_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_minimum_reachability_, other->has_minimum_reachability_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_begin_node_, other->has_begin_node_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_end_node_, other->has_end_node_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_outbound_reach_, other->has_outbound_reach_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_inbound_reach_, other->has_inbound_reach_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_heading_, other->has_heading_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Location_PathEdge::GetTypeName() const {
  return "valhalla.Location.PathEdge";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location_SearchFilter::kMinRoadClassFieldNumber;
const int Location_SearchFilter::kMaxRoadClassFieldNumber;
const int Location_SearchFilter::kExcludeTunnelFieldNumber;
const int Location_SearchFilter::kExcludeBridgeFieldNumber;
const int Location_SearchFilter::kExcludeRampFieldNumber;
const int Location_SearchFilter::kExcludeClosuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location_SearchFilter::Location_SearchFilter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Location.SearchFilter)
}

void Location_SearchFilter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Location_SearchFilter::Location_SearchFilter(const Location_SearchFilter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Location.SearchFilter)
}

void Location_SearchFilter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_has_min_road_class();
  clear_has_has_max_road_class();
  clear_has_has_exclude_tunnel();
  clear_has_has_exclude_bridge();
  clear_has_has_exclude_ramp();
  clear_has_has_exclude_closures();
}

Location_SearchFilter::~Location_SearchFilter() {
  // @@protoc_insertion_point(destructor:valhalla.Location.SearchFilter)
  SharedDtor();
}

void Location_SearchFilter::SharedDtor() {
  if (has_has_min_road_class()) {
    clear_has_min_road_class();
  }
  if (has_has_max_road_class()) {
    clear_has_max_road_class();
  }
  if (has_has_exclude_tunnel()) {
    clear_has_exclude_tunnel();
  }
  if (has_has_exclude_bridge()) {
    clear_has_exclude_bridge();
  }
  if (has_has_exclude_ramp()) {
    clear_has_exclude_ramp();
  }
  if (has_has_exclude_closures()) {
    clear_has_exclude_closures();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Location_SearchFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location_SearchFilter& Location_SearchFilter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Location_SearchFilter* Location_SearchFilter::default_instance_ = NULL;

Location_SearchFilter* Location_SearchFilter::New(::google::protobuf::Arena* arena) const {
  Location_SearchFilter* n = new Location_SearchFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location_SearchFilter::clear_has_min_road_class() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_min_road_class_case()) {
    case kMinRoadClass: {
      // No need to clear
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_MIN_ROAD_CLASS_NOT_SET;
}

void Location_SearchFilter::clear_has_max_road_class() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_max_road_class_case()) {
    case kMaxRoadClass: {
      // No need to clear
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_MAX_ROAD_CLASS_NOT_SET;
}

void Location_SearchFilter::clear_has_exclude_tunnel() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_exclude_tunnel_case()) {
    case kExcludeTunnel: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_TUNNEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_EXCLUDE_TUNNEL_NOT_SET;
}

void Location_SearchFilter::clear_has_exclude_bridge() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_exclude_bridge_case()) {
    case kExcludeBridge: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_BRIDGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_EXCLUDE_BRIDGE_NOT_SET;
}

void Location_SearchFilter::clear_has_exclude_ramp() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_exclude_ramp_case()) {
    case kExcludeRamp: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_RAMP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_EXCLUDE_RAMP_NOT_SET;
}

void Location_SearchFilter::clear_has_exclude_closures() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location.SearchFilter)
  switch(has_exclude_closures_case()) {
    case kExcludeClosures: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_EXCLUDE_CLOSURES_NOT_SET;
}


void Location_SearchFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Location.SearchFilter)
  clear_has_min_road_class();
  clear_has_max_road_class();
  clear_has_exclude_tunnel();
  clear_has_exclude_bridge();
  clear_has_exclude_ramp();
  clear_has_exclude_closures();
}

bool Location_SearchFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Location.SearchFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.RoadClass min_road_class = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_road_class(static_cast< ::valhalla::RoadClass >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_road_class;
        break;
      }

      // optional .valhalla.RoadClass max_road_class = 2;
      case 2: {
        if (tag == 16) {
         parse_max_road_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_max_road_class(static_cast< ::valhalla::RoadClass >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exclude_tunnel;
        break;
      }

      // optional bool exclude_tunnel = 3;
      case 3: {
        if (tag == 24) {
         parse_exclude_tunnel:
          clear_has_exclude_tunnel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_tunnel_.exclude_tunnel_)));
          set_has_exclude_tunnel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exclude_bridge;
        break;
      }

      // optional bool exclude_bridge = 4;
      case 4: {
        if (tag == 32) {
         parse_exclude_bridge:
          clear_has_exclude_bridge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_bridge_.exclude_bridge_)));
          set_has_exclude_bridge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_exclude_ramp;
        break;
      }

      // optional bool exclude_ramp = 5;
      case 5: {
        if (tag == 40) {
         parse_exclude_ramp:
          clear_has_exclude_ramp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_ramp_.exclude_ramp_)));
          set_has_exclude_ramp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exclude_closures;
        break;
      }

      // optional bool exclude_closures = 6;
      case 6: {
        if (tag == 48) {
         parse_exclude_closures:
          clear_has_exclude_closures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_closures_.exclude_closures_)));
          set_has_exclude_closures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Location.SearchFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Location.SearchFilter)
  return false;
#undef DO_
}

void Location_SearchFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Location.SearchFilter)
  // optional .valhalla.RoadClass min_road_class = 1;
  if (has_min_road_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->min_road_class(), output);
  }

  // optional .valhalla.RoadClass max_road_class = 2;
  if (has_max_road_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->max_road_class(), output);
  }

  // optional bool exclude_tunnel = 3;
  if (has_exclude_tunnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->exclude_tunnel(), output);
  }

  // optional bool exclude_bridge = 4;
  if (has_exclude_bridge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exclude_bridge(), output);
  }

  // optional bool exclude_ramp = 5;
  if (has_exclude_ramp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->exclude_ramp(), output);
  }

  // optional bool exclude_closures = 6;
  if (has_exclude_closures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exclude_closures(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Location.SearchFilter)
}

int Location_SearchFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Location.SearchFilter)
  int total_size = 0;

  switch (has_min_road_class_case()) {
    // optional .valhalla.RoadClass min_road_class = 1;
    case kMinRoadClass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_road_class());
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (has_max_road_class_case()) {
    // optional .valhalla.RoadClass max_road_class = 2;
    case kMaxRoadClass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_road_class());
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_tunnel_case()) {
    // optional bool exclude_tunnel = 3;
    case kExcludeTunnel: {
      total_size += 1 + 1;
      break;
    }
    case HAS_EXCLUDE_TUNNEL_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_bridge_case()) {
    // optional bool exclude_bridge = 4;
    case kExcludeBridge: {
      total_size += 1 + 1;
      break;
    }
    case HAS_EXCLUDE_BRIDGE_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_ramp_case()) {
    // optional bool exclude_ramp = 5;
    case kExcludeRamp: {
      total_size += 1 + 1;
      break;
    }
    case HAS_EXCLUDE_RAMP_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_closures_case()) {
    // optional bool exclude_closures = 6;
    case kExcludeClosures: {
      total_size += 1 + 1;
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_SearchFilter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location_SearchFilter*>(&from));
}

void Location_SearchFilter::MergeFrom(const Location_SearchFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Location.SearchFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_min_road_class_case()) {
    case kMinRoadClass: {
      set_min_road_class(from.min_road_class());
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (from.has_max_road_class_case()) {
    case kMaxRoadClass: {
      set_max_road_class(from.max_road_class());
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_tunnel_case()) {
    case kExcludeTunnel: {
      set_exclude_tunnel(from.exclude_tunnel());
      break;
    }
    case HAS_EXCLUDE_TUNNEL_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_bridge_case()) {
    case kExcludeBridge: {
      set_exclude_bridge(from.exclude_bridge());
      break;
    }
    case HAS_EXCLUDE_BRIDGE_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_ramp_case()) {
    case kExcludeRamp: {
      set_exclude_ramp(from.exclude_ramp());
      break;
    }
    case HAS_EXCLUDE_RAMP_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_closures_case()) {
    case kExcludeClosures: {
      set_exclude_closures(from.exclude_closures());
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
}

void Location_SearchFilter::CopyFrom(const Location_SearchFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Location.SearchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_SearchFilter::IsInitialized() const {

  return true;
}

void Location_SearchFilter::Swap(Location_SearchFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location_SearchFilter::InternalSwap(Location_SearchFilter* other) {
  std::swap(has_min_road_class_, other->has_min_road_class_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_max_road_class_, other->has_max_road_class_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_exclude_tunnel_, other->has_exclude_tunnel_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_exclude_bridge_, other->has_exclude_bridge_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_exclude_ramp_, other->has_exclude_ramp_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_exclude_closures_, other->has_exclude_closures_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Location_SearchFilter::GetTypeName() const {
  return "valhalla.Location.SearchFilter";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kLlFieldNumber;
const int Location::kTypeFieldNumber;
const int Location::kHeadingFieldNumber;
const int Location::kNameFieldNumber;
const int Location::kStreetFieldNumber;
const int Location::kCityFieldNumber;
const int Location::kStateFieldNumber;
const int Location::kPostalCodeFieldNumber;
const int Location::kCountryFieldNumber;
const int Location::kPhoneFieldNumber;
const int Location::kUrlFieldNumber;
const int Location::kDateTimeFieldNumber;
const int Location::kSideOfStreetFieldNumber;
const int Location::kHeadingToleranceFieldNumber;
const int Location::kNodeSnapToleranceFieldNumber;
const int Location::kWayIdFieldNumber;
const int Location::kMinimumReachabilityFieldNumber;
const int Location::kRadiusFieldNumber;
const int Location::kAccuracyFieldNumber;
const int Location::kTimeFieldNumber;
const int Location::kSkipRankingCandidatesFieldNumber;
const int Location::kPathEdgesFieldNumber;
const int Location::kFilteredEdgesFieldNumber;
const int Location::kOriginalIndexFieldNumber;
const int Location::kProjectedLlFieldNumber;
const int Location::kLegShapeIndexFieldNumber;
const int Location::kDistanceFromLegOriginFieldNumber;
const int Location::kPreferredSideFieldNumber;
const int Location::kDisplayLlFieldNumber;
const int Location::kSearchCutoffFieldNumber;
const int Location::kStreetSideToleranceFieldNumber;
const int Location::kRouteIndexFieldNumber;
const int Location::kWaypointIndexFieldNumber;
const int Location::kSearchFilterFieldNumber;
const int Location::kStreetSideMaxDistanceFieldNumber;
const int Location::kPreferredLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Location)
}

void Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  projected_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  projected_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  display_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  display_ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  search_filter_ = const_cast< ::valhalla::Location_SearchFilter*>(
      ::valhalla::Location_SearchFilter::internal_default_instance());
#else
  search_filter_ = const_cast< ::valhalla::Location_SearchFilter*>(&::valhalla::Location_SearchFilter::default_instance());
#endif
}

Location::Location(const Location& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Location)
}

void Location::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ll_ = NULL;
  projected_ll_ = NULL;
  display_ll_ = NULL;
  search_filter_ = NULL;
  clear_has_has_type();
  clear_has_has_heading();
  clear_has_has_name();
  clear_has_has_street();
  clear_has_has_city();
  clear_has_has_state();
  clear_has_has_postal_code();
  clear_has_has_country();
  clear_has_has_phone();
  clear_has_has_url();
  clear_has_has_date_time();
  clear_has_has_side_of_street();
  clear_has_has_heading_tolerance();
  clear_has_has_node_snap_tolerance();
  clear_has_has_way_id();
  clear_has_has_minimum_reachability();
  clear_has_has_radius();
  clear_has_has_accuracy();
  clear_has_has_time();
  clear_has_has_skip_ranking_candidates();
  clear_has_has_original_index();
  clear_has_has_leg_shape_index();
  clear_has_has_distance_from_leg_origin();
  clear_has_has_preferred_side();
  clear_has_has_search_cutoff();
  clear_has_has_street_side_tolerance();
  clear_has_has_route_index();
  clear_has_has_waypoint_index();
  clear_has_has_street_side_max_distance();
  clear_has_has_preferred_layer();
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:valhalla.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (has_has_type()) {
    clear_has_type();
  }
  if (has_has_heading()) {
    clear_has_heading();
  }
  if (has_has_name()) {
    clear_has_name();
  }
  if (has_has_street()) {
    clear_has_street();
  }
  if (has_has_city()) {
    clear_has_city();
  }
  if (has_has_state()) {
    clear_has_state();
  }
  if (has_has_postal_code()) {
    clear_has_postal_code();
  }
  if (has_has_country()) {
    clear_has_country();
  }
  if (has_has_phone()) {
    clear_has_phone();
  }
  if (has_has_url()) {
    clear_has_url();
  }
  if (has_has_date_time()) {
    clear_has_date_time();
  }
  if (has_has_side_of_street()) {
    clear_has_side_of_street();
  }
  if (has_has_heading_tolerance()) {
    clear_has_heading_tolerance();
  }
  if (has_has_node_snap_tolerance()) {
    clear_has_node_snap_tolerance();
  }
  if (has_has_way_id()) {
    clear_has_way_id();
  }
  if (has_has_minimum_reachability()) {
    clear_has_minimum_reachability();
  }
  if (has_has_radius()) {
    clear_has_radius();
  }
  if (has_has_accuracy()) {
    clear_has_accuracy();
  }
  if (has_has_time()) {
    clear_has_time();
  }
  if (has_has_skip_ranking_candidates()) {
    clear_has_skip_ranking_candidates();
  }
  if (has_has_original_index()) {
    clear_has_original_index();
  }
  if (has_has_leg_shape_index()) {
    clear_has_leg_shape_index();
  }
  if (has_has_distance_from_leg_origin()) {
    clear_has_distance_from_leg_origin();
  }
  if (has_has_preferred_side()) {
    clear_has_preferred_side();
  }
  if (has_has_search_cutoff()) {
    clear_has_search_cutoff();
  }
  if (has_has_street_side_tolerance()) {
    clear_has_street_side_tolerance();
  }
  if (has_has_route_index()) {
    clear_has_route_index();
  }
  if (has_has_waypoint_index()) {
    clear_has_waypoint_index();
  }
  if (has_has_street_side_max_distance()) {
    clear_has_street_side_max_distance();
  }
  if (has_has_preferred_layer()) {
    clear_has_preferred_layer();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
    delete projected_ll_;
    delete display_ll_;
    delete search_filter_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Location& Location::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}

void Location::clear_has_heading() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_heading_case()) {
    case kHeading: {
      // No need to clear
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_HEADING_NOT_SET;
}

void Location::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}

void Location::clear_has_street() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_street_case()) {
    case kStreet: {
      has_street_.street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_STREET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_STREET_NOT_SET;
}

void Location::clear_has_city() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_city_case()) {
    case kCity: {
      has_city_.city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_CITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_CITY_NOT_SET;
}

void Location::clear_has_state() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_state_case()) {
    case kState: {
      has_state_.state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_STATE_NOT_SET;
}

void Location::clear_has_postal_code() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_postal_code_case()) {
    case kPostalCode: {
      has_postal_code_.postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_POSTAL_CODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_POSTAL_CODE_NOT_SET;
}

void Location::clear_has_country() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_country_case()) {
    case kCountry: {
      has_country_.country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_COUNTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_COUNTRY_NOT_SET;
}

void Location::clear_has_phone() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_phone_case()) {
    case kPhone: {
      has_phone_.phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_PHONE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_PHONE_NOT_SET;
}

void Location::clear_has_url() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_url_case()) {
    case kUrl: {
      has_url_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_URL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_URL_NOT_SET;
}

void Location::clear_has_date_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_date_time_case()) {
    case kDateTime: {
      has_date_time_.date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_DATE_TIME_NOT_SET;
}

void Location::clear_has_side_of_street() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_side_of_street_case()) {
    case kSideOfStreet: {
      // No need to clear
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = HAS_SIDE_OF_STREET_NOT_SET;
}

void Location::clear_has_heading_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_heading_tolerance_case()) {
    case kHeadingTolerance: {
      // No need to clear
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[12] = HAS_HEADING_TOLERANCE_NOT_SET;
}

void Location::clear_has_node_snap_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_node_snap_tolerance_case()) {
    case kNodeSnapTolerance: {
      // No need to clear
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[13] = HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}

void Location::clear_has_way_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_way_id_case()) {
    case kWayId: {
      // No need to clear
      break;
    }
    case HAS_WAY_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[14] = HAS_WAY_ID_NOT_SET;
}

void Location::clear_has_minimum_reachability() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_minimum_reachability_case()) {
    case kMinimumReachability: {
      // No need to clear
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[15] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}

void Location::clear_has_radius() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_radius_case()) {
    case kRadius: {
      // No need to clear
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[16] = HAS_RADIUS_NOT_SET;
}

void Location::clear_has_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_accuracy_case()) {
    case kAccuracy: {
      // No need to clear
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[17] = HAS_ACCURACY_NOT_SET;
}

void Location::clear_has_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_time_case()) {
    case kTime: {
      // No need to clear
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[18] = HAS_TIME_NOT_SET;
}

void Location::clear_has_skip_ranking_candidates() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_skip_ranking_candidates_case()) {
    case kSkipRankingCandidates: {
      // No need to clear
      break;
    }
    case HAS_SKIP_RANKING_CANDIDATES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[19] = HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}

void Location::clear_has_original_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_original_index_case()) {
    case kOriginalIndex: {
      // No need to clear
      break;
    }
    case HAS_ORIGINAL_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[20] = HAS_ORIGINAL_INDEX_NOT_SET;
}

void Location::clear_has_leg_shape_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_leg_shape_index_case()) {
    case kLegShapeIndex: {
      // No need to clear
      break;
    }
    case HAS_LEG_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[21] = HAS_LEG_SHAPE_INDEX_NOT_SET;
}

void Location::clear_has_distance_from_leg_origin() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_distance_from_leg_origin_case()) {
    case kDistanceFromLegOrigin: {
      // No need to clear
      break;
    }
    case HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[22] = HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}

void Location::clear_has_preferred_side() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_preferred_side_case()) {
    case kPreferredSide: {
      // No need to clear
      break;
    }
    case HAS_PREFERRED_SIDE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[23] = HAS_PREFERRED_SIDE_NOT_SET;
}

void Location::clear_has_search_cutoff() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_search_cutoff_case()) {
    case kSearchCutoff: {
      // No need to clear
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[24] = HAS_SEARCH_CUTOFF_NOT_SET;
}

void Location::clear_has_street_side_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_street_side_tolerance_case()) {
    case kStreetSideTolerance: {
      // No need to clear
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[25] = HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}

void Location::clear_has_route_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_route_index_case()) {
    case kRouteIndex: {
      // No need to clear
      break;
    }
    case HAS_ROUTE_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[26] = HAS_ROUTE_INDEX_NOT_SET;
}

void Location::clear_has_waypoint_index() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_waypoint_index_case()) {
    case kWaypointIndex: {
      // No need to clear
      break;
    }
    case HAS_WAYPOINT_INDEX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[27] = HAS_WAYPOINT_INDEX_NOT_SET;
}

void Location::clear_has_street_side_max_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_street_side_max_distance_case()) {
    case kStreetSideMaxDistance: {
      // No need to clear
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[28] = HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}

void Location::clear_has_preferred_layer() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch(has_preferred_layer_case()) {
    case kPreferredLayer: {
      // No need to clear
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[29] = HAS_PREFERRED_LAYER_NOT_SET;
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Location)
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
  if (GetArenaNoVirtual() == NULL && projected_ll_ != NULL) delete projected_ll_;
  projected_ll_ = NULL;
  if (GetArenaNoVirtual() == NULL && display_ll_ != NULL) delete display_ll_;
  display_ll_ = NULL;
  if (GetArenaNoVirtual() == NULL && search_filter_ != NULL) delete search_filter_;
  search_filter_ = NULL;
  path_edges_.Clear();
  filtered_edges_.Clear();
  clear_has_type();
  clear_has_heading();
  clear_has_name();
  clear_has_street();
  clear_has_city();
  clear_has_state();
  clear_has_postal_code();
  clear_has_country();
  clear_has_phone();
  clear_has_url();
  clear_has_date_time();
  clear_has_side_of_street();
  clear_has_heading_tolerance();
  clear_has_node_snap_tolerance();
  clear_has_way_id();
  clear_has_minimum_reachability();
  clear_has_radius();
  clear_has_accuracy();
  clear_has_time();
  clear_has_skip_ranking_candidates();
  clear_has_original_index();
  clear_has_leg_shape_index();
  clear_has_distance_from_leg_origin();
  clear_has_preferred_side();
  clear_has_search_cutoff();
  clear_has_street_side_tolerance();
  clear_has_route_index();
  clear_has_waypoint_index();
  clear_has_street_side_max_distance();
  clear_has_preferred_layer();
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.LatLng ll = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.Location.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::Location_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 3;
      case 3: {
        if (tag == 24) {
         parse_heading:
          clear_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_heading_.heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_street;
        break;
      }

      // optional string street = 5;
      case 5: {
        if (tag == 42) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.street"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (tag == 50) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.city"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_state;
        break;
      }

      // optional string state = 7;
      case 7: {
        if (tag == 58) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_postal_code;
        break;
      }

      // optional string postal_code = 8;
      case 8: {
        if (tag == 66) {
         parse_postal_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.postal_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_country;
        break;
      }

      // optional string country = 9;
      case 9: {
        if (tag == 74) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.country"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_phone;
        break;
      }

      // optional string phone = 10;
      case 10: {
        if (tag == 82) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.phone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (tag == 90) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_date_time;
        break;
      }

      // optional string date_time = 12;
      case 12: {
        if (tag == 98) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Location.date_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_side_of_street;
        break;
      }

      // optional .valhalla.Location.SideOfStreet side_of_street = 13;
      case 13: {
        if (tag == 104) {
         parse_side_of_street:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side_of_street(static_cast< ::valhalla::Location_SideOfStreet >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_heading_tolerance;
        break;
      }

      // optional uint32 heading_tolerance = 14;
      case 14: {
        if (tag == 112) {
         parse_heading_tolerance:
          clear_has_heading_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_heading_tolerance_.heading_tolerance_)));
          set_has_heading_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_node_snap_tolerance;
        break;
      }

      // optional uint32 node_snap_tolerance = 15;
      case 15: {
        if (tag == 120) {
         parse_node_snap_tolerance:
          clear_has_node_snap_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_node_snap_tolerance_.node_snap_tolerance_)));
          set_has_node_snap_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_way_id;
        break;
      }

      // optional uint64 way_id = 16;
      case 16: {
        if (tag == 128) {
         parse_way_id:
          clear_has_way_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &has_way_id_.way_id_)));
          set_has_way_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_minimum_reachability;
        break;
      }

      // optional uint32 minimum_reachability = 17;
      case 17: {
        if (tag == 136) {
         parse_minimum_reachability:
          clear_has_minimum_reachability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_minimum_reachability_.minimum_reachability_)));
          set_has_minimum_reachability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_radius;
        break;
      }

      // optional uint32 radius = 18;
      case 18: {
        if (tag == 144) {
         parse_radius:
          clear_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_radius_.radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_accuracy;
        break;
      }

      // optional uint32 accuracy = 19;
      case 19: {
        if (tag == 152) {
         parse_accuracy:
          clear_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_accuracy_.accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_time;
        break;
      }

      // optional double time = 20;
      case 20: {
        if (tag == 161) {
         parse_time:
          clear_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_time_.time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_skip_ranking_candidates;
        break;
      }

      // optional bool skip_ranking_candidates = 21;
      case 21: {
        if (tag == 168) {
         parse_skip_ranking_candidates:
          clear_has_skip_ranking_candidates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_skip_ranking_candidates_.skip_ranking_candidates_)));
          set_has_skip_ranking_candidates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_path_edges;
        break;
      }

      // repeated .valhalla.Location.PathEdge path_edges = 22;
      case 22: {
        if (tag == 178) {
         parse_path_edges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_path_edges;
        if (input->ExpectTag(186)) goto parse_loop_filtered_edges;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Location.PathEdge filtered_edges = 23;
      case 23: {
        if (tag == 186) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filtered_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filtered_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_filtered_edges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(192)) goto parse_original_index;
        break;
      }

      // optional uint32 original_index = 24;
      case 24: {
        if (tag == 192) {
         parse_original_index:
          clear_has_original_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_original_index_.original_index_)));
          set_has_original_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_projected_ll;
        break;
      }

      // optional .valhalla.LatLng projected_ll = 25;
      case 25: {
        if (tag == 202) {
         parse_projected_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projected_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_preferred_side;
        break;
      }

      // optional .valhalla.Location.PreferredSide preferred_side = 26;
      case 26: {
        if (tag == 208) {
         parse_preferred_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_preferred_side(static_cast< ::valhalla::Location_PreferredSide >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_display_ll;
        break;
      }

      // optional .valhalla.LatLng display_ll = 27;
      case 27: {
        if (tag == 218) {
         parse_display_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_search_cutoff;
        break;
      }

      // optional uint32 search_cutoff = 28;
      case 28: {
        if (tag == 224) {
         parse_search_cutoff:
          clear_has_search_cutoff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_search_cutoff_.search_cutoff_)));
          set_has_search_cutoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_street_side_tolerance;
        break;
      }

      // optional uint32 street_side_tolerance = 29;
      case 29: {
        if (tag == 232) {
         parse_street_side_tolerance:
          clear_has_street_side_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_street_side_tolerance_.street_side_tolerance_)));
          set_has_street_side_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_route_index;
        break;
      }

      // optional uint32 route_index = 30;
      case 30: {
        if (tag == 240) {
         parse_route_index:
          clear_has_route_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_route_index_.route_index_)));
          set_has_route_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_waypoint_index;
        break;
      }

      // optional uint32 waypoint_index = 31;
      case 31: {
        if (tag == 248) {
         parse_waypoint_index:
          clear_has_waypoint_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_waypoint_index_.waypoint_index_)));
          set_has_waypoint_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_search_filter;
        break;
      }

      // optional .valhalla.Location.SearchFilter search_filter = 32;
      case 32: {
        if (tag == 258) {
         parse_search_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_street_side_max_distance;
        break;
      }

      // optional uint32 street_side_max_distance = 33;
      case 33: {
        if (tag == 264) {
         parse_street_side_max_distance:
          clear_has_street_side_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_street_side_max_distance_.street_side_max_distance_)));
          set_has_street_side_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_preferred_layer;
        break;
      }

      // optional int32 preferred_layer = 34;
      case 34: {
        if (tag == 272) {
         parse_preferred_layer:
          clear_has_preferred_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_preferred_layer_.preferred_layer_)));
          set_has_preferred_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_leg_shape_index;
        break;
      }

      // optional uint32 leg_shape_index = 35;
      case 35: {
        if (tag == 280) {
         parse_leg_shape_index:
          clear_has_leg_shape_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_leg_shape_index_.leg_shape_index_)));
          set_has_leg_shape_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_distance_from_leg_origin;
        break;
      }

      // optional double distance_from_leg_origin = 36;
      case 36: {
        if (tag == 289) {
         parse_distance_from_leg_origin:
          clear_has_distance_from_leg_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_distance_from_leg_origin_.distance_from_leg_origin_)));
          set_has_distance_from_leg_origin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Location)
  // optional .valhalla.LatLng ll = 1;
  if (this->has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->ll_, output);
  }

  // optional .valhalla.Location.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heading(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string street = 5;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->street(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // optional string state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->state(), output);
  }

  // optional string postal_code = 8;
  if (has_postal_code()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.postal_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->postal_code(), output);
  }

  // optional string country = 9;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country(), output);
  }

  // optional string phone = 10;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->phone(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  // optional string date_time = 12;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->date_time(), output);
  }

  // optional .valhalla.Location.SideOfStreet side_of_street = 13;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->side_of_street(), output);
  }

  // optional uint32 heading_tolerance = 14;
  if (has_heading_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->heading_tolerance(), output);
  }

  // optional uint32 node_snap_tolerance = 15;
  if (has_node_snap_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->node_snap_tolerance(), output);
  }

  // optional uint64 way_id = 16;
  if (has_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->way_id(), output);
  }

  // optional uint32 minimum_reachability = 17;
  if (has_minimum_reachability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->minimum_reachability(), output);
  }

  // optional uint32 radius = 18;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->radius(), output);
  }

  // optional uint32 accuracy = 19;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->accuracy(), output);
  }

  // optional double time = 20;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->time(), output);
  }

  // optional bool skip_ranking_candidates = 21;
  if (has_skip_ranking_candidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->skip_ranking_candidates(), output);
  }

  // repeated .valhalla.Location.PathEdge path_edges = 22;
  for (unsigned int i = 0, n = this->path_edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->path_edges(i), output);
  }

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  for (unsigned int i = 0, n = this->filtered_edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->filtered_edges(i), output);
  }

  // optional uint32 original_index = 24;
  if (has_original_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->original_index(), output);
  }

  // optional .valhalla.LatLng projected_ll = 25;
  if (this->has_projected_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->projected_ll_, output);
  }

  // optional .valhalla.Location.PreferredSide preferred_side = 26;
  if (has_preferred_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->preferred_side(), output);
  }

  // optional .valhalla.LatLng display_ll = 27;
  if (this->has_display_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->display_ll_, output);
  }

  // optional uint32 search_cutoff = 28;
  if (has_search_cutoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->search_cutoff(), output);
  }

  // optional uint32 street_side_tolerance = 29;
  if (has_street_side_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->street_side_tolerance(), output);
  }

  // optional uint32 route_index = 30;
  if (has_route_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->route_index(), output);
  }

  // optional uint32 waypoint_index = 31;
  if (has_waypoint_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->waypoint_index(), output);
  }

  // optional .valhalla.Location.SearchFilter search_filter = 32;
  if (this->has_search_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, *this->search_filter_, output);
  }

  // optional uint32 street_side_max_distance = 33;
  if (has_street_side_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->street_side_max_distance(), output);
  }

  // optional int32 preferred_layer = 34;
  if (has_preferred_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->preferred_layer(), output);
  }

  // optional uint32 leg_shape_index = 35;
  if (has_leg_shape_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->leg_shape_index(), output);
  }

  // optional double distance_from_leg_origin = 36;
  if (has_distance_from_leg_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->distance_from_leg_origin(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Location)
}

int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Location)
  int total_size = 0;

  // optional .valhalla.LatLng ll = 1;
  if (this->has_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ll_);
  }

  // optional .valhalla.LatLng projected_ll = 25;
  if (this->has_projected_ll()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->projected_ll_);
  }

  // optional .valhalla.LatLng display_ll = 27;
  if (this->has_display_ll()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->display_ll_);
  }

  // optional .valhalla.Location.SearchFilter search_filter = 32;
  if (this->has_search_filter()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->search_filter_);
  }

  // repeated .valhalla.Location.PathEdge path_edges = 22;
  total_size += 2 * this->path_edges_size();
  for (int i = 0; i < this->path_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_edges(i));
  }

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  total_size += 2 * this->filtered_edges_size();
  for (int i = 0; i < this->filtered_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filtered_edges(i));
  }

  switch (has_type_case()) {
    // optional .valhalla.Location.Type type = 2;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_heading_case()) {
    // optional uint32 heading = 3;
    case kHeading: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  switch (has_name_case()) {
    // optional string name = 4;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_street_case()) {
    // optional string street = 5;
    case kStreet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
      break;
    }
    case HAS_STREET_NOT_SET: {
      break;
    }
  }
  switch (has_city_case()) {
    // optional string city = 6;
    case kCity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
      break;
    }
    case HAS_CITY_NOT_SET: {
      break;
    }
  }
  switch (has_state_case()) {
    // optional string state = 7;
    case kState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  switch (has_postal_code_case()) {
    // optional string postal_code = 8;
    case kPostalCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postal_code());
      break;
    }
    case HAS_POSTAL_CODE_NOT_SET: {
      break;
    }
  }
  switch (has_country_case()) {
    // optional string country = 9;
    case kCountry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
      break;
    }
    case HAS_COUNTRY_NOT_SET: {
      break;
    }
  }
  switch (has_phone_case()) {
    // optional string phone = 10;
    case kPhone: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
      break;
    }
    case HAS_PHONE_NOT_SET: {
      break;
    }
  }
  switch (has_url_case()) {
    // optional string url = 11;
    case kUrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
      break;
    }
    case HAS_URL_NOT_SET: {
      break;
    }
  }
  switch (has_date_time_case()) {
    // optional string date_time = 12;
    case kDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_side_of_street_case()) {
    // optional .valhalla.Location.SideOfStreet side_of_street = 13;
    case kSideOfStreet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side_of_street());
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  switch (has_heading_tolerance_case()) {
    // optional uint32 heading_tolerance = 14;
    case kHeadingTolerance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading_tolerance());
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_node_snap_tolerance_case()) {
    // optional uint32 node_snap_tolerance = 15;
    case kNodeSnapTolerance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_snap_tolerance());
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_way_id_case()) {
    // optional uint64 way_id = 16;
    case kWayId: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->way_id());
      break;
    }
    case HAS_WAY_ID_NOT_SET: {
      break;
    }
  }
  switch (has_minimum_reachability_case()) {
    // optional uint32 minimum_reachability = 17;
    case kMinimumReachability: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (has_radius_case()) {
    // optional uint32 radius = 18;
    case kRadius: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (has_accuracy_case()) {
    // optional uint32 accuracy = 19;
    case kAccuracy: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (has_time_case()) {
    // optional double time = 20;
    case kTime: {
      total_size += 2 + 8;
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_skip_ranking_candidates_case()) {
    // optional bool skip_ranking_candidates = 21;
    case kSkipRankingCandidates: {
      total_size += 2 + 1;
      break;
    }
    case HAS_SKIP_RANKING_CANDIDATES_NOT_SET: {
      break;
    }
  }
  switch (has_original_index_case()) {
    // optional uint32 original_index = 24;
    case kOriginalIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_index());
      break;
    }
    case HAS_ORIGINAL_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_leg_shape_index_case()) {
    // optional uint32 leg_shape_index = 35;
    case kLegShapeIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leg_shape_index());
      break;
    }
    case HAS_LEG_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_distance_from_leg_origin_case()) {
    // optional double distance_from_leg_origin = 36;
    case kDistanceFromLegOrigin: {
      total_size += 2 + 8;
      break;
    }
    case HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET: {
      break;
    }
  }
  switch (has_preferred_side_case()) {
    // optional .valhalla.Location.PreferredSide preferred_side = 26;
    case kPreferredSide: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->preferred_side());
      break;
    }
    case HAS_PREFERRED_SIDE_NOT_SET: {
      break;
    }
  }
  switch (has_search_cutoff_case()) {
    // optional uint32 search_cutoff = 28;
    case kSearchCutoff: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_cutoff());
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  switch (has_street_side_tolerance_case()) {
    // optional uint32 street_side_tolerance = 29;
    case kStreetSideTolerance: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->street_side_tolerance());
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_route_index_case()) {
    // optional uint32 route_index = 30;
    case kRouteIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_index());
      break;
    }
    case HAS_ROUTE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_waypoint_index_case()) {
    // optional uint32 waypoint_index = 31;
    case kWaypointIndex: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waypoint_index());
      break;
    }
    case HAS_WAYPOINT_INDEX_NOT_SET: {
      break;
    }
  }
  switch (has_street_side_max_distance_case()) {
    // optional uint32 street_side_max_distance = 33;
    case kStreetSideMaxDistance: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->street_side_max_distance());
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_preferred_layer_case()) {
    // optional int32 preferred_layer = 34;
    case kPreferredLayer: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preferred_layer());
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Location*>(&from));
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  path_edges_.MergeFrom(from.path_edges_);
  filtered_edges_.MergeFrom(from.filtered_edges_);
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_heading_case()) {
    case kHeading: {
      set_heading(from.heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_street_case()) {
    case kStreet: {
      set_street(from.street());
      break;
    }
    case HAS_STREET_NOT_SET: {
      break;
    }
  }
  switch (from.has_city_case()) {
    case kCity: {
      set_city(from.city());
      break;
    }
    case HAS_CITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_state_case()) {
    case kState: {
      set_state(from.state());
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  switch (from.has_postal_code_case()) {
    case kPostalCode: {
      set_postal_code(from.postal_code());
      break;
    }
    case HAS_POSTAL_CODE_NOT_SET: {
      break;
    }
  }
  switch (from.has_country_case()) {
    case kCountry: {
      set_country(from.country());
      break;
    }
    case HAS_COUNTRY_NOT_SET: {
      break;
    }
  }
  switch (from.has_phone_case()) {
    case kPhone: {
      set_phone(from.phone());
      break;
    }
    case HAS_PHONE_NOT_SET: {
      break;
    }
  }
  switch (from.has_url_case()) {
    case kUrl: {
      set_url(from.url());
      break;
    }
    case HAS_URL_NOT_SET: {
      break;
    }
  }
  switch (from.has_date_time_case()) {
    case kDateTime: {
      set_date_time(from.date_time());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_side_of_street_case()) {
    case kSideOfStreet: {
      set_side_of_street(from.side_of_street());
      break;
    }
    case HAS_SIDE_OF_STREET_NOT_SET: {
      break;
    }
  }
  switch (from.has_heading_tolerance_case()) {
    case kHeadingTolerance: {
      set_heading_tolerance(from.heading_tolerance());
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_node_snap_tolerance_case()) {
    case kNodeSnapTolerance: {
      set_node_snap_tolerance(from.node_snap_tolerance());
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_way_id_case()) {
    case kWayId: {
      set_way_id(from.way_id());
      break;
    }
    case HAS_WAY_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_minimum_reachability_case()) {
    case kMinimumReachability: {
      set_minimum_reachability(from.minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_radius_case()) {
    case kRadius: {
      set_radius(from.radius());
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (from.has_accuracy_case()) {
    case kAccuracy: {
      set_accuracy(from.accuracy());
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (from.has_time_case()) {
    case kTime: {
      set_time(from.time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_skip_ranking_candidates_case()) {
    case kSkipRankingCandidates: {
      set_skip_ranking_candidates(from.skip_ranking_candidates());
      break;
    }
    case HAS_SKIP_RANKING_CANDIDATES_NOT_SET: {
      break;
    }
  }
  switch (from.has_original_index_case()) {
    case kOriginalIndex: {
      set_original_index(from.original_index());
      break;
    }
    case HAS_ORIGINAL_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_leg_shape_index_case()) {
    case kLegShapeIndex: {
      set_leg_shape_index(from.leg_shape_index());
      break;
    }
    case HAS_LEG_SHAPE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_distance_from_leg_origin_case()) {
    case kDistanceFromLegOrigin: {
      set_distance_from_leg_origin(from.distance_from_leg_origin());
      break;
    }
    case HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET: {
      break;
    }
  }
  switch (from.has_preferred_side_case()) {
    case kPreferredSide: {
      set_preferred_side(from.preferred_side());
      break;
    }
    case HAS_PREFERRED_SIDE_NOT_SET: {
      break;
    }
  }
  switch (from.has_search_cutoff_case()) {
    case kSearchCutoff: {
      set_search_cutoff(from.search_cutoff());
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  switch (from.has_street_side_tolerance_case()) {
    case kStreetSideTolerance: {
      set_street_side_tolerance(from.street_side_tolerance());
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_route_index_case()) {
    case kRouteIndex: {
      set_route_index(from.route_index());
      break;
    }
    case HAS_ROUTE_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_waypoint_index_case()) {
    case kWaypointIndex: {
      set_waypoint_index(from.waypoint_index());
      break;
    }
    case HAS_WAYPOINT_INDEX_NOT_SET: {
      break;
    }
  }
  switch (from.has_street_side_max_distance_case()) {
    case kStreetSideMaxDistance: {
      set_street_side_max_distance(from.street_side_max_distance());
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_preferred_layer_case()) {
    case kPreferredLayer: {
      set_preferred_layer(from.preferred_layer());
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  if (from.has_ll()) {
    mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
  }
  if (from.has_projected_ll()) {
    mutable_projected_ll()->::valhalla::LatLng::MergeFrom(from.projected_ll());
  }
  if (from.has_display_ll()) {
    mutable_display_ll()->::valhalla::LatLng::MergeFrom(from.display_ll());
  }
  if (from.has_search_filter()) {
    mutable_search_filter()->::valhalla::Location_SearchFilter::MergeFrom(from.search_filter());
  }
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(ll_, other->ll_);
  path_edges_.UnsafeArenaSwap(&other->path_edges_);
  filtered_edges_.UnsafeArenaSwap(&other->filtered_edges_);
  std::swap(projected_ll_, other->projected_ll_);
  std::swap(display_ll_, other->display_ll_);
  std::swap(search_filter_, other->search_filter_);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_heading_, other->has_heading_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_street_, other->has_street_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_city_, other->has_city_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_state_, other->has_state_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_postal_code_, other->has_postal_code_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_country_, other->has_country_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_phone_, other->has_phone_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_url_, other->has_url_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  std::swap(has_date_time_, other->has_date_time_);
  std::swap(_oneof_case_[10], other->_oneof_case_[10]);
  std::swap(has_side_of_street_, other->has_side_of_street_);
  std::swap(_oneof_case_[11], other->_oneof_case_[11]);
  std::swap(has_heading_tolerance_, other->has_heading_tolerance_);
  std::swap(_oneof_case_[12], other->_oneof_case_[12]);
  std::swap(has_node_snap_tolerance_, other->has_node_snap_tolerance_);
  std::swap(_oneof_case_[13], other->_oneof_case_[13]);
  std::swap(has_way_id_, other->has_way_id_);
  std::swap(_oneof_case_[14], other->_oneof_case_[14]);
  std::swap(has_minimum_reachability_, other->has_minimum_reachability_);
  std::swap(_oneof_case_[15], other->_oneof_case_[15]);
  std::swap(has_radius_, other->has_radius_);
  std::swap(_oneof_case_[16], other->_oneof_case_[16]);
  std::swap(has_accuracy_, other->has_accuracy_);
  std::swap(_oneof_case_[17], other->_oneof_case_[17]);
  std::swap(has_time_, other->has_time_);
  std::swap(_oneof_case_[18], other->_oneof_case_[18]);
  std::swap(has_skip_ranking_candidates_, other->has_skip_ranking_candidates_);
  std::swap(_oneof_case_[19], other->_oneof_case_[19]);
  std::swap(has_original_index_, other->has_original_index_);
  std::swap(_oneof_case_[20], other->_oneof_case_[20]);
  std::swap(has_leg_shape_index_, other->has_leg_shape_index_);
  std::swap(_oneof_case_[21], other->_oneof_case_[21]);
  std::swap(has_distance_from_leg_origin_, other->has_distance_from_leg_origin_);
  std::swap(_oneof_case_[22], other->_oneof_case_[22]);
  std::swap(has_preferred_side_, other->has_preferred_side_);
  std::swap(_oneof_case_[23], other->_oneof_case_[23]);
  std::swap(has_search_cutoff_, other->has_search_cutoff_);
  std::swap(_oneof_case_[24], other->_oneof_case_[24]);
  std::swap(has_street_side_tolerance_, other->has_street_side_tolerance_);
  std::swap(_oneof_case_[25], other->_oneof_case_[25]);
  std::swap(has_route_index_, other->has_route_index_);
  std::swap(_oneof_case_[26], other->_oneof_case_[26]);
  std::swap(has_waypoint_index_, other->has_waypoint_index_);
  std::swap(_oneof_case_[27], other->_oneof_case_[27]);
  std::swap(has_street_side_max_distance_, other->has_street_side_max_distance_);
  std::swap(_oneof_case_[28], other->_oneof_case_[28]);
  std::swap(has_preferred_layer_, other->has_preferred_layer_);
  std::swap(_oneof_case_[29], other->_oneof_case_[29]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Location::GetTypeName() const {
  return "valhalla.Location";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location_PathEdge

// optional uint64 graph_id = 1;
bool Location_PathEdge::has_graph_id() const {
  return has_graph_id_case() == kGraphId;
}
void Location_PathEdge::set_has_graph_id() {
  _oneof_case_[0] = kGraphId;
}
void Location_PathEdge::clear_graph_id() {
  if (has_graph_id()) {
    has_graph_id_.graph_id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_graph_id();
  }
}
 ::google::protobuf::uint64 Location_PathEdge::graph_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.graph_id)
  if (has_graph_id()) {
    return has_graph_id_.graph_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void Location_PathEdge::set_graph_id(::google::protobuf::uint64 value) {
  if (!has_graph_id()) {
    clear_has_graph_id();
    set_has_graph_id();
  }
  has_graph_id_.graph_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.graph_id)
}

// optional double percent_along = 2;
bool Location_PathEdge::has_percent_along() const {
  return has_percent_along_case() == kPercentAlong;
}
void Location_PathEdge::set_has_percent_along() {
  _oneof_case_[1] = kPercentAlong;
}
void Location_PathEdge::clear_percent_along() {
  if (has_percent_along()) {
    has_percent_along_.percent_along_ = 0;
    clear_has_has_percent_along();
  }
}
 double Location_PathEdge::percent_along() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.percent_along)
  if (has_percent_along()) {
    return has_percent_along_.percent_along_;
  }
  return 0;
}
 void Location_PathEdge::set_percent_along(double value) {
  if (!has_percent_along()) {
    clear_has_percent_along();
    set_has_percent_along();
  }
  has_percent_along_.percent_along_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.percent_along)
}

// optional .valhalla.LatLng ll = 3;
bool Location_PathEdge::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
void Location_PathEdge::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
const ::valhalla::LatLng& Location_PathEdge::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
::valhalla::LatLng* Location_PathEdge::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.ll)
  return ll_;
}
::valhalla::LatLng* Location_PathEdge::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.PathEdge.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
void Location_PathEdge::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.PathEdge.ll)
}

// optional .valhalla.Location.SideOfStreet side_of_street = 4;
bool Location_PathEdge::has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
void Location_PathEdge::set_has_side_of_street() {
  _oneof_case_[2] = kSideOfStreet;
}
void Location_PathEdge::clear_side_of_street() {
  if (has_side_of_street()) {
    has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
 ::valhalla::Location_SideOfStreet Location_PathEdge::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.side_of_street)
  if (has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
 void Location_PathEdge::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  has_side_of_street_.side_of_street_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.side_of_street)
}

// optional double distance = 5;
bool Location_PathEdge::has_distance() const {
  return has_distance_case() == kDistance;
}
void Location_PathEdge::set_has_distance() {
  _oneof_case_[3] = kDistance;
}
void Location_PathEdge::clear_distance() {
  if (has_distance()) {
    has_distance_.distance_ = 0;
    clear_has_has_distance();
  }
}
 double Location_PathEdge::distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.distance)
  if (has_distance()) {
    return has_distance_.distance_;
  }
  return 0;
}
 void Location_PathEdge::set_distance(double value) {
  if (!has_distance()) {
    clear_has_distance();
    set_has_distance();
  }
  has_distance_.distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.distance)
}

// optional int32 minimum_reachability = 6;
bool Location_PathEdge::has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
void Location_PathEdge::set_has_minimum_reachability() {
  _oneof_case_[4] = kMinimumReachability;
}
void Location_PathEdge::clear_minimum_reachability() {
  if (has_minimum_reachability()) {
    has_minimum_reachability_.minimum_reachability_ = 0;
    clear_has_has_minimum_reachability();
  }
}
 ::google::protobuf::int32 Location_PathEdge::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.minimum_reachability)
  if (has_minimum_reachability()) {
    return has_minimum_reachability_.minimum_reachability_;
  }
  return 0;
}
 void Location_PathEdge::set_minimum_reachability(::google::protobuf::int32 value) {
  if (!has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  has_minimum_reachability_.minimum_reachability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.minimum_reachability)
}

// optional bool begin_node = 7;
bool Location_PathEdge::has_begin_node() const {
  return has_begin_node_case() == kBeginNode;
}
void Location_PathEdge::set_has_begin_node() {
  _oneof_case_[5] = kBeginNode;
}
void Location_PathEdge::clear_begin_node() {
  if (has_begin_node()) {
    has_begin_node_.begin_node_ = false;
    clear_has_has_begin_node();
  }
}
 bool Location_PathEdge::begin_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.begin_node)
  if (has_begin_node()) {
    return has_begin_node_.begin_node_;
  }
  return false;
}
 void Location_PathEdge::set_begin_node(bool value) {
  if (!has_begin_node()) {
    clear_has_begin_node();
    set_has_begin_node();
  }
  has_begin_node_.begin_node_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.begin_node)
}

// optional bool end_node = 8;
bool Location_PathEdge::has_end_node() const {
  return has_end_node_case() == kEndNode;
}
void Location_PathEdge::set_has_end_node() {
  _oneof_case_[6] = kEndNode;
}
void Location_PathEdge::clear_end_node() {
  if (has_end_node()) {
    has_end_node_.end_node_ = false;
    clear_has_has_end_node();
  }
}
 bool Location_PathEdge::end_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.end_node)
  if (has_end_node()) {
    return has_end_node_.end_node_;
  }
  return false;
}
 void Location_PathEdge::set_end_node(bool value) {
  if (!has_end_node()) {
    clear_has_end_node();
    set_has_end_node();
  }
  has_end_node_.end_node_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.end_node)
}

// repeated string names = 10;
int Location_PathEdge::names_size() const {
  return names_.size();
}
void Location_PathEdge::clear_names() {
  names_.Clear();
}
 const ::std::string& Location_PathEdge::names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.names)
  return names_.Get(index);
}
 ::std::string* Location_PathEdge::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.names)
  return names_.Mutable(index);
}
 void Location_PathEdge::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.names)
  names_.Mutable(index)->assign(value);
}
 void Location_PathEdge::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Location.PathEdge.names)
}
 void Location_PathEdge::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.PathEdge.names)
}
 ::std::string* Location_PathEdge::add_names() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Location.PathEdge.names)
  return names_.Add();
}
 void Location_PathEdge::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Location.PathEdge.names)
}
 void Location_PathEdge::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Location.PathEdge.names)
}
 void Location_PathEdge::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Location.PathEdge.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Location_PathEdge::names() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.PathEdge.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Location_PathEdge::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.PathEdge.names)
  return &names_;
}

// optional int32 outbound_reach = 11;
bool Location_PathEdge::has_outbound_reach() const {
  return has_outbound_reach_case() == kOutboundReach;
}
void Location_PathEdge::set_has_outbound_reach() {
  _oneof_case_[7] = kOutboundReach;
}
void Location_PathEdge::clear_outbound_reach() {
  if (has_outbound_reach()) {
    has_outbound_reach_.outbound_reach_ = 0;
    clear_has_has_outbound_reach();
  }
}
 ::google::protobuf::int32 Location_PathEdge::outbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.outbound_reach)
  if (has_outbound_reach()) {
    return has_outbound_reach_.outbound_reach_;
  }
  return 0;
}
 void Location_PathEdge::set_outbound_reach(::google::protobuf::int32 value) {
  if (!has_outbound_reach()) {
    clear_has_outbound_reach();
    set_has_outbound_reach();
  }
  has_outbound_reach_.outbound_reach_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.outbound_reach)
}

// optional int32 inbound_reach = 12;
bool Location_PathEdge::has_inbound_reach() const {
  return has_inbound_reach_case() == kInboundReach;
}
void Location_PathEdge::set_has_inbound_reach() {
  _oneof_case_[8] = kInboundReach;
}
void Location_PathEdge::clear_inbound_reach() {
  if (has_inbound_reach()) {
    has_inbound_reach_.inbound_reach_ = 0;
    clear_has_has_inbound_reach();
  }
}
 ::google::protobuf::int32 Location_PathEdge::inbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.inbound_reach)
  if (has_inbound_reach()) {
    return has_inbound_reach_.inbound_reach_;
  }
  return 0;
}
 void Location_PathEdge::set_inbound_reach(::google::protobuf::int32 value) {
  if (!has_inbound_reach()) {
    clear_has_inbound_reach();
    set_has_inbound_reach();
  }
  has_inbound_reach_.inbound_reach_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.inbound_reach)
}

// optional float heading = 13;
bool Location_PathEdge::has_heading() const {
  return has_heading_case() == kHeading;
}
void Location_PathEdge::set_has_heading() {
  _oneof_case_[9] = kHeading;
}
void Location_PathEdge::clear_heading() {
  if (has_heading()) {
    has_heading_.heading_ = 0;
    clear_has_has_heading();
  }
}
 float Location_PathEdge::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.heading)
  if (has_heading()) {
    return has_heading_.heading_;
  }
  return 0;
}
 void Location_PathEdge::set_heading(float value) {
  if (!has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  has_heading_.heading_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.heading)
}

bool Location_PathEdge::has_has_graph_id() const {
  return has_graph_id_case() != HAS_GRAPH_ID_NOT_SET;
}
void Location_PathEdge::clear_has_has_graph_id() {
  _oneof_case_[0] = HAS_GRAPH_ID_NOT_SET;
}
bool Location_PathEdge::has_has_percent_along() const {
  return has_percent_along_case() != HAS_PERCENT_ALONG_NOT_SET;
}
void Location_PathEdge::clear_has_has_percent_along() {
  _oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}
bool Location_PathEdge::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
void Location_PathEdge::clear_has_has_side_of_street() {
  _oneof_case_[2] = HAS_SIDE_OF_STREET_NOT_SET;
}
bool Location_PathEdge::has_has_distance() const {
  return has_distance_case() != HAS_DISTANCE_NOT_SET;
}
void Location_PathEdge::clear_has_has_distance() {
  _oneof_case_[3] = HAS_DISTANCE_NOT_SET;
}
bool Location_PathEdge::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
void Location_PathEdge::clear_has_has_minimum_reachability() {
  _oneof_case_[4] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
bool Location_PathEdge::has_has_begin_node() const {
  return has_begin_node_case() != HAS_BEGIN_NODE_NOT_SET;
}
void Location_PathEdge::clear_has_has_begin_node() {
  _oneof_case_[5] = HAS_BEGIN_NODE_NOT_SET;
}
bool Location_PathEdge::has_has_end_node() const {
  return has_end_node_case() != HAS_END_NODE_NOT_SET;
}
void Location_PathEdge::clear_has_has_end_node() {
  _oneof_case_[6] = HAS_END_NODE_NOT_SET;
}
bool Location_PathEdge::has_has_outbound_reach() const {
  return has_outbound_reach_case() != HAS_OUTBOUND_REACH_NOT_SET;
}
void Location_PathEdge::clear_has_has_outbound_reach() {
  _oneof_case_[7] = HAS_OUTBOUND_REACH_NOT_SET;
}
bool Location_PathEdge::has_has_inbound_reach() const {
  return has_inbound_reach_case() != HAS_INBOUND_REACH_NOT_SET;
}
void Location_PathEdge::clear_has_has_inbound_reach() {
  _oneof_case_[8] = HAS_INBOUND_REACH_NOT_SET;
}
bool Location_PathEdge::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
void Location_PathEdge::clear_has_has_heading() {
  _oneof_case_[9] = HAS_HEADING_NOT_SET;
}
Location_PathEdge::HasGraphIdCase Location_PathEdge::has_graph_id_case() const {
  return Location_PathEdge::HasGraphIdCase(_oneof_case_[0]);
}
Location_PathEdge::HasPercentAlongCase Location_PathEdge::has_percent_along_case() const {
  return Location_PathEdge::HasPercentAlongCase(_oneof_case_[1]);
}
Location_PathEdge::HasSideOfStreetCase Location_PathEdge::has_side_of_street_case() const {
  return Location_PathEdge::HasSideOfStreetCase(_oneof_case_[2]);
}
Location_PathEdge::HasDistanceCase Location_PathEdge::has_distance_case() const {
  return Location_PathEdge::HasDistanceCase(_oneof_case_[3]);
}
Location_PathEdge::HasMinimumReachabilityCase Location_PathEdge::has_minimum_reachability_case() const {
  return Location_PathEdge::HasMinimumReachabilityCase(_oneof_case_[4]);
}
Location_PathEdge::HasBeginNodeCase Location_PathEdge::has_begin_node_case() const {
  return Location_PathEdge::HasBeginNodeCase(_oneof_case_[5]);
}
Location_PathEdge::HasEndNodeCase Location_PathEdge::has_end_node_case() const {
  return Location_PathEdge::HasEndNodeCase(_oneof_case_[6]);
}
Location_PathEdge::HasOutboundReachCase Location_PathEdge::has_outbound_reach_case() const {
  return Location_PathEdge::HasOutboundReachCase(_oneof_case_[7]);
}
Location_PathEdge::HasInboundReachCase Location_PathEdge::has_inbound_reach_case() const {
  return Location_PathEdge::HasInboundReachCase(_oneof_case_[8]);
}
Location_PathEdge::HasHeadingCase Location_PathEdge::has_heading_case() const {
  return Location_PathEdge::HasHeadingCase(_oneof_case_[9]);
}
// -------------------------------------------------------------------

// Location_SearchFilter

// optional .valhalla.RoadClass min_road_class = 1;
bool Location_SearchFilter::has_min_road_class() const {
  return has_min_road_class_case() == kMinRoadClass;
}
void Location_SearchFilter::set_has_min_road_class() {
  _oneof_case_[0] = kMinRoadClass;
}
void Location_SearchFilter::clear_min_road_class() {
  if (has_min_road_class()) {
    has_min_road_class_.min_road_class_ = 0;
    clear_has_has_min_road_class();
  }
}
 ::valhalla::RoadClass Location_SearchFilter::min_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.min_road_class)
  if (has_min_road_class()) {
    return static_cast< ::valhalla::RoadClass >(has_min_road_class_.min_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
 void Location_SearchFilter::set_min_road_class(::valhalla::RoadClass value) {
  if (!has_min_road_class()) {
    clear_has_min_road_class();
    set_has_min_road_class();
  }
  has_min_road_class_.min_road_class_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.min_road_class)
}

// optional .valhalla.RoadClass max_road_class = 2;
bool Location_SearchFilter::has_max_road_class() const {
  return has_max_road_class_case() == kMaxRoadClass;
}
void Location_SearchFilter::set_has_max_road_class() {
  _oneof_case_[1] = kMaxRoadClass;
}
void Location_SearchFilter::clear_max_road_class() {
  if (has_max_road_class()) {
    has_max_road_class_.max_road_class_ = 0;
    clear_has_has_max_road_class();
  }
}
 ::valhalla::RoadClass Location_SearchFilter::max_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.max_road_class)
  if (has_max_road_class()) {
    return static_cast< ::valhalla::RoadClass >(has_max_road_class_.max_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
 void Location_SearchFilter::set_max_road_class(::valhalla::RoadClass value) {
  if (!has_max_road_class()) {
    clear_has_max_road_class();
    set_has_max_road_class();
  }
  has_max_road_class_.max_road_class_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.max_road_class)
}

// optional bool exclude_tunnel = 3;
bool Location_SearchFilter::has_exclude_tunnel() const {
  return has_exclude_tunnel_case() == kExcludeTunnel;
}
void Location_SearchFilter::set_has_exclude_tunnel() {
  _oneof_case_[2] = kExcludeTunnel;
}
void Location_SearchFilter::clear_exclude_tunnel() {
  if (has_exclude_tunnel()) {
    has_exclude_tunnel_.exclude_tunnel_ = false;
    clear_has_has_exclude_tunnel();
  }
}
 bool Location_SearchFilter::exclude_tunnel() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_tunnel)
  if (has_exclude_tunnel()) {
    return has_exclude_tunnel_.exclude_tunnel_;
  }
  return false;
}
 void Location_SearchFilter::set_exclude_tunnel(bool value) {
  if (!has_exclude_tunnel()) {
    clear_has_exclude_tunnel();
    set_has_exclude_tunnel();
  }
  has_exclude_tunnel_.exclude_tunnel_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_tunnel)
}

// optional bool exclude_bridge = 4;
bool Location_SearchFilter::has_exclude_bridge() const {
  return has_exclude_bridge_case() == kExcludeBridge;
}
void Location_SearchFilter::set_has_exclude_bridge() {
  _oneof_case_[3] = kExcludeBridge;
}
void Location_SearchFilter::clear_exclude_bridge() {
  if (has_exclude_bridge()) {
    has_exclude_bridge_.exclude_bridge_ = false;
    clear_has_has_exclude_bridge();
  }
}
 bool Location_SearchFilter::exclude_bridge() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_bridge)
  if (has_exclude_bridge()) {
    return has_exclude_bridge_.exclude_bridge_;
  }
  return false;
}
 void Location_SearchFilter::set_exclude_bridge(bool value) {
  if (!has_exclude_bridge()) {
    clear_has_exclude_bridge();
    set_has_exclude_bridge();
  }
  has_exclude_bridge_.exclude_bridge_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_bridge)
}

// optional bool exclude_ramp = 5;
bool Location_SearchFilter::has_exclude_ramp() const {
  return has_exclude_ramp_case() == kExcludeRamp;
}
void Location_SearchFilter::set_has_exclude_ramp() {
  _oneof_case_[4] = kExcludeRamp;
}
void Location_SearchFilter::clear_exclude_ramp() {
  if (has_exclude_ramp()) {
    has_exclude_ramp_.exclude_ramp_ = false;
    clear_has_has_exclude_ramp();
  }
}
 bool Location_SearchFilter::exclude_ramp() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_ramp)
  if (has_exclude_ramp()) {
    return has_exclude_ramp_.exclude_ramp_;
  }
  return false;
}
 void Location_SearchFilter::set_exclude_ramp(bool value) {
  if (!has_exclude_ramp()) {
    clear_has_exclude_ramp();
    set_has_exclude_ramp();
  }
  has_exclude_ramp_.exclude_ramp_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_ramp)
}

// optional bool exclude_closures = 6;
bool Location_SearchFilter::has_exclude_closures() const {
  return has_exclude_closures_case() == kExcludeClosures;
}
void Location_SearchFilter::set_has_exclude_closures() {
  _oneof_case_[5] = kExcludeClosures;
}
void Location_SearchFilter::clear_exclude_closures() {
  if (has_exclude_closures()) {
    has_exclude_closures_.exclude_closures_ = false;
    clear_has_has_exclude_closures();
  }
}
 bool Location_SearchFilter::exclude_closures() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_closures)
  if (has_exclude_closures()) {
    return has_exclude_closures_.exclude_closures_;
  }
  return false;
}
 void Location_SearchFilter::set_exclude_closures(bool value) {
  if (!has_exclude_closures()) {
    clear_has_exclude_closures();
    set_has_exclude_closures();
  }
  has_exclude_closures_.exclude_closures_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_closures)
}

bool Location_SearchFilter::has_has_min_road_class() const {
  return has_min_road_class_case() != HAS_MIN_ROAD_CLASS_NOT_SET;
}
void Location_SearchFilter::clear_has_has_min_road_class() {
  _oneof_case_[0] = HAS_MIN_ROAD_CLASS_NOT_SET;
}
bool Location_SearchFilter::has_has_max_road_class() const {
  return has_max_road_class_case() != HAS_MAX_ROAD_CLASS_NOT_SET;
}
void Location_SearchFilter::clear_has_has_max_road_class() {
  _oneof_case_[1] = HAS_MAX_ROAD_CLASS_NOT_SET;
}
bool Location_SearchFilter::has_has_exclude_tunnel() const {
  return has_exclude_tunnel_case() != HAS_EXCLUDE_TUNNEL_NOT_SET;
}
void Location_SearchFilter::clear_has_has_exclude_tunnel() {
  _oneof_case_[2] = HAS_EXCLUDE_TUNNEL_NOT_SET;
}
bool Location_SearchFilter::has_has_exclude_bridge() const {
  return has_exclude_bridge_case() != HAS_EXCLUDE_BRIDGE_NOT_SET;
}
void Location_SearchFilter::clear_has_has_exclude_bridge() {
  _oneof_case_[3] = HAS_EXCLUDE_BRIDGE_NOT_SET;
}
bool Location_SearchFilter::has_has_exclude_ramp() const {
  return has_exclude_ramp_case() != HAS_EXCLUDE_RAMP_NOT_SET;
}
void Location_SearchFilter::clear_has_has_exclude_ramp() {
  _oneof_case_[4] = HAS_EXCLUDE_RAMP_NOT_SET;
}
bool Location_SearchFilter::has_has_exclude_closures() const {
  return has_exclude_closures_case() != HAS_EXCLUDE_CLOSURES_NOT_SET;
}
void Location_SearchFilter::clear_has_has_exclude_closures() {
  _oneof_case_[5] = HAS_EXCLUDE_CLOSURES_NOT_SET;
}
Location_SearchFilter::HasMinRoadClassCase Location_SearchFilter::has_min_road_class_case() const {
  return Location_SearchFilter::HasMinRoadClassCase(_oneof_case_[0]);
}
Location_SearchFilter::HasMaxRoadClassCase Location_SearchFilter::has_max_road_class_case() const {
  return Location_SearchFilter::HasMaxRoadClassCase(_oneof_case_[1]);
}
Location_SearchFilter::HasExcludeTunnelCase Location_SearchFilter::has_exclude_tunnel_case() const {
  return Location_SearchFilter::HasExcludeTunnelCase(_oneof_case_[2]);
}
Location_SearchFilter::HasExcludeBridgeCase Location_SearchFilter::has_exclude_bridge_case() const {
  return Location_SearchFilter::HasExcludeBridgeCase(_oneof_case_[3]);
}
Location_SearchFilter::HasExcludeRampCase Location_SearchFilter::has_exclude_ramp_case() const {
  return Location_SearchFilter::HasExcludeRampCase(_oneof_case_[4]);
}
Location_SearchFilter::HasExcludeClosuresCase Location_SearchFilter::has_exclude_closures_case() const {
  return Location_SearchFilter::HasExcludeClosuresCase(_oneof_case_[5]);
}
// -------------------------------------------------------------------

// Location

// optional .valhalla.LatLng ll = 1;
bool Location::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
void Location::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
const ::valhalla::LatLng& Location::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
::valhalla::LatLng* Location::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.ll)
  return ll_;
}
::valhalla::LatLng* Location::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
void Location::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.ll)
}

// optional .valhalla.Location.Type type = 2;
bool Location::has_type() const {
  return has_type_case() == kType;
}
void Location::set_has_type() {
  _oneof_case_[0] = kType;
}
void Location::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::Location_Type Location::type() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.type)
  if (has_type()) {
    return static_cast< ::valhalla::Location_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::Location_Type >(0);
}
 void Location::set_type(::valhalla::Location_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.type)
}

// optional uint32 heading = 3;
bool Location::has_heading() const {
  return has_heading_case() == kHeading;
}
void Location::set_has_heading() {
  _oneof_case_[1] = kHeading;
}
void Location::clear_heading() {
  if (has_heading()) {
    has_heading_.heading_ = 0u;
    clear_has_has_heading();
  }
}
 ::google::protobuf::uint32 Location::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading)
  if (has_heading()) {
    return has_heading_.heading_;
  }
  return 0u;
}
 void Location::set_heading(::google::protobuf::uint32 value) {
  if (!has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  has_heading_.heading_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.heading)
}

// optional string name = 4;
bool Location::has_name() const {
  return has_name_case() == kName;
}
void Location::set_has_name() {
  _oneof_case_[2] = kName;
}
void Location::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.name)
}
 void Location::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.name)
}
 void Location::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.name)
}
 ::std::string* Location::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.Location.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.name)
}

// optional string street = 5;
bool Location::has_street() const {
  return has_street_case() == kStreet;
}
void Location::set_has_street() {
  _oneof_case_[3] = kStreet;
}
void Location::clear_street() {
  if (has_street()) {
    has_street_.street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_street();
  }
}
 const ::std::string& Location::street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street)
  if (has_street()) {
    return has_street_.street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_street(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.street)
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.street)
}
 void Location::set_street(const char* value) {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.street)
}
 void Location::set_street(const char* value, size_t size) {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.street)
}
 ::std::string* Location::mutable_street() {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.street)
  return has_street_.street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_street() {
  // @@protoc_insertion_point(field_release:valhalla.Location.street)
  if (has_street()) {
    clear_has_has_street();
    return has_street_.street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_street(::std::string* street) {
  if (!has_street()) {
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_street();
  if (street != NULL) {
    set_has_street();
    has_street_.street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        street);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.street)
}

// optional string city = 6;
bool Location::has_city() const {
  return has_city_case() == kCity;
}
void Location::set_has_city() {
  _oneof_case_[4] = kCity;
}
void Location::clear_city() {
  if (has_city()) {
    has_city_.city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_city();
  }
}
 const ::std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.city)
  if (has_city()) {
    return has_city_.city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_city(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.city)
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.city)
}
 void Location::set_city(const char* value) {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.city)
}
 void Location::set_city(const char* value, size_t size) {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.city)
}
 ::std::string* Location::mutable_city() {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.city)
  return has_city_.city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_city() {
  // @@protoc_insertion_point(field_release:valhalla.Location.city)
  if (has_city()) {
    clear_has_has_city();
    return has_city_.city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_city(::std::string* city) {
  if (!has_city()) {
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_city();
  if (city != NULL) {
    set_has_city();
    has_city_.city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        city);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.city)
}

// optional string state = 7;
bool Location::has_state() const {
  return has_state_case() == kState;
}
void Location::set_has_state() {
  _oneof_case_[5] = kState;
}
void Location::clear_state() {
  if (has_state()) {
    has_state_.state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_state();
  }
}
 const ::std::string& Location::state() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.state)
  if (has_state()) {
    return has_state_.state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.state)
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.state)
}
 void Location::set_state(const char* value) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.state)
}
 void Location::set_state(const char* value, size_t size) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.state)
}
 ::std::string* Location::mutable_state() {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.state)
  return has_state_.state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_state() {
  // @@protoc_insertion_point(field_release:valhalla.Location.state)
  if (has_state()) {
    clear_has_has_state();
    return has_state_.state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_state(::std::string* state) {
  if (!has_state()) {
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_state();
  if (state != NULL) {
    set_has_state();
    has_state_.state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        state);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.state)
}

// optional string postal_code = 8;
bool Location::has_postal_code() const {
  return has_postal_code_case() == kPostalCode;
}
void Location::set_has_postal_code() {
  _oneof_case_[6] = kPostalCode;
}
void Location::clear_postal_code() {
  if (has_postal_code()) {
    has_postal_code_.postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_postal_code();
  }
}
 const ::std::string& Location::postal_code() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.postal_code)
  if (has_postal_code()) {
    return has_postal_code_.postal_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_postal_code(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.postal_code)
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.postal_code)
}
 void Location::set_postal_code(const char* value) {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.postal_code)
}
 void Location::set_postal_code(const char* value, size_t size) {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.postal_code)
}
 ::std::string* Location::mutable_postal_code() {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.postal_code)
  return has_postal_code_.postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_postal_code() {
  // @@protoc_insertion_point(field_release:valhalla.Location.postal_code)
  if (has_postal_code()) {
    clear_has_has_postal_code();
    return has_postal_code_.postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_postal_code(::std::string* postal_code) {
  if (!has_postal_code()) {
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_postal_code();
  if (postal_code != NULL) {
    set_has_postal_code();
    has_postal_code_.postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        postal_code);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.postal_code)
}

// optional string country = 9;
bool Location::has_country() const {
  return has_country_case() == kCountry;
}
void Location::set_has_country() {
  _oneof_case_[7] = kCountry;
}
void Location::clear_country() {
  if (has_country()) {
    has_country_.country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_country();
  }
}
 const ::std::string& Location::country() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.country)
  if (has_country()) {
    return has_country_.country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_country(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.country)
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.country)
}
 void Location::set_country(const char* value) {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.country)
}
 void Location::set_country(const char* value, size_t size) {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.country)
}
 ::std::string* Location::mutable_country() {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.country)
  return has_country_.country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_country() {
  // @@protoc_insertion_point(field_release:valhalla.Location.country)
  if (has_country()) {
    clear_has_has_country();
    return has_country_.country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_country(::std::string* country) {
  if (!has_country()) {
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_country();
  if (country != NULL) {
    set_has_country();
    has_country_.country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        country);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.country)
}

// optional string phone = 10;
bool Location::has_phone() const {
  return has_phone_case() == kPhone;
}
void Location::set_has_phone() {
  _oneof_case_[8] = kPhone;
}
void Location::clear_phone() {
  if (has_phone()) {
    has_phone_.phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_phone();
  }
}
 const ::std::string& Location::phone() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.phone)
  if (has_phone()) {
    return has_phone_.phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_phone(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.phone)
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.phone)
}
 void Location::set_phone(const char* value) {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.phone)
}
 void Location::set_phone(const char* value, size_t size) {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.phone)
}
 ::std::string* Location::mutable_phone() {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.phone)
  return has_phone_.phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_phone() {
  // @@protoc_insertion_point(field_release:valhalla.Location.phone)
  if (has_phone()) {
    clear_has_has_phone();
    return has_phone_.phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_phone(::std::string* phone) {
  if (!has_phone()) {
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_phone();
  if (phone != NULL) {
    set_has_phone();
    has_phone_.phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        phone);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.phone)
}

// optional string url = 11;
bool Location::has_url() const {
  return has_url_case() == kUrl;
}
void Location::set_has_url() {
  _oneof_case_[9] = kUrl;
}
void Location::clear_url() {
  if (has_url()) {
    has_url_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_url();
  }
}
 const ::std::string& Location::url() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.url)
  if (has_url()) {
    return has_url_.url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.url)
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.url)
}
 void Location::set_url(const char* value) {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.url)
}
 void Location::set_url(const char* value, size_t size) {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.url)
}
 ::std::string* Location::mutable_url() {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.url)
  return has_url_.url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_url() {
  // @@protoc_insertion_point(field_release:valhalla.Location.url)
  if (has_url()) {
    clear_has_has_url();
    return has_url_.url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_url(::std::string* url) {
  if (!has_url()) {
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_url();
  if (url != NULL) {
    set_has_url();
    has_url_.url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        url);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.url)
}

// optional string date_time = 12;
bool Location::has_date_time() const {
  return has_date_time_case() == kDateTime;
}
void Location::set_has_date_time() {
  _oneof_case_[10] = kDateTime;
}
void Location::clear_date_time() {
  if (has_date_time()) {
    has_date_time_.date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_date_time();
  }
}
 const ::std::string& Location::date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.date_time)
  if (has_date_time()) {
    return has_date_time_.date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Location::set_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.date_time)
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.date_time)
}
 void Location::set_date_time(const char* value) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.date_time)
}
 void Location::set_date_time(const char* value, size_t size) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.date_time)
}
 ::std::string* Location::mutable_date_time() {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.date_time)
  return has_date_time_.date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Location::release_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.Location.date_time)
  if (has_date_time()) {
    clear_has_has_date_time();
    return has_date_time_.date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Location::set_allocated_date_time(::std::string* date_time) {
  if (!has_date_time()) {
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_date_time();
  if (date_time != NULL) {
    set_has_date_time();
    has_date_time_.date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.date_time)
}

// optional .valhalla.Location.SideOfStreet side_of_street = 13;
bool Location::has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
void Location::set_has_side_of_street() {
  _oneof_case_[11] = kSideOfStreet;
}
void Location::clear_side_of_street() {
  if (has_side_of_street()) {
    has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
 ::valhalla::Location_SideOfStreet Location::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.side_of_street)
  if (has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
 void Location::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  has_side_of_street_.side_of_street_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.side_of_street)
}

// optional uint32 heading_tolerance = 14;
bool Location::has_heading_tolerance() const {
  return has_heading_tolerance_case() == kHeadingTolerance;
}
void Location::set_has_heading_tolerance() {
  _oneof_case_[12] = kHeadingTolerance;
}
void Location::clear_heading_tolerance() {
  if (has_heading_tolerance()) {
    has_heading_tolerance_.heading_tolerance_ = 0u;
    clear_has_has_heading_tolerance();
  }
}
 ::google::protobuf::uint32 Location::heading_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading_tolerance)
  if (has_heading_tolerance()) {
    return has_heading_tolerance_.heading_tolerance_;
  }
  return 0u;
}
 void Location::set_heading_tolerance(::google::protobuf::uint32 value) {
  if (!has_heading_tolerance()) {
    clear_has_heading_tolerance();
    set_has_heading_tolerance();
  }
  has_heading_tolerance_.heading_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.heading_tolerance)
}

// optional uint32 node_snap_tolerance = 15;
bool Location::has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() == kNodeSnapTolerance;
}
void Location::set_has_node_snap_tolerance() {
  _oneof_case_[13] = kNodeSnapTolerance;
}
void Location::clear_node_snap_tolerance() {
  if (has_node_snap_tolerance()) {
    has_node_snap_tolerance_.node_snap_tolerance_ = 0u;
    clear_has_has_node_snap_tolerance();
  }
}
 ::google::protobuf::uint32 Location::node_snap_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.node_snap_tolerance)
  if (has_node_snap_tolerance()) {
    return has_node_snap_tolerance_.node_snap_tolerance_;
  }
  return 0u;
}
 void Location::set_node_snap_tolerance(::google::protobuf::uint32 value) {
  if (!has_node_snap_tolerance()) {
    clear_has_node_snap_tolerance();
    set_has_node_snap_tolerance();
  }
  has_node_snap_tolerance_.node_snap_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.node_snap_tolerance)
}

// optional uint64 way_id = 16;
bool Location::has_way_id() const {
  return has_way_id_case() == kWayId;
}
void Location::set_has_way_id() {
  _oneof_case_[14] = kWayId;
}
void Location::clear_way_id() {
  if (has_way_id()) {
    has_way_id_.way_id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_way_id();
  }
}
 ::google::protobuf::uint64 Location::way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.way_id)
  if (has_way_id()) {
    return has_way_id_.way_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void Location::set_way_id(::google::protobuf::uint64 value) {
  if (!has_way_id()) {
    clear_has_way_id();
    set_has_way_id();
  }
  has_way_id_.way_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.way_id)
}

// optional uint32 minimum_reachability = 17;
bool Location::has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
void Location::set_has_minimum_reachability() {
  _oneof_case_[15] = kMinimumReachability;
}
void Location::clear_minimum_reachability() {
  if (has_minimum_reachability()) {
    has_minimum_reachability_.minimum_reachability_ = 0u;
    clear_has_has_minimum_reachability();
  }
}
 ::google::protobuf::uint32 Location::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.minimum_reachability)
  if (has_minimum_reachability()) {
    return has_minimum_reachability_.minimum_reachability_;
  }
  return 0u;
}
 void Location::set_minimum_reachability(::google::protobuf::uint32 value) {
  if (!has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  has_minimum_reachability_.minimum_reachability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.minimum_reachability)
}

// optional uint32 radius = 18;
bool Location::has_radius() const {
  return has_radius_case() == kRadius;
}
void Location::set_has_radius() {
  _oneof_case_[16] = kRadius;
}
void Location::clear_radius() {
  if (has_radius()) {
    has_radius_.radius_ = 0u;
    clear_has_has_radius();
  }
}
 ::google::protobuf::uint32 Location::radius() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.radius)
  if (has_radius()) {
    return has_radius_.radius_;
  }
  return 0u;
}
 void Location::set_radius(::google::protobuf::uint32 value) {
  if (!has_radius()) {
    clear_has_radius();
    set_has_radius();
  }
  has_radius_.radius_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.radius)
}

// optional uint32 accuracy = 19;
bool Location::has_accuracy() const {
  return has_accuracy_case() == kAccuracy;
}
void Location::set_has_accuracy() {
  _oneof_case_[17] = kAccuracy;
}
void Location::clear_accuracy() {
  if (has_accuracy()) {
    has_accuracy_.accuracy_ = 0u;
    clear_has_has_accuracy();
  }
}
 ::google::protobuf::uint32 Location::accuracy() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.accuracy)
  if (has_accuracy()) {
    return has_accuracy_.accuracy_;
  }
  return 0u;
}
 void Location::set_accuracy(::google::protobuf::uint32 value) {
  if (!has_accuracy()) {
    clear_has_accuracy();
    set_has_accuracy();
  }
  has_accuracy_.accuracy_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.accuracy)
}

// optional double time = 20;
bool Location::has_time() const {
  return has_time_case() == kTime;
}
void Location::set_has_time() {
  _oneof_case_[18] = kTime;
}
void Location::clear_time() {
  if (has_time()) {
    has_time_.time_ = 0;
    clear_has_has_time();
  }
}
 double Location::time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.time)
  if (has_time()) {
    return has_time_.time_;
  }
  return 0;
}
 void Location::set_time(double value) {
  if (!has_time()) {
    clear_has_time();
    set_has_time();
  }
  has_time_.time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.time)
}

// optional bool skip_ranking_candidates = 21;
bool Location::has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() == kSkipRankingCandidates;
}
void Location::set_has_skip_ranking_candidates() {
  _oneof_case_[19] = kSkipRankingCandidates;
}
void Location::clear_skip_ranking_candidates() {
  if (has_skip_ranking_candidates()) {
    has_skip_ranking_candidates_.skip_ranking_candidates_ = false;
    clear_has_has_skip_ranking_candidates();
  }
}
 bool Location::skip_ranking_candidates() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.skip_ranking_candidates)
  if (has_skip_ranking_candidates()) {
    return has_skip_ranking_candidates_.skip_ranking_candidates_;
  }
  return false;
}
 void Location::set_skip_ranking_candidates(bool value) {
  if (!has_skip_ranking_candidates()) {
    clear_has_skip_ranking_candidates();
    set_has_skip_ranking_candidates();
  }
  has_skip_ranking_candidates_.skip_ranking_candidates_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.skip_ranking_candidates)
}

// repeated .valhalla.Location.PathEdge path_edges = 22;
int Location::path_edges_size() const {
  return path_edges_.size();
}
void Location::clear_path_edges() {
  path_edges_.Clear();
}
const ::valhalla::Location_PathEdge& Location::path_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.path_edges)
  return path_edges_.Get(index);
}
::valhalla::Location_PathEdge* Location::mutable_path_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.path_edges)
  return path_edges_.Mutable(index);
}
::valhalla::Location_PathEdge* Location::add_path_edges() {
  // @@protoc_insertion_point(field_add:valhalla.Location.path_edges)
  return path_edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_path_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.path_edges)
  return &path_edges_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::path_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.path_edges)
  return path_edges_;
}

// repeated .valhalla.Location.PathEdge filtered_edges = 23;
int Location::filtered_edges_size() const {
  return filtered_edges_.size();
}
void Location::clear_filtered_edges() {
  filtered_edges_.Clear();
}
const ::valhalla::Location_PathEdge& Location::filtered_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.filtered_edges)
  return filtered_edges_.Get(index);
}
::valhalla::Location_PathEdge* Location::mutable_filtered_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.filtered_edges)
  return filtered_edges_.Mutable(index);
}
::valhalla::Location_PathEdge* Location::add_filtered_edges() {
  // @@protoc_insertion_point(field_add:valhalla.Location.filtered_edges)
  return filtered_edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_filtered_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.filtered_edges)
  return &filtered_edges_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::filtered_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.filtered_edges)
  return filtered_edges_;
}

// optional uint32 original_index = 24;
bool Location::has_original_index() const {
  return has_original_index_case() == kOriginalIndex;
}
void Location::set_has_original_index() {
  _oneof_case_[20] = kOriginalIndex;
}
void Location::clear_original_index() {
  if (has_original_index()) {
    has_original_index_.original_index_ = 0u;
    clear_has_has_original_index();
  }
}
 ::google::protobuf::uint32 Location::original_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.original_index)
  if (has_original_index()) {
    return has_original_index_.original_index_;
  }
  return 0u;
}
 void Location::set_original_index(::google::protobuf::uint32 value) {
  if (!has_original_index()) {
    clear_has_original_index();
    set_has_original_index();
  }
  has_original_index_.original_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.original_index)
}

// optional .valhalla.LatLng projected_ll = 25;
bool Location::has_projected_ll() const {
  return !_is_default_instance_ && projected_ll_ != NULL;
}
void Location::clear_projected_ll() {
  if (GetArenaNoVirtual() == NULL && projected_ll_ != NULL) delete projected_ll_;
  projected_ll_ = NULL;
}
const ::valhalla::LatLng& Location::projected_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.projected_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return projected_ll_ != NULL ? *projected_ll_ : *default_instance().projected_ll_;
#else
  return projected_ll_ != NULL ? *projected_ll_ : *default_instance_->projected_ll_;
#endif
}
::valhalla::LatLng* Location::mutable_projected_ll() {
  
  if (projected_ll_ == NULL) {
    projected_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.projected_ll)
  return projected_ll_;
}
::valhalla::LatLng* Location::release_projected_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.projected_ll)
  
  ::valhalla::LatLng* temp = projected_ll_;
  projected_ll_ = NULL;
  return temp;
}
void Location::set_allocated_projected_ll(::valhalla::LatLng* projected_ll) {
  delete projected_ll_;
  projected_ll_ = projected_ll;
  if (projected_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.projected_ll)
}

// optional uint32 leg_shape_index = 35;
bool Location::has_leg_shape_index() const {
  return has_leg_shape_index_case() == kLegShapeIndex;
}
void Location::set_has_leg_shape_index() {
  _oneof_case_[21] = kLegShapeIndex;
}
void Location::clear_leg_shape_index() {
  if (has_leg_shape_index()) {
    has_leg_shape_index_.leg_shape_index_ = 0u;
    clear_has_has_leg_shape_index();
  }
}
 ::google::protobuf::uint32 Location::leg_shape_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.leg_shape_index)
  if (has_leg_shape_index()) {
    return has_leg_shape_index_.leg_shape_index_;
  }
  return 0u;
}
 void Location::set_leg_shape_index(::google::protobuf::uint32 value) {
  if (!has_leg_shape_index()) {
    clear_has_leg_shape_index();
    set_has_leg_shape_index();
  }
  has_leg_shape_index_.leg_shape_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.leg_shape_index)
}

// optional double distance_from_leg_origin = 36;
bool Location::has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() == kDistanceFromLegOrigin;
}
void Location::set_has_distance_from_leg_origin() {
  _oneof_case_[22] = kDistanceFromLegOrigin;
}
void Location::clear_distance_from_leg_origin() {
  if (has_distance_from_leg_origin()) {
    has_distance_from_leg_origin_.distance_from_leg_origin_ = 0;
    clear_has_has_distance_from_leg_origin();
  }
}
 double Location::distance_from_leg_origin() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.distance_from_leg_origin)
  if (has_distance_from_leg_origin()) {
    return has_distance_from_leg_origin_.distance_from_leg_origin_;
  }
  return 0;
}
 void Location::set_distance_from_leg_origin(double value) {
  if (!has_distance_from_leg_origin()) {
    clear_has_distance_from_leg_origin();
    set_has_distance_from_leg_origin();
  }
  has_distance_from_leg_origin_.distance_from_leg_origin_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.distance_from_leg_origin)
}

// optional .valhalla.Location.PreferredSide preferred_side = 26;
bool Location::has_preferred_side() const {
  return has_preferred_side_case() == kPreferredSide;
}
void Location::set_has_preferred_side() {
  _oneof_case_[23] = kPreferredSide;
}
void Location::clear_preferred_side() {
  if (has_preferred_side()) {
    has_preferred_side_.preferred_side_ = 0;
    clear_has_has_preferred_side();
  }
}
 ::valhalla::Location_PreferredSide Location::preferred_side() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_side)
  if (has_preferred_side()) {
    return static_cast< ::valhalla::Location_PreferredSide >(has_preferred_side_.preferred_side_);
  }
  return static_cast< ::valhalla::Location_PreferredSide >(0);
}
 void Location::set_preferred_side(::valhalla::Location_PreferredSide value) {
  if (!has_preferred_side()) {
    clear_has_preferred_side();
    set_has_preferred_side();
  }
  has_preferred_side_.preferred_side_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_side)
}

// optional .valhalla.LatLng display_ll = 27;
bool Location::has_display_ll() const {
  return !_is_default_instance_ && display_ll_ != NULL;
}
void Location::clear_display_ll() {
  if (GetArenaNoVirtual() == NULL && display_ll_ != NULL) delete display_ll_;
  display_ll_ = NULL;
}
const ::valhalla::LatLng& Location::display_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.display_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return display_ll_ != NULL ? *display_ll_ : *default_instance().display_ll_;
#else
  return display_ll_ != NULL ? *display_ll_ : *default_instance_->display_ll_;
#endif
}
::valhalla::LatLng* Location::mutable_display_ll() {
  
  if (display_ll_ == NULL) {
    display_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.display_ll)
  return display_ll_;
}
::valhalla::LatLng* Location::release_display_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.display_ll)
  
  ::valhalla::LatLng* temp = display_ll_;
  display_ll_ = NULL;
  return temp;
}
void Location::set_allocated_display_ll(::valhalla::LatLng* display_ll) {
  delete display_ll_;
  display_ll_ = display_ll;
  if (display_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.display_ll)
}

// optional uint32 search_cutoff = 28;
bool Location::has_search_cutoff() const {
  return has_search_cutoff_case() == kSearchCutoff;
}
void Location::set_has_search_cutoff() {
  _oneof_case_[24] = kSearchCutoff;
}
void Location::clear_search_cutoff() {
  if (has_search_cutoff()) {
    has_search_cutoff_.search_cutoff_ = 0u;
    clear_has_has_search_cutoff();
  }
}
 ::google::protobuf::uint32 Location::search_cutoff() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_cutoff)
  if (has_search_cutoff()) {
    return has_search_cutoff_.search_cutoff_;
  }
  return 0u;
}
 void Location::set_search_cutoff(::google::protobuf::uint32 value) {
  if (!has_search_cutoff()) {
    clear_has_search_cutoff();
    set_has_search_cutoff();
  }
  has_search_cutoff_.search_cutoff_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.search_cutoff)
}

// optional uint32 street_side_tolerance = 29;
bool Location::has_street_side_tolerance() const {
  return has_street_side_tolerance_case() == kStreetSideTolerance;
}
void Location::set_has_street_side_tolerance() {
  _oneof_case_[25] = kStreetSideTolerance;
}
void Location::clear_street_side_tolerance() {
  if (has_street_side_tolerance()) {
    has_street_side_tolerance_.street_side_tolerance_ = 0u;
    clear_has_has_street_side_tolerance();
  }
}
 ::google::protobuf::uint32 Location::street_side_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_tolerance)
  if (has_street_side_tolerance()) {
    return has_street_side_tolerance_.street_side_tolerance_;
  }
  return 0u;
}
 void Location::set_street_side_tolerance(::google::protobuf::uint32 value) {
  if (!has_street_side_tolerance()) {
    clear_has_street_side_tolerance();
    set_has_street_side_tolerance();
  }
  has_street_side_tolerance_.street_side_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_tolerance)
}

// optional uint32 route_index = 30;
bool Location::has_route_index() const {
  return has_route_index_case() == kRouteIndex;
}
void Location::set_has_route_index() {
  _oneof_case_[26] = kRouteIndex;
}
void Location::clear_route_index() {
  if (has_route_index()) {
    has_route_index_.route_index_ = 0u;
    clear_has_has_route_index();
  }
}
 ::google::protobuf::uint32 Location::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.route_index)
  if (has_route_index()) {
    return has_route_index_.route_index_;
  }
  return 0u;
}
 void Location::set_route_index(::google::protobuf::uint32 value) {
  if (!has_route_index()) {
    clear_has_route_index();
    set_has_route_index();
  }
  has_route_index_.route_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.route_index)
}

// optional uint32 waypoint_index = 31;
bool Location::has_waypoint_index() const {
  return has_waypoint_index_case() == kWaypointIndex;
}
void Location::set_has_waypoint_index() {
  _oneof_case_[27] = kWaypointIndex;
}
void Location::clear_waypoint_index() {
  if (has_waypoint_index()) {
    has_waypoint_index_.waypoint_index_ = 0u;
    clear_has_has_waypoint_index();
  }
}
 ::google::protobuf::uint32 Location::waypoint_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.waypoint_index)
  if (has_waypoint_index()) {
    return has_waypoint_index_.waypoint_index_;
  }
  return 0u;
}
 void Location::set_waypoint_index(::google::protobuf::uint32 value) {
  if (!has_waypoint_index()) {
    clear_has_waypoint_index();
    set_has_waypoint_index();
  }
  has_waypoint_index_.waypoint_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.waypoint_index)
}

// optional .valhalla.Location.SearchFilter search_filter = 32;
bool Location::has_search_filter() const {
  return !_is_default_instance_ && search_filter_ != NULL;
}
void Location::clear_search_filter() {
  if (GetArenaNoVirtual() == NULL && search_filter_ != NULL) delete search_filter_;
  search_filter_ = NULL;
}
const ::valhalla::Location_SearchFilter& Location::search_filter() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_filter)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_filter_ != NULL ? *search_filter_ : *default_instance().search_filter_;
#else
  return search_filter_ != NULL ? *search_filter_ : *default_instance_->search_filter_;
#endif
}
::valhalla::Location_SearchFilter* Location::mutable_search_filter() {
  
  if (search_filter_ == NULL) {
    search_filter_ = new ::valhalla::Location_SearchFilter;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.search_filter)
  return search_filter_;
}
::valhalla::Location_SearchFilter* Location::release_search_filter() {
  // @@protoc_insertion_point(field_release:valhalla.Location.search_filter)
  
  ::valhalla::Location_SearchFilter* temp = search_filter_;
  search_filter_ = NULL;
  return temp;
}
void Location::set_allocated_search_filter(::valhalla::Location_SearchFilter* search_filter) {
  delete search_filter_;
  search_filter_ = search_filter;
  if (search_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.search_filter)
}

// optional uint32 street_side_max_distance = 33;
bool Location::has_street_side_max_distance() const {
  return has_street_side_max_distance_case() == kStreetSideMaxDistance;
}
void Location::set_has_street_side_max_distance() {
  _oneof_case_[28] = kStreetSideMaxDistance;
}
void Location::clear_street_side_max_distance() {
  if (has_street_side_max_distance()) {
    has_street_side_max_distance_.street_side_max_distance_ = 0u;
    clear_has_has_street_side_max_distance();
  }
}
 ::google::protobuf::uint32 Location::street_side_max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_max_distance)
  if (has_street_side_max_distance()) {
    return has_street_side_max_distance_.street_side_max_distance_;
  }
  return 0u;
}
 void Location::set_street_side_max_distance(::google::protobuf::uint32 value) {
  if (!has_street_side_max_distance()) {
    clear_has_street_side_max_distance();
    set_has_street_side_max_distance();
  }
  has_street_side_max_distance_.street_side_max_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_max_distance)
}

// optional int32 preferred_layer = 34;
bool Location::has_preferred_layer() const {
  return has_preferred_layer_case() == kPreferredLayer;
}
void Location::set_has_preferred_layer() {
  _oneof_case_[29] = kPreferredLayer;
}
void Location::clear_preferred_layer() {
  if (has_preferred_layer()) {
    has_preferred_layer_.preferred_layer_ = 0;
    clear_has_has_preferred_layer();
  }
}
 ::google::protobuf::int32 Location::preferred_layer() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_layer)
  if (has_preferred_layer()) {
    return has_preferred_layer_.preferred_layer_;
  }
  return 0;
}
 void Location::set_preferred_layer(::google::protobuf::int32 value) {
  if (!has_preferred_layer()) {
    clear_has_preferred_layer();
    set_has_preferred_layer();
  }
  has_preferred_layer_.preferred_layer_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_layer)
}

bool Location::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void Location::clear_has_has_type() {
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}
bool Location::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
void Location::clear_has_has_heading() {
  _oneof_case_[1] = HAS_HEADING_NOT_SET;
}
bool Location::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void Location::clear_has_has_name() {
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}
bool Location::has_has_street() const {
  return has_street_case() != HAS_STREET_NOT_SET;
}
void Location::clear_has_has_street() {
  _oneof_case_[3] = HAS_STREET_NOT_SET;
}
bool Location::has_has_city() const {
  return has_city_case() != HAS_CITY_NOT_SET;
}
void Location::clear_has_has_city() {
  _oneof_case_[4] = HAS_CITY_NOT_SET;
}
bool Location::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
void Location::clear_has_has_state() {
  _oneof_case_[5] = HAS_STATE_NOT_SET;
}
bool Location::has_has_postal_code() const {
  return has_postal_code_case() != HAS_POSTAL_CODE_NOT_SET;
}
void Location::clear_has_has_postal_code() {
  _oneof_case_[6] = HAS_POSTAL_CODE_NOT_SET;
}
bool Location::has_has_country() const {
  return has_country_case() != HAS_COUNTRY_NOT_SET;
}
void Location::clear_has_has_country() {
  _oneof_case_[7] = HAS_COUNTRY_NOT_SET;
}
bool Location::has_has_phone() const {
  return has_phone_case() != HAS_PHONE_NOT_SET;
}
void Location::clear_has_has_phone() {
  _oneof_case_[8] = HAS_PHONE_NOT_SET;
}
bool Location::has_has_url() const {
  return has_url_case() != HAS_URL_NOT_SET;
}
void Location::clear_has_has_url() {
  _oneof_case_[9] = HAS_URL_NOT_SET;
}
bool Location::has_has_date_time() const {
  return has_date_time_case() != HAS_DATE_TIME_NOT_SET;
}
void Location::clear_has_has_date_time() {
  _oneof_case_[10] = HAS_DATE_TIME_NOT_SET;
}
bool Location::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
void Location::clear_has_has_side_of_street() {
  _oneof_case_[11] = HAS_SIDE_OF_STREET_NOT_SET;
}
bool Location::has_has_heading_tolerance() const {
  return has_heading_tolerance_case() != HAS_HEADING_TOLERANCE_NOT_SET;
}
void Location::clear_has_has_heading_tolerance() {
  _oneof_case_[12] = HAS_HEADING_TOLERANCE_NOT_SET;
}
bool Location::has_has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() != HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
void Location::clear_has_has_node_snap_tolerance() {
  _oneof_case_[13] = HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
bool Location::has_has_way_id() const {
  return has_way_id_case() != HAS_WAY_ID_NOT_SET;
}
void Location::clear_has_has_way_id() {
  _oneof_case_[14] = HAS_WAY_ID_NOT_SET;
}
bool Location::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
void Location::clear_has_has_minimum_reachability() {
  _oneof_case_[15] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
bool Location::has_has_radius() const {
  return has_radius_case() != HAS_RADIUS_NOT_SET;
}
void Location::clear_has_has_radius() {
  _oneof_case_[16] = HAS_RADIUS_NOT_SET;
}
bool Location::has_has_accuracy() const {
  return has_accuracy_case() != HAS_ACCURACY_NOT_SET;
}
void Location::clear_has_has_accuracy() {
  _oneof_case_[17] = HAS_ACCURACY_NOT_SET;
}
bool Location::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
void Location::clear_has_has_time() {
  _oneof_case_[18] = HAS_TIME_NOT_SET;
}
bool Location::has_has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() != HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
void Location::clear_has_has_skip_ranking_candidates() {
  _oneof_case_[19] = HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
bool Location::has_has_original_index() const {
  return has_original_index_case() != HAS_ORIGINAL_INDEX_NOT_SET;
}
void Location::clear_has_has_original_index() {
  _oneof_case_[20] = HAS_ORIGINAL_INDEX_NOT_SET;
}
bool Location::has_has_leg_shape_index() const {
  return has_leg_shape_index_case() != HAS_LEG_SHAPE_INDEX_NOT_SET;
}
void Location::clear_has_has_leg_shape_index() {
  _oneof_case_[21] = HAS_LEG_SHAPE_INDEX_NOT_SET;
}
bool Location::has_has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() != HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
void Location::clear_has_has_distance_from_leg_origin() {
  _oneof_case_[22] = HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
bool Location::has_has_preferred_side() const {
  return has_preferred_side_case() != HAS_PREFERRED_SIDE_NOT_SET;
}
void Location::clear_has_has_preferred_side() {
  _oneof_case_[23] = HAS_PREFERRED_SIDE_NOT_SET;
}
bool Location::has_has_search_cutoff() const {
  return has_search_cutoff_case() != HAS_SEARCH_CUTOFF_NOT_SET;
}
void Location::clear_has_has_search_cutoff() {
  _oneof_case_[24] = HAS_SEARCH_CUTOFF_NOT_SET;
}
bool Location::has_has_street_side_tolerance() const {
  return has_street_side_tolerance_case() != HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
void Location::clear_has_has_street_side_tolerance() {
  _oneof_case_[25] = HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
bool Location::has_has_route_index() const {
  return has_route_index_case() != HAS_ROUTE_INDEX_NOT_SET;
}
void Location::clear_has_has_route_index() {
  _oneof_case_[26] = HAS_ROUTE_INDEX_NOT_SET;
}
bool Location::has_has_waypoint_index() const {
  return has_waypoint_index_case() != HAS_WAYPOINT_INDEX_NOT_SET;
}
void Location::clear_has_has_waypoint_index() {
  _oneof_case_[27] = HAS_WAYPOINT_INDEX_NOT_SET;
}
bool Location::has_has_street_side_max_distance() const {
  return has_street_side_max_distance_case() != HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
void Location::clear_has_has_street_side_max_distance() {
  _oneof_case_[28] = HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
bool Location::has_has_preferred_layer() const {
  return has_preferred_layer_case() != HAS_PREFERRED_LAYER_NOT_SET;
}
void Location::clear_has_has_preferred_layer() {
  _oneof_case_[29] = HAS_PREFERRED_LAYER_NOT_SET;
}
Location::HasTypeCase Location::has_type_case() const {
  return Location::HasTypeCase(_oneof_case_[0]);
}
Location::HasHeadingCase Location::has_heading_case() const {
  return Location::HasHeadingCase(_oneof_case_[1]);
}
Location::HasNameCase Location::has_name_case() const {
  return Location::HasNameCase(_oneof_case_[2]);
}
Location::HasStreetCase Location::has_street_case() const {
  return Location::HasStreetCase(_oneof_case_[3]);
}
Location::HasCityCase Location::has_city_case() const {
  return Location::HasCityCase(_oneof_case_[4]);
}
Location::HasStateCase Location::has_state_case() const {
  return Location::HasStateCase(_oneof_case_[5]);
}
Location::HasPostalCodeCase Location::has_postal_code_case() const {
  return Location::HasPostalCodeCase(_oneof_case_[6]);
}
Location::HasCountryCase Location::has_country_case() const {
  return Location::HasCountryCase(_oneof_case_[7]);
}
Location::HasPhoneCase Location::has_phone_case() const {
  return Location::HasPhoneCase(_oneof_case_[8]);
}
Location::HasUrlCase Location::has_url_case() const {
  return Location::HasUrlCase(_oneof_case_[9]);
}
Location::HasDateTimeCase Location::has_date_time_case() const {
  return Location::HasDateTimeCase(_oneof_case_[10]);
}
Location::HasSideOfStreetCase Location::has_side_of_street_case() const {
  return Location::HasSideOfStreetCase(_oneof_case_[11]);
}
Location::HasHeadingToleranceCase Location::has_heading_tolerance_case() const {
  return Location::HasHeadingToleranceCase(_oneof_case_[12]);
}
Location::HasNodeSnapToleranceCase Location::has_node_snap_tolerance_case() const {
  return Location::HasNodeSnapToleranceCase(_oneof_case_[13]);
}
Location::HasWayIdCase Location::has_way_id_case() const {
  return Location::HasWayIdCase(_oneof_case_[14]);
}
Location::HasMinimumReachabilityCase Location::has_minimum_reachability_case() const {
  return Location::HasMinimumReachabilityCase(_oneof_case_[15]);
}
Location::HasRadiusCase Location::has_radius_case() const {
  return Location::HasRadiusCase(_oneof_case_[16]);
}
Location::HasAccuracyCase Location::has_accuracy_case() const {
  return Location::HasAccuracyCase(_oneof_case_[17]);
}
Location::HasTimeCase Location::has_time_case() const {
  return Location::HasTimeCase(_oneof_case_[18]);
}
Location::HasSkipRankingCandidatesCase Location::has_skip_ranking_candidates_case() const {
  return Location::HasSkipRankingCandidatesCase(_oneof_case_[19]);
}
Location::HasOriginalIndexCase Location::has_original_index_case() const {
  return Location::HasOriginalIndexCase(_oneof_case_[20]);
}
Location::HasLegShapeIndexCase Location::has_leg_shape_index_case() const {
  return Location::HasLegShapeIndexCase(_oneof_case_[21]);
}
Location::HasDistanceFromLegOriginCase Location::has_distance_from_leg_origin_case() const {
  return Location::HasDistanceFromLegOriginCase(_oneof_case_[22]);
}
Location::HasPreferredSideCase Location::has_preferred_side_case() const {
  return Location::HasPreferredSideCase(_oneof_case_[23]);
}
Location::HasSearchCutoffCase Location::has_search_cutoff_case() const {
  return Location::HasSearchCutoffCase(_oneof_case_[24]);
}
Location::HasStreetSideToleranceCase Location::has_street_side_tolerance_case() const {
  return Location::HasStreetSideToleranceCase(_oneof_case_[25]);
}
Location::HasRouteIndexCase Location::has_route_index_case() const {
  return Location::HasRouteIndexCase(_oneof_case_[26]);
}
Location::HasWaypointIndexCase Location::has_waypoint_index_case() const {
  return Location::HasWaypointIndexCase(_oneof_case_[27]);
}
Location::HasStreetSideMaxDistanceCase Location::has_street_side_max_distance_case() const {
  return Location::HasStreetSideMaxDistanceCase(_oneof_case_[28]);
}
Location::HasPreferredLayerCase Location::has_preferred_layer_case() const {
  return Location::HasPreferredLayerCase(_oneof_case_[29]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitEgressInfo::kOnestopIdFieldNumber;
const int TransitEgressInfo::kNameFieldNumber;
const int TransitEgressInfo::kLlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitEgressInfo::TransitEgressInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TransitEgressInfo)
}

void TransitEgressInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitEgressInfo::TransitEgressInfo(const TransitEgressInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitEgressInfo)
}

void TransitEgressInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ll_ = NULL;
  clear_has_has_onestop_id();
  clear_has_has_name();
}

TransitEgressInfo::~TransitEgressInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitEgressInfo)
  SharedDtor();
}

void TransitEgressInfo::SharedDtor() {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (has_has_name()) {
    clear_has_name();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitEgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitEgressInfo& TransitEgressInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitEgressInfo* TransitEgressInfo::default_instance_ = NULL;

TransitEgressInfo* TransitEgressInfo::New(::google::protobuf::Arena* arena) const {
  TransitEgressInfo* n = new TransitEgressInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransitEgressInfo::clear_has_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitEgressInfo)
  switch(has_onestop_id_case()) {
    case kOnestopId: {
      has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}

void TransitEgressInfo::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitEgressInfo)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}


void TransitEgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitEgressInfo)
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
  clear_has_onestop_id();
  clear_has_name();
}

bool TransitEgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TransitEgressInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitEgressInfo.onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitEgressInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (tag == 26) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TransitEgressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TransitEgressInfo)
  return false;
#undef DO_
}

void TransitEgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TransitEgressInfo)
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitEgressInfo.onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->onestop_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitEgressInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->ll_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TransitEgressInfo)
}

int TransitEgressInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitEgressInfo)
  int total_size = 0;

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ll_);
  }

  switch (has_onestop_id_case()) {
    // optional string onestop_id = 1;
    case kOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_name_case()) {
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitEgressInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitEgressInfo*>(&from));
}

void TransitEgressInfo::MergeFrom(const TransitEgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitEgressInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_onestop_id_case()) {
    case kOnestopId: {
      set_onestop_id(from.onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  if (from.has_ll()) {
    mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
  }
}

void TransitEgressInfo::CopyFrom(const TransitEgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitEgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitEgressInfo::IsInitialized() const {

  return true;
}

void TransitEgressInfo::Swap(TransitEgressInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitEgressInfo::InternalSwap(TransitEgressInfo* other) {
  std::swap(ll_, other->ll_);
  std::swap(has_onestop_id_, other->has_onestop_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransitEgressInfo::GetTypeName() const {
  return "valhalla.TransitEgressInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransitEgressInfo

// optional string onestop_id = 1;
bool TransitEgressInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
void TransitEgressInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
void TransitEgressInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
 const ::std::string& TransitEgressInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitEgressInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.onestop_id)
}
 void TransitEgressInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitEgressInfo.onestop_id)
}
 void TransitEgressInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitEgressInfo.onestop_id)
}
 ::std::string* TransitEgressInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitEgressInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitEgressInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.onestop_id)
}

// optional string name = 2;
bool TransitEgressInfo::has_name() const {
  return has_name_case() == kName;
}
void TransitEgressInfo::set_has_name() {
  _oneof_case_[1] = kName;
}
void TransitEgressInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& TransitEgressInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitEgressInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.name)
}
 void TransitEgressInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitEgressInfo.name)
}
 void TransitEgressInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitEgressInfo.name)
}
 ::std::string* TransitEgressInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitEgressInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitEgressInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.name)
}

// optional .valhalla.LatLng ll = 3;
bool TransitEgressInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
void TransitEgressInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
const ::valhalla::LatLng& TransitEgressInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
::valhalla::LatLng* TransitEgressInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.ll)
  return ll_;
}
::valhalla::LatLng* TransitEgressInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
void TransitEgressInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.ll)
}

bool TransitEgressInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
void TransitEgressInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
bool TransitEgressInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void TransitEgressInfo::clear_has_has_name() {
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}
TransitEgressInfo::HasOnestopIdCase TransitEgressInfo::has_onestop_id_case() const {
  return TransitEgressInfo::HasOnestopIdCase(_oneof_case_[0]);
}
TransitEgressInfo::HasNameCase TransitEgressInfo::has_name_case() const {
  return TransitEgressInfo::HasNameCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitStationInfo::kOnestopIdFieldNumber;
const int TransitStationInfo::kNameFieldNumber;
const int TransitStationInfo::kLlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitStationInfo::TransitStationInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TransitStationInfo)
}

void TransitStationInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitStationInfo::TransitStationInfo(const TransitStationInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitStationInfo)
}

void TransitStationInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ll_ = NULL;
  clear_has_has_onestop_id();
  clear_has_has_name();
}

TransitStationInfo::~TransitStationInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitStationInfo)
  SharedDtor();
}

void TransitStationInfo::SharedDtor() {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (has_has_name()) {
    clear_has_name();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitStationInfo& TransitStationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitStationInfo* TransitStationInfo::default_instance_ = NULL;

TransitStationInfo* TransitStationInfo::New(::google::protobuf::Arena* arena) const {
  TransitStationInfo* n = new TransitStationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransitStationInfo::clear_has_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitStationInfo)
  switch(has_onestop_id_case()) {
    case kOnestopId: {
      has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}

void TransitStationInfo::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitStationInfo)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}


void TransitStationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitStationInfo)
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
  clear_has_onestop_id();
  clear_has_name();
}

bool TransitStationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TransitStationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitStationInfo.onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitStationInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 3;
      case 3: {
        if (tag == 26) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TransitStationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TransitStationInfo)
  return false;
#undef DO_
}

void TransitStationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TransitStationInfo)
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitStationInfo.onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->onestop_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitStationInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->ll_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TransitStationInfo)
}

int TransitStationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitStationInfo)
  int total_size = 0;

  // optional .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ll_);
  }

  switch (has_onestop_id_case()) {
    // optional string onestop_id = 1;
    case kOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_name_case()) {
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitStationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitStationInfo*>(&from));
}

void TransitStationInfo::MergeFrom(const TransitStationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitStationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_onestop_id_case()) {
    case kOnestopId: {
      set_onestop_id(from.onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  if (from.has_ll()) {
    mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
  }
}

void TransitStationInfo::CopyFrom(const TransitStationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitStationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitStationInfo::IsInitialized() const {

  return true;
}

void TransitStationInfo::Swap(TransitStationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitStationInfo::InternalSwap(TransitStationInfo* other) {
  std::swap(ll_, other->ll_);
  std::swap(has_onestop_id_, other->has_onestop_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransitStationInfo::GetTypeName() const {
  return "valhalla.TransitStationInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransitStationInfo

// optional string onestop_id = 1;
bool TransitStationInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
void TransitStationInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
void TransitStationInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
 const ::std::string& TransitStationInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitStationInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.onestop_id)
}
 void TransitStationInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitStationInfo.onestop_id)
}
 void TransitStationInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitStationInfo.onestop_id)
}
 ::std::string* TransitStationInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitStationInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitStationInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.onestop_id)
}

// optional string name = 2;
bool TransitStationInfo::has_name() const {
  return has_name_case() == kName;
}
void TransitStationInfo::set_has_name() {
  _oneof_case_[1] = kName;
}
void TransitStationInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& TransitStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitStationInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.name)
}
 void TransitStationInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitStationInfo.name)
}
 void TransitStationInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitStationInfo.name)
}
 ::std::string* TransitStationInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitStationInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.name)
}

// optional .valhalla.LatLng ll = 3;
bool TransitStationInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
void TransitStationInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
const ::valhalla::LatLng& TransitStationInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
::valhalla::LatLng* TransitStationInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.ll)
  return ll_;
}
::valhalla::LatLng* TransitStationInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
void TransitStationInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.ll)
}

bool TransitStationInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
void TransitStationInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
bool TransitStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void TransitStationInfo::clear_has_has_name() {
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}
TransitStationInfo::HasOnestopIdCase TransitStationInfo::has_onestop_id_case() const {
  return TransitStationInfo::HasOnestopIdCase(_oneof_case_[0]);
}
TransitStationInfo::HasNameCase TransitStationInfo::has_name_case() const {
  return TransitStationInfo::HasNameCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BikeShareStationInfo::kNameFieldNumber;
const int BikeShareStationInfo::kRefFieldNumber;
const int BikeShareStationInfo::kCapacityFieldNumber;
const int BikeShareStationInfo::kNetworkFieldNumber;
const int BikeShareStationInfo::kOperatorFieldNumber;
const int BikeShareStationInfo::kRentCostFieldNumber;
const int BikeShareStationInfo::kReturnCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BikeShareStationInfo::BikeShareStationInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.BikeShareStationInfo)
}

void BikeShareStationInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BikeShareStationInfo::BikeShareStationInfo(const BikeShareStationInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.BikeShareStationInfo)
}

void BikeShareStationInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_name();
  clear_has_has_ref();
  clear_has_has_capacity();
  clear_has_has_network();
  clear_has_has_operator_();
  clear_has_has_rent_cost();
  clear_has_has_return_cost();
}

BikeShareStationInfo::~BikeShareStationInfo() {
  // @@protoc_insertion_point(destructor:valhalla.BikeShareStationInfo)
  SharedDtor();
}

void BikeShareStationInfo::SharedDtor() {
  if (has_has_name()) {
    clear_has_name();
  }
  if (has_has_ref()) {
    clear_has_ref();
  }
  if (has_has_capacity()) {
    clear_has_capacity();
  }
  if (has_has_network()) {
    clear_has_network();
  }
  if (has_has_operator_()) {
    clear_has_operator_();
  }
  if (has_has_rent_cost()) {
    clear_has_rent_cost();
  }
  if (has_has_return_cost()) {
    clear_has_return_cost();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BikeShareStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BikeShareStationInfo& BikeShareStationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

BikeShareStationInfo* BikeShareStationInfo::default_instance_ = NULL;

BikeShareStationInfo* BikeShareStationInfo::New(::google::protobuf::Arena* arena) const {
  BikeShareStationInfo* n = new BikeShareStationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BikeShareStationInfo::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_NAME_NOT_SET;
}

void BikeShareStationInfo::clear_has_ref() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_ref_case()) {
    case kRef: {
      has_ref_.ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_REF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_REF_NOT_SET;
}

void BikeShareStationInfo::clear_has_capacity() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_capacity_case()) {
    case kCapacity: {
      // No need to clear
      break;
    }
    case HAS_CAPACITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_CAPACITY_NOT_SET;
}

void BikeShareStationInfo::clear_has_network() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_network_case()) {
    case kNetwork: {
      has_network_.network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NETWORK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_NETWORK_NOT_SET;
}

void BikeShareStationInfo::clear_has_operator_() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_operator__case()) {
    case kOperator: {
      has_operator__.operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_OPERATOR__NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_OPERATOR__NOT_SET;
}

void BikeShareStationInfo::clear_has_rent_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_rent_cost_case()) {
    case kRentCost: {
      // No need to clear
      break;
    }
    case HAS_RENT_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_RENT_COST_NOT_SET;
}

void BikeShareStationInfo::clear_has_return_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.BikeShareStationInfo)
  switch(has_return_cost_case()) {
    case kReturnCost: {
      // No need to clear
      break;
    }
    case HAS_RETURN_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_RETURN_COST_NOT_SET;
}


void BikeShareStationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.BikeShareStationInfo)
  clear_has_name();
  clear_has_ref();
  clear_has_capacity();
  clear_has_network();
  clear_has_operator_();
  clear_has_rent_cost();
  clear_has_return_cost();
}

bool BikeShareStationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.BikeShareStationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.BikeShareStationInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref;
        break;
      }

      // optional string ref = 2;
      case 2: {
        if (tag == 18) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.BikeShareStationInfo.ref"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_capacity;
        break;
      }

      // optional uint32 capacity = 3;
      case 3: {
        if (tag == 24) {
         parse_capacity:
          clear_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_capacity_.capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_network;
        break;
      }

      // optional string network = 4;
      case 4: {
        if (tag == 34) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.BikeShareStationInfo.network"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_operator;
        break;
      }

      // optional string operator = 5;
      case 5: {
        if (tag == 42) {
         parse_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operator_().data(), this->operator_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.BikeShareStationInfo.operator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_rent_cost;
        break;
      }

      // optional float rent_cost = 6;
      case 6: {
        if (tag == 53) {
         parse_rent_cost:
          clear_has_rent_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_rent_cost_.rent_cost_)));
          set_has_rent_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_return_cost;
        break;
      }

      // optional float return_cost = 7;
      case 7: {
        if (tag == 61) {
         parse_return_cost:
          clear_has_return_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_return_cost_.return_cost_)));
          set_has_return_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.BikeShareStationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.BikeShareStationInfo)
  return false;
#undef DO_
}

void BikeShareStationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.BikeShareStationInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref(), output);
  }

  // optional uint32 capacity = 3;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->capacity(), output);
  }

  // optional string network = 4;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->network(), output);
  }

  // optional string operator = 5;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.operator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->operator_(), output);
  }

  // optional float rent_cost = 6;
  if (has_rent_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rent_cost(), output);
  }

  // optional float return_cost = 7;
  if (has_return_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->return_cost(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.BikeShareStationInfo)
}

int BikeShareStationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.BikeShareStationInfo)
  int total_size = 0;

  switch (has_name_case()) {
    // optional string name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_ref_case()) {
    // optional string ref = 2;
    case kRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
      break;
    }
    case HAS_REF_NOT_SET: {
      break;
    }
  }
  switch (has_capacity_case()) {
    // optional uint32 capacity = 3;
    case kCapacity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
      break;
    }
    case HAS_CAPACITY_NOT_SET: {
      break;
    }
  }
  switch (has_network_case()) {
    // optional string network = 4;
    case kNetwork: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
      break;
    }
    case HAS_NETWORK_NOT_SET: {
      break;
    }
  }
  switch (has_operator__case()) {
    // optional string operator = 5;
    case kOperator: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_());
      break;
    }
    case HAS_OPERATOR__NOT_SET: {
      break;
    }
  }
  switch (has_rent_cost_case()) {
    // optional float rent_cost = 6;
    case kRentCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_RENT_COST_NOT_SET: {
      break;
    }
  }
  switch (has_return_cost_case()) {
    // optional float return_cost = 7;
    case kReturnCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_RETURN_COST_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BikeShareStationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BikeShareStationInfo*>(&from));
}

void BikeShareStationInfo::MergeFrom(const BikeShareStationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.BikeShareStationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_ref_case()) {
    case kRef: {
      set_ref(from.ref());
      break;
    }
    case HAS_REF_NOT_SET: {
      break;
    }
  }
  switch (from.has_capacity_case()) {
    case kCapacity: {
      set_capacity(from.capacity());
      break;
    }
    case HAS_CAPACITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_network_case()) {
    case kNetwork: {
      set_network(from.network());
      break;
    }
    case HAS_NETWORK_NOT_SET: {
      break;
    }
  }
  switch (from.has_operator__case()) {
    case kOperator: {
      set_operator_(from.operator_());
      break;
    }
    case HAS_OPERATOR__NOT_SET: {
      break;
    }
  }
  switch (from.has_rent_cost_case()) {
    case kRentCost: {
      set_rent_cost(from.rent_cost());
      break;
    }
    case HAS_RENT_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_return_cost_case()) {
    case kReturnCost: {
      set_return_cost(from.return_cost());
      break;
    }
    case HAS_RETURN_COST_NOT_SET: {
      break;
    }
  }
}

void BikeShareStationInfo::CopyFrom(const BikeShareStationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.BikeShareStationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BikeShareStationInfo::IsInitialized() const {

  return true;
}

void BikeShareStationInfo::Swap(BikeShareStationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BikeShareStationInfo::InternalSwap(BikeShareStationInfo* other) {
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_ref_, other->has_ref_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_capacity_, other->has_capacity_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_network_, other->has_network_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_operator__, other->has_operator__);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_rent_cost_, other->has_rent_cost_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_return_cost_, other->has_return_cost_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BikeShareStationInfo::GetTypeName() const {
  return "valhalla.BikeShareStationInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BikeShareStationInfo

// optional string name = 1;
bool BikeShareStationInfo::has_name() const {
  return has_name_case() == kName;
}
void BikeShareStationInfo::set_has_name() {
  _oneof_case_[0] = kName;
}
void BikeShareStationInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& BikeShareStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BikeShareStationInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.name)
}
 void BikeShareStationInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.name)
}
 void BikeShareStationInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.name)
}
 ::std::string* BikeShareStationInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BikeShareStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BikeShareStationInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.name)
}

// optional string ref = 2;
bool BikeShareStationInfo::has_ref() const {
  return has_ref_case() == kRef;
}
void BikeShareStationInfo::set_has_ref() {
  _oneof_case_[1] = kRef;
}
void BikeShareStationInfo::clear_ref() {
  if (has_ref()) {
    has_ref_.ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_ref();
  }
}
 const ::std::string& BikeShareStationInfo::ref() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.ref)
  if (has_ref()) {
    return has_ref_.ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BikeShareStationInfo::set_ref(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.ref)
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.ref)
}
 void BikeShareStationInfo::set_ref(const char* value) {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.ref)
}
 void BikeShareStationInfo::set_ref(const char* value, size_t size) {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.ref)
}
 ::std::string* BikeShareStationInfo::mutable_ref() {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.ref)
  return has_ref_.ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BikeShareStationInfo::release_ref() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.ref)
  if (has_ref()) {
    clear_has_has_ref();
    return has_ref_.ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BikeShareStationInfo::set_allocated_ref(::std::string* ref) {
  if (!has_ref()) {
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_ref();
  if (ref != NULL) {
    set_has_ref();
    has_ref_.ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ref);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.ref)
}

// optional uint32 capacity = 3;
bool BikeShareStationInfo::has_capacity() const {
  return has_capacity_case() == kCapacity;
}
void BikeShareStationInfo::set_has_capacity() {
  _oneof_case_[2] = kCapacity;
}
void BikeShareStationInfo::clear_capacity() {
  if (has_capacity()) {
    has_capacity_.capacity_ = 0u;
    clear_has_has_capacity();
  }
}
 ::google::protobuf::uint32 BikeShareStationInfo::capacity() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.capacity)
  if (has_capacity()) {
    return has_capacity_.capacity_;
  }
  return 0u;
}
 void BikeShareStationInfo::set_capacity(::google::protobuf::uint32 value) {
  if (!has_capacity()) {
    clear_has_capacity();
    set_has_capacity();
  }
  has_capacity_.capacity_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.capacity)
}

// optional string network = 4;
bool BikeShareStationInfo::has_network() const {
  return has_network_case() == kNetwork;
}
void BikeShareStationInfo::set_has_network() {
  _oneof_case_[3] = kNetwork;
}
void BikeShareStationInfo::clear_network() {
  if (has_network()) {
    has_network_.network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_network();
  }
}
 const ::std::string& BikeShareStationInfo::network() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.network)
  if (has_network()) {
    return has_network_.network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BikeShareStationInfo::set_network(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.network)
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.network)
}
 void BikeShareStationInfo::set_network(const char* value) {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.network)
}
 void BikeShareStationInfo::set_network(const char* value, size_t size) {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.network)
}
 ::std::string* BikeShareStationInfo::mutable_network() {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.network)
  return has_network_.network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BikeShareStationInfo::release_network() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.network)
  if (has_network()) {
    clear_has_has_network();
    return has_network_.network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BikeShareStationInfo::set_allocated_network(::std::string* network) {
  if (!has_network()) {
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_network();
  if (network != NULL) {
    set_has_network();
    has_network_.network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        network);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.network)
}

// optional string operator = 5;
bool BikeShareStationInfo::has_operator_() const {
  return has_operator__case() == kOperator;
}
void BikeShareStationInfo::set_has_operator_() {
  _oneof_case_[4] = kOperator;
}
void BikeShareStationInfo::clear_operator_() {
  if (has_operator_()) {
    has_operator__.operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_();
  }
}
 const ::std::string& BikeShareStationInfo::operator_() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.operator)
  if (has_operator_()) {
    return has_operator__.operator__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BikeShareStationInfo::set_operator_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.operator)
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.operator)
}
 void BikeShareStationInfo::set_operator_(const char* value) {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.operator)
}
 void BikeShareStationInfo::set_operator_(const char* value, size_t size) {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.operator)
}
 ::std::string* BikeShareStationInfo::mutable_operator_() {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.operator)
  return has_operator__.operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BikeShareStationInfo::release_operator_() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.operator)
  if (has_operator_()) {
    clear_has_has_operator_();
    return has_operator__.operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BikeShareStationInfo::set_allocated_operator_(::std::string* operator_) {
  if (!has_operator_()) {
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_();
  if (operator_ != NULL) {
    set_has_operator_();
    has_operator__.operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.operator)
}

// optional float rent_cost = 6;
bool BikeShareStationInfo::has_rent_cost() const {
  return has_rent_cost_case() == kRentCost;
}
void BikeShareStationInfo::set_has_rent_cost() {
  _oneof_case_[5] = kRentCost;
}
void BikeShareStationInfo::clear_rent_cost() {
  if (has_rent_cost()) {
    has_rent_cost_.rent_cost_ = 0;
    clear_has_has_rent_cost();
  }
}
 float BikeShareStationInfo::rent_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.rent_cost)
  if (has_rent_cost()) {
    return has_rent_cost_.rent_cost_;
  }
  return 0;
}
 void BikeShareStationInfo::set_rent_cost(float value) {
  if (!has_rent_cost()) {
    clear_has_rent_cost();
    set_has_rent_cost();
  }
  has_rent_cost_.rent_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.rent_cost)
}

// optional float return_cost = 7;
bool BikeShareStationInfo::has_return_cost() const {
  return has_return_cost_case() == kReturnCost;
}
void BikeShareStationInfo::set_has_return_cost() {
  _oneof_case_[6] = kReturnCost;
}
void BikeShareStationInfo::clear_return_cost() {
  if (has_return_cost()) {
    has_return_cost_.return_cost_ = 0;
    clear_has_has_return_cost();
  }
}
 float BikeShareStationInfo::return_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.return_cost)
  if (has_return_cost()) {
    return has_return_cost_.return_cost_;
  }
  return 0;
}
 void BikeShareStationInfo::set_return_cost(float value) {
  if (!has_return_cost()) {
    clear_has_return_cost();
    set_has_return_cost();
  }
  has_return_cost_.return_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.return_cost)
}

bool BikeShareStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_name() {
  _oneof_case_[0] = HAS_NAME_NOT_SET;
}
bool BikeShareStationInfo::has_has_ref() const {
  return has_ref_case() != HAS_REF_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_ref() {
  _oneof_case_[1] = HAS_REF_NOT_SET;
}
bool BikeShareStationInfo::has_has_capacity() const {
  return has_capacity_case() != HAS_CAPACITY_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_capacity() {
  _oneof_case_[2] = HAS_CAPACITY_NOT_SET;
}
bool BikeShareStationInfo::has_has_network() const {
  return has_network_case() != HAS_NETWORK_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_network() {
  _oneof_case_[3] = HAS_NETWORK_NOT_SET;
}
bool BikeShareStationInfo::has_has_operator_() const {
  return has_operator__case() != HAS_OPERATOR__NOT_SET;
}
void BikeShareStationInfo::clear_has_has_operator_() {
  _oneof_case_[4] = HAS_OPERATOR__NOT_SET;
}
bool BikeShareStationInfo::has_has_rent_cost() const {
  return has_rent_cost_case() != HAS_RENT_COST_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_rent_cost() {
  _oneof_case_[5] = HAS_RENT_COST_NOT_SET;
}
bool BikeShareStationInfo::has_has_return_cost() const {
  return has_return_cost_case() != HAS_RETURN_COST_NOT_SET;
}
void BikeShareStationInfo::clear_has_has_return_cost() {
  _oneof_case_[6] = HAS_RETURN_COST_NOT_SET;
}
BikeShareStationInfo::HasNameCase BikeShareStationInfo::has_name_case() const {
  return BikeShareStationInfo::HasNameCase(_oneof_case_[0]);
}
BikeShareStationInfo::HasRefCase BikeShareStationInfo::has_ref_case() const {
  return BikeShareStationInfo::HasRefCase(_oneof_case_[1]);
}
BikeShareStationInfo::HasCapacityCase BikeShareStationInfo::has_capacity_case() const {
  return BikeShareStationInfo::HasCapacityCase(_oneof_case_[2]);
}
BikeShareStationInfo::HasNetworkCase BikeShareStationInfo::has_network_case() const {
  return BikeShareStationInfo::HasNetworkCase(_oneof_case_[3]);
}
BikeShareStationInfo::HasOperatorCase BikeShareStationInfo::has_operator__case() const {
  return BikeShareStationInfo::HasOperatorCase(_oneof_case_[4]);
}
BikeShareStationInfo::HasRentCostCase BikeShareStationInfo::has_rent_cost_case() const {
  return BikeShareStationInfo::HasRentCostCase(_oneof_case_[5]);
}
BikeShareStationInfo::HasReturnCostCase BikeShareStationInfo::has_return_cost_case() const {
  return BikeShareStationInfo::HasReturnCostCase(_oneof_case_[6]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool TransitPlatformInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransitPlatformInfo_Type TransitPlatformInfo::kStop;
const TransitPlatformInfo_Type TransitPlatformInfo::kStation;
const TransitPlatformInfo_Type TransitPlatformInfo::Type_MIN;
const TransitPlatformInfo_Type TransitPlatformInfo::Type_MAX;
const int TransitPlatformInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitPlatformInfo::kTypeFieldNumber;
const int TransitPlatformInfo::kOnestopIdFieldNumber;
const int TransitPlatformInfo::kNameFieldNumber;
const int TransitPlatformInfo::kArrivalDateTimeFieldNumber;
const int TransitPlatformInfo::kDepartureDateTimeFieldNumber;
const int TransitPlatformInfo::kAssumedScheduleFieldNumber;
const int TransitPlatformInfo::kLlFieldNumber;
const int TransitPlatformInfo::kStationOnestopIdFieldNumber;
const int TransitPlatformInfo::kStationNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitPlatformInfo::TransitPlatformInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TransitPlatformInfo)
}

void TransitPlatformInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
#else
  ll_ = const_cast< ::valhalla::LatLng*>(&::valhalla::LatLng::default_instance());
#endif
}

TransitPlatformInfo::TransitPlatformInfo(const TransitPlatformInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitPlatformInfo)
}

void TransitPlatformInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ll_ = NULL;
  clear_has_has_type();
  clear_has_has_onestop_id();
  clear_has_has_name();
  clear_has_has_arrival_date_time();
  clear_has_has_departure_date_time();
  clear_has_has_assumed_schedule();
  clear_has_has_station_onestop_id();
  clear_has_has_station_name();
}

TransitPlatformInfo::~TransitPlatformInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitPlatformInfo)
  SharedDtor();
}

void TransitPlatformInfo::SharedDtor() {
  if (has_has_type()) {
    clear_has_type();
  }
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (has_has_name()) {
    clear_has_name();
  }
  if (has_has_arrival_date_time()) {
    clear_has_arrival_date_time();
  }
  if (has_has_departure_date_time()) {
    clear_has_departure_date_time();
  }
  if (has_has_assumed_schedule()) {
    clear_has_assumed_schedule();
  }
  if (has_has_station_onestop_id()) {
    clear_has_station_onestop_id();
  }
  if (has_has_station_name()) {
    clear_has_station_name();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ll_;
  }
}

void TransitPlatformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitPlatformInfo& TransitPlatformInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitPlatformInfo* TransitPlatformInfo::default_instance_ = NULL;

TransitPlatformInfo* TransitPlatformInfo::New(::google::protobuf::Arena* arena) const {
  TransitPlatformInfo* n = new TransitPlatformInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransitPlatformInfo::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}

void TransitPlatformInfo::clear_has_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_onestop_id_case()) {
    case kOnestopId: {
      has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_ONESTOP_ID_NOT_SET;
}

void TransitPlatformInfo::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}

void TransitPlatformInfo::clear_has_arrival_date_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_arrival_date_time_case()) {
    case kArrivalDateTime: {
      has_arrival_date_time_.arrival_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ARRIVAL_DATE_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_ARRIVAL_DATE_TIME_NOT_SET;
}

void TransitPlatformInfo::clear_has_departure_date_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_departure_date_time_case()) {
    case kDepartureDateTime: {
      has_departure_date_time_.departure_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DEPARTURE_DATE_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_DEPARTURE_DATE_TIME_NOT_SET;
}

void TransitPlatformInfo::clear_has_assumed_schedule() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_assumed_schedule_case()) {
    case kAssumedSchedule: {
      // No need to clear
      break;
    }
    case HAS_ASSUMED_SCHEDULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_ASSUMED_SCHEDULE_NOT_SET;
}

void TransitPlatformInfo::clear_has_station_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_station_onestop_id_case()) {
    case kStationOnestopId: {
      has_station_onestop_id_.station_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_STATION_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_STATION_ONESTOP_ID_NOT_SET;
}

void TransitPlatformInfo::clear_has_station_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitPlatformInfo)
  switch(has_station_name_case()) {
    case kStationName: {
      has_station_name_.station_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_STATION_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_STATION_NAME_NOT_SET;
}


void TransitPlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitPlatformInfo)
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
  clear_has_type();
  clear_has_onestop_id();
  clear_has_name();
  clear_has_arrival_date_time();
  clear_has_departure_date_time();
  clear_has_assumed_schedule();
  clear_has_station_onestop_id();
  clear_has_station_name();
}

bool TransitPlatformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TransitPlatformInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.TransitPlatformInfo.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::TransitPlatformInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (tag == 18) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arrival_date_time;
        break;
      }

      // optional string arrival_date_time = 4;
      case 4: {
        if (tag == 34) {
         parse_arrival_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival_date_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arrival_date_time().data(), this->arrival_date_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.arrival_date_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_departure_date_time;
        break;
      }

      // optional string departure_date_time = 5;
      case 5: {
        if (tag == 42) {
         parse_departure_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure_date_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->departure_date_time().data(), this->departure_date_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.departure_date_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_assumed_schedule;
        break;
      }

      // optional bool assumed_schedule = 6;
      case 6: {
        if (tag == 48) {
         parse_assumed_schedule:
          clear_has_assumed_schedule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_assumed_schedule_.assumed_schedule_)));
          set_has_assumed_schedule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ll;
        break;
      }

      // optional .valhalla.LatLng ll = 7;
      case 7: {
        if (tag == 58) {
         parse_ll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ll()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_station_onestop_id;
        break;
      }

      // optional string station_onestop_id = 8;
      case 8: {
        if (tag == 66) {
         parse_station_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->station_onestop_id().data(), this->station_onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.station_onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_station_name;
        break;
      }

      // optional string station_name = 9;
      case 9: {
        if (tag == 74) {
         parse_station_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->station_name().data(), this->station_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitPlatformInfo.station_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TransitPlatformInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TransitPlatformInfo)
  return false;
#undef DO_
}

void TransitPlatformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TransitPlatformInfo)
  // optional .valhalla.TransitPlatformInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->onestop_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arrival_date_time().data(), this->arrival_date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.arrival_date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->arrival_date_time(), output);
  }

  // optional string departure_date_time = 5;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->departure_date_time().data(), this->departure_date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.departure_date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->departure_date_time(), output);
  }

  // optional bool assumed_schedule = 6;
  if (has_assumed_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->assumed_schedule(), output);
  }

  // optional .valhalla.LatLng ll = 7;
  if (this->has_ll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->ll_, output);
  }

  // optional string station_onestop_id = 8;
  if (has_station_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->station_onestop_id().data(), this->station_onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.station_onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->station_onestop_id(), output);
  }

  // optional string station_name = 9;
  if (has_station_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->station_name().data(), this->station_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.station_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->station_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TransitPlatformInfo)
}

int TransitPlatformInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitPlatformInfo)
  int total_size = 0;

  // optional .valhalla.LatLng ll = 7;
  if (this->has_ll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ll_);
  }

  switch (has_type_case()) {
    // optional .valhalla.TransitPlatformInfo.Type type = 1;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_onestop_id_case()) {
    // optional string onestop_id = 2;
    case kOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_name_case()) {
    // optional string name = 3;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_arrival_date_time_case()) {
    // optional string arrival_date_time = 4;
    case kArrivalDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrival_date_time());
      break;
    }
    case HAS_ARRIVAL_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_departure_date_time_case()) {
    // optional string departure_date_time = 5;
    case kDepartureDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->departure_date_time());
      break;
    }
    case HAS_DEPARTURE_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_assumed_schedule_case()) {
    // optional bool assumed_schedule = 6;
    case kAssumedSchedule: {
      total_size += 1 + 1;
      break;
    }
    case HAS_ASSUMED_SCHEDULE_NOT_SET: {
      break;
    }
  }
  switch (has_station_onestop_id_case()) {
    // optional string station_onestop_id = 8;
    case kStationOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station_onestop_id());
      break;
    }
    case HAS_STATION_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_station_name_case()) {
    // optional string station_name = 9;
    case kStationName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station_name());
      break;
    }
    case HAS_STATION_NAME_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitPlatformInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitPlatformInfo*>(&from));
}

void TransitPlatformInfo::MergeFrom(const TransitPlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitPlatformInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_onestop_id_case()) {
    case kOnestopId: {
      set_onestop_id(from.onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_arrival_date_time_case()) {
    case kArrivalDateTime: {
      set_arrival_date_time(from.arrival_date_time());
      break;
    }
    case HAS_ARRIVAL_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_departure_date_time_case()) {
    case kDepartureDateTime: {
      set_departure_date_time(from.departure_date_time());
      break;
    }
    case HAS_DEPARTURE_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_assumed_schedule_case()) {
    case kAssumedSchedule: {
      set_assumed_schedule(from.assumed_schedule());
      break;
    }
    case HAS_ASSUMED_SCHEDULE_NOT_SET: {
      break;
    }
  }
  switch (from.has_station_onestop_id_case()) {
    case kStationOnestopId: {
      set_station_onestop_id(from.station_onestop_id());
      break;
    }
    case HAS_STATION_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_station_name_case()) {
    case kStationName: {
      set_station_name(from.station_name());
      break;
    }
    case HAS_STATION_NAME_NOT_SET: {
      break;
    }
  }
  if (from.has_ll()) {
    mutable_ll()->::valhalla::LatLng::MergeFrom(from.ll());
  }
}

void TransitPlatformInfo::CopyFrom(const TransitPlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitPlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitPlatformInfo::IsInitialized() const {

  return true;
}

void TransitPlatformInfo::Swap(TransitPlatformInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitPlatformInfo::InternalSwap(TransitPlatformInfo* other) {
  std::swap(ll_, other->ll_);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_onestop_id_, other->has_onestop_id_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_arrival_date_time_, other->has_arrival_date_time_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_departure_date_time_, other->has_departure_date_time_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_assumed_schedule_, other->has_assumed_schedule_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_station_onestop_id_, other->has_station_onestop_id_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_station_name_, other->has_station_name_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransitPlatformInfo::GetTypeName() const {
  return "valhalla.TransitPlatformInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransitPlatformInfo

// optional .valhalla.TransitPlatformInfo.Type type = 1;
bool TransitPlatformInfo::has_type() const {
  return has_type_case() == kType;
}
void TransitPlatformInfo::set_has_type() {
  _oneof_case_[0] = kType;
}
void TransitPlatformInfo::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::TransitPlatformInfo_Type TransitPlatformInfo::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.type)
  if (has_type()) {
    return static_cast< ::valhalla::TransitPlatformInfo_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::TransitPlatformInfo_Type >(0);
}
 void TransitPlatformInfo::set_type(::valhalla::TransitPlatformInfo_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.type)
}

// optional string onestop_id = 2;
bool TransitPlatformInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
void TransitPlatformInfo::set_has_onestop_id() {
  _oneof_case_[1] = kOnestopId;
}
void TransitPlatformInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
 const ::std::string& TransitPlatformInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.onestop_id)
}
 void TransitPlatformInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.onestop_id)
}
 void TransitPlatformInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.onestop_id)
}
 ::std::string* TransitPlatformInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.onestop_id)
}

// optional string name = 3;
bool TransitPlatformInfo::has_name() const {
  return has_name_case() == kName;
}
void TransitPlatformInfo::set_has_name() {
  _oneof_case_[2] = kName;
}
void TransitPlatformInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& TransitPlatformInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.name)
}
 void TransitPlatformInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.name)
}
 void TransitPlatformInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.name)
}
 ::std::string* TransitPlatformInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.name)
}

// optional string arrival_date_time = 4;
bool TransitPlatformInfo::has_arrival_date_time() const {
  return has_arrival_date_time_case() == kArrivalDateTime;
}
void TransitPlatformInfo::set_has_arrival_date_time() {
  _oneof_case_[3] = kArrivalDateTime;
}
void TransitPlatformInfo::clear_arrival_date_time() {
  if (has_arrival_date_time()) {
    has_arrival_date_time_.arrival_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_arrival_date_time();
  }
}
 const ::std::string& TransitPlatformInfo::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.arrival_date_time)
  if (has_arrival_date_time()) {
    return has_arrival_date_time_.arrival_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_arrival_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.arrival_date_time)
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.arrival_date_time)
}
 void TransitPlatformInfo::set_arrival_date_time(const char* value) {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.arrival_date_time)
}
 void TransitPlatformInfo::set_arrival_date_time(const char* value, size_t size) {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.arrival_date_time)
}
 ::std::string* TransitPlatformInfo::mutable_arrival_date_time() {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.arrival_date_time)
  return has_arrival_date_time_.arrival_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_arrival_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.arrival_date_time)
  if (has_arrival_date_time()) {
    clear_has_has_arrival_date_time();
    return has_arrival_date_time_.arrival_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_arrival_date_time(::std::string* arrival_date_time) {
  if (!has_arrival_date_time()) {
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_arrival_date_time();
  if (arrival_date_time != NULL) {
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        arrival_date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.arrival_date_time)
}

// optional string departure_date_time = 5;
bool TransitPlatformInfo::has_departure_date_time() const {
  return has_departure_date_time_case() == kDepartureDateTime;
}
void TransitPlatformInfo::set_has_departure_date_time() {
  _oneof_case_[4] = kDepartureDateTime;
}
void TransitPlatformInfo::clear_departure_date_time() {
  if (has_departure_date_time()) {
    has_departure_date_time_.departure_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_departure_date_time();
  }
}
 const ::std::string& TransitPlatformInfo::departure_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.departure_date_time)
  if (has_departure_date_time()) {
    return has_departure_date_time_.departure_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_departure_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.departure_date_time)
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.departure_date_time)
}
 void TransitPlatformInfo::set_departure_date_time(const char* value) {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.departure_date_time)
}
 void TransitPlatformInfo::set_departure_date_time(const char* value, size_t size) {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.departure_date_time)
}
 ::std::string* TransitPlatformInfo::mutable_departure_date_time() {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.departure_date_time)
  return has_departure_date_time_.departure_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_departure_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.departure_date_time)
  if (has_departure_date_time()) {
    clear_has_has_departure_date_time();
    return has_departure_date_time_.departure_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_departure_date_time(::std::string* departure_date_time) {
  if (!has_departure_date_time()) {
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_departure_date_time();
  if (departure_date_time != NULL) {
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        departure_date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.departure_date_time)
}

// optional bool assumed_schedule = 6;
bool TransitPlatformInfo::has_assumed_schedule() const {
  return has_assumed_schedule_case() == kAssumedSchedule;
}
void TransitPlatformInfo::set_has_assumed_schedule() {
  _oneof_case_[5] = kAssumedSchedule;
}
void TransitPlatformInfo::clear_assumed_schedule() {
  if (has_assumed_schedule()) {
    has_assumed_schedule_.assumed_schedule_ = false;
    clear_has_has_assumed_schedule();
  }
}
 bool TransitPlatformInfo::assumed_schedule() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.assumed_schedule)
  if (has_assumed_schedule()) {
    return has_assumed_schedule_.assumed_schedule_;
  }
  return false;
}
 void TransitPlatformInfo::set_assumed_schedule(bool value) {
  if (!has_assumed_schedule()) {
    clear_has_assumed_schedule();
    set_has_assumed_schedule();
  }
  has_assumed_schedule_.assumed_schedule_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.assumed_schedule)
}

// optional .valhalla.LatLng ll = 7;
bool TransitPlatformInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
void TransitPlatformInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
const ::valhalla::LatLng& TransitPlatformInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
::valhalla::LatLng* TransitPlatformInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.ll)
  return ll_;
}
::valhalla::LatLng* TransitPlatformInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
void TransitPlatformInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.ll)
}

// optional string station_onestop_id = 8;
bool TransitPlatformInfo::has_station_onestop_id() const {
  return has_station_onestop_id_case() == kStationOnestopId;
}
void TransitPlatformInfo::set_has_station_onestop_id() {
  _oneof_case_[6] = kStationOnestopId;
}
void TransitPlatformInfo::clear_station_onestop_id() {
  if (has_station_onestop_id()) {
    has_station_onestop_id_.station_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_station_onestop_id();
  }
}
 const ::std::string& TransitPlatformInfo::station_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_onestop_id)
  if (has_station_onestop_id()) {
    return has_station_onestop_id_.station_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_station_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_onestop_id)
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_onestop_id)
}
 void TransitPlatformInfo::set_station_onestop_id(const char* value) {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.station_onestop_id)
}
 void TransitPlatformInfo::set_station_onestop_id(const char* value, size_t size) {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.station_onestop_id)
}
 ::std::string* TransitPlatformInfo::mutable_station_onestop_id() {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_onestop_id)
  return has_station_onestop_id_.station_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_station_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_onestop_id)
  if (has_station_onestop_id()) {
    clear_has_has_station_onestop_id();
    return has_station_onestop_id_.station_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_station_onestop_id(::std::string* station_onestop_id) {
  if (!has_station_onestop_id()) {
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_station_onestop_id();
  if (station_onestop_id != NULL) {
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        station_onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_onestop_id)
}

// optional string station_name = 9;
bool TransitPlatformInfo::has_station_name() const {
  return has_station_name_case() == kStationName;
}
void TransitPlatformInfo::set_has_station_name() {
  _oneof_case_[7] = kStationName;
}
void TransitPlatformInfo::clear_station_name() {
  if (has_station_name()) {
    has_station_name_.station_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_station_name();
  }
}
 const ::std::string& TransitPlatformInfo::station_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_name)
  if (has_station_name()) {
    return has_station_name_.station_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitPlatformInfo::set_station_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_name)
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_name)
}
 void TransitPlatformInfo::set_station_name(const char* value) {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.station_name)
}
 void TransitPlatformInfo::set_station_name(const char* value, size_t size) {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.station_name)
}
 ::std::string* TransitPlatformInfo::mutable_station_name() {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_name)
  return has_station_name_.station_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitPlatformInfo::release_station_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_name)
  if (has_station_name()) {
    clear_has_has_station_name();
    return has_station_name_.station_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitPlatformInfo::set_allocated_station_name(::std::string* station_name) {
  if (!has_station_name()) {
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_station_name();
  if (station_name != NULL) {
    set_has_station_name();
    has_station_name_.station_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        station_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_name)
}

bool TransitPlatformInfo::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_type() {
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}
bool TransitPlatformInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_onestop_id() {
  _oneof_case_[1] = HAS_ONESTOP_ID_NOT_SET;
}
bool TransitPlatformInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_name() {
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}
bool TransitPlatformInfo::has_has_arrival_date_time() const {
  return has_arrival_date_time_case() != HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_arrival_date_time() {
  _oneof_case_[3] = HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
bool TransitPlatformInfo::has_has_departure_date_time() const {
  return has_departure_date_time_case() != HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_departure_date_time() {
  _oneof_case_[4] = HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
bool TransitPlatformInfo::has_has_assumed_schedule() const {
  return has_assumed_schedule_case() != HAS_ASSUMED_SCHEDULE_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_assumed_schedule() {
  _oneof_case_[5] = HAS_ASSUMED_SCHEDULE_NOT_SET;
}
bool TransitPlatformInfo::has_has_station_onestop_id() const {
  return has_station_onestop_id_case() != HAS_STATION_ONESTOP_ID_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_station_onestop_id() {
  _oneof_case_[6] = HAS_STATION_ONESTOP_ID_NOT_SET;
}
bool TransitPlatformInfo::has_has_station_name() const {
  return has_station_name_case() != HAS_STATION_NAME_NOT_SET;
}
void TransitPlatformInfo::clear_has_has_station_name() {
  _oneof_case_[7] = HAS_STATION_NAME_NOT_SET;
}
TransitPlatformInfo::HasTypeCase TransitPlatformInfo::has_type_case() const {
  return TransitPlatformInfo::HasTypeCase(_oneof_case_[0]);
}
TransitPlatformInfo::HasOnestopIdCase TransitPlatformInfo::has_onestop_id_case() const {
  return TransitPlatformInfo::HasOnestopIdCase(_oneof_case_[1]);
}
TransitPlatformInfo::HasNameCase TransitPlatformInfo::has_name_case() const {
  return TransitPlatformInfo::HasNameCase(_oneof_case_[2]);
}
TransitPlatformInfo::HasArrivalDateTimeCase TransitPlatformInfo::has_arrival_date_time_case() const {
  return TransitPlatformInfo::HasArrivalDateTimeCase(_oneof_case_[3]);
}
TransitPlatformInfo::HasDepartureDateTimeCase TransitPlatformInfo::has_departure_date_time_case() const {
  return TransitPlatformInfo::HasDepartureDateTimeCase(_oneof_case_[4]);
}
TransitPlatformInfo::HasAssumedScheduleCase TransitPlatformInfo::has_assumed_schedule_case() const {
  return TransitPlatformInfo::HasAssumedScheduleCase(_oneof_case_[5]);
}
TransitPlatformInfo::HasStationOnestopIdCase TransitPlatformInfo::has_station_onestop_id_case() const {
  return TransitPlatformInfo::HasStationOnestopIdCase(_oneof_case_[6]);
}
TransitPlatformInfo::HasStationNameCase TransitPlatformInfo::has_station_name_case() const {
  return TransitPlatformInfo::HasStationNameCase(_oneof_case_[7]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitRouteInfo::kOnestopIdFieldNumber;
const int TransitRouteInfo::kBlockIdFieldNumber;
const int TransitRouteInfo::kTripIdFieldNumber;
const int TransitRouteInfo::kShortNameFieldNumber;
const int TransitRouteInfo::kLongNameFieldNumber;
const int TransitRouteInfo::kHeadsignFieldNumber;
const int TransitRouteInfo::kColorFieldNumber;
const int TransitRouteInfo::kTextColorFieldNumber;
const int TransitRouteInfo::kDescriptionFieldNumber;
const int TransitRouteInfo::kOperatorOnestopIdFieldNumber;
const int TransitRouteInfo::kOperatorNameFieldNumber;
const int TransitRouteInfo::kOperatorUrlFieldNumber;
const int TransitRouteInfo::kTransitStopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitRouteInfo::TransitRouteInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TransitRouteInfo)
}

void TransitRouteInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransitRouteInfo::TransitRouteInfo(const TransitRouteInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitRouteInfo)
}

void TransitRouteInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_onestop_id();
  clear_has_has_block_id();
  clear_has_has_trip_id();
  clear_has_has_short_name();
  clear_has_has_long_name();
  clear_has_has_headsign();
  clear_has_has_color();
  clear_has_has_text_color();
  clear_has_has_description();
  clear_has_has_operator_onestop_id();
  clear_has_has_operator_name();
  clear_has_has_operator_url();
}

TransitRouteInfo::~TransitRouteInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitRouteInfo)
  SharedDtor();
}

void TransitRouteInfo::SharedDtor() {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (has_has_block_id()) {
    clear_has_block_id();
  }
  if (has_has_trip_id()) {
    clear_has_trip_id();
  }
  if (has_has_short_name()) {
    clear_has_short_name();
  }
  if (has_has_long_name()) {
    clear_has_long_name();
  }
  if (has_has_headsign()) {
    clear_has_headsign();
  }
  if (has_has_color()) {
    clear_has_color();
  }
  if (has_has_text_color()) {
    clear_has_text_color();
  }
  if (has_has_description()) {
    clear_has_description();
  }
  if (has_has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
  }
  if (has_has_operator_name()) {
    clear_has_operator_name();
  }
  if (has_has_operator_url()) {
    clear_has_operator_url();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransitRouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransitRouteInfo& TransitRouteInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TransitRouteInfo* TransitRouteInfo::default_instance_ = NULL;

TransitRouteInfo* TransitRouteInfo::New(::google::protobuf::Arena* arena) const {
  TransitRouteInfo* n = new TransitRouteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransitRouteInfo::clear_has_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_onestop_id_case()) {
    case kOnestopId: {
      has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}

void TransitRouteInfo::clear_has_block_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_block_id_case()) {
    case kBlockId: {
      // No need to clear
      break;
    }
    case HAS_BLOCK_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_BLOCK_ID_NOT_SET;
}

void TransitRouteInfo::clear_has_trip_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_trip_id_case()) {
    case kTripId: {
      // No need to clear
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_TRIP_ID_NOT_SET;
}

void TransitRouteInfo::clear_has_short_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_short_name_case()) {
    case kShortName: {
      has_short_name_.short_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_SHORT_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_SHORT_NAME_NOT_SET;
}

void TransitRouteInfo::clear_has_long_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_long_name_case()) {
    case kLongName: {
      has_long_name_.long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_LONG_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_LONG_NAME_NOT_SET;
}

void TransitRouteInfo::clear_has_headsign() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_headsign_case()) {
    case kHeadsign: {
      has_headsign_.headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_HEADSIGN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_HEADSIGN_NOT_SET;
}

void TransitRouteInfo::clear_has_color() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_color_case()) {
    case kColor: {
      // No need to clear
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_COLOR_NOT_SET;
}

void TransitRouteInfo::clear_has_text_color() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_text_color_case()) {
    case kTextColor: {
      // No need to clear
      break;
    }
    case HAS_TEXT_COLOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_TEXT_COLOR_NOT_SET;
}

void TransitRouteInfo::clear_has_description() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_description_case()) {
    case kDescription: {
      has_description_.description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_DESCRIPTION_NOT_SET;
}

void TransitRouteInfo::clear_has_operator_onestop_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_operator_onestop_id_case()) {
    case kOperatorOnestopId: {
      has_operator_onestop_id_.operator_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_OPERATOR_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}

void TransitRouteInfo::clear_has_operator_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_operator_name_case()) {
    case kOperatorName: {
      has_operator_name_.operator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_OPERATOR_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_OPERATOR_NAME_NOT_SET;
}

void TransitRouteInfo::clear_has_operator_url() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TransitRouteInfo)
  switch(has_operator_url_case()) {
    case kOperatorUrl: {
      has_operator_url_.operator_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_OPERATOR_URL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = HAS_OPERATOR_URL_NOT_SET;
}


void TransitRouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitRouteInfo)
  transit_stops_.Clear();
  clear_has_onestop_id();
  clear_has_block_id();
  clear_has_trip_id();
  clear_has_short_name();
  clear_has_long_name();
  clear_has_headsign();
  clear_has_color();
  clear_has_text_color();
  clear_has_description();
  clear_has_operator_onestop_id();
  clear_has_operator_name();
  clear_has_operator_url();
}

bool TransitRouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TransitRouteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string onestop_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->onestop_id().data(), this->onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }

      // optional uint32 block_id = 2;
      case 2: {
        if (tag == 16) {
         parse_block_id:
          clear_has_block_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_block_id_.block_id_)));
          set_has_block_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trip_id;
        break;
      }

      // optional uint32 trip_id = 3;
      case 3: {
        if (tag == 24) {
         parse_trip_id:
          clear_has_trip_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_trip_id_.trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_short_name;
        break;
      }

      // optional string short_name = 4;
      case 4: {
        if (tag == 34) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.short_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_long_name;
        break;
      }

      // optional string long_name = 5;
      case 5: {
        if (tag == 42) {
         parse_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_name().data(), this->long_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.long_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_headsign;
        break;
      }

      // optional string headsign = 6;
      case 6: {
        if (tag == 50) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.headsign"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }

      // optional uint32 color = 7;
      case 7: {
        if (tag == 56) {
         parse_color:
          clear_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_color_.color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_text_color;
        break;
      }

      // optional uint32 text_color = 8;
      case 8: {
        if (tag == 64) {
         parse_text_color:
          clear_has_text_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_text_color_.text_color_)));
          set_has_text_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional string description = 9;
      case 9: {
        if (tag == 74) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_operator_onestop_id;
        break;
      }

      // optional string operator_onestop_id = 10;
      case 10: {
        if (tag == 82) {
         parse_operator_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_onestop_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operator_onestop_id().data(), this->operator_onestop_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.operator_onestop_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_operator_name;
        break;
      }

      // optional string operator_name = 11;
      case 11: {
        if (tag == 90) {
         parse_operator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operator_name().data(), this->operator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.operator_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_operator_url;
        break;
      }

      // optional string operator_url = 12;
      case 12: {
        if (tag == 98) {
         parse_operator_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operator_url().data(), this->operator_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.TransitRouteInfo.operator_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_transit_stops;
        break;
      }

      // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
      case 13: {
        if (tag == 106) {
         parse_transit_stops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transit_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transit_stops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_transit_stops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TransitRouteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TransitRouteInfo)
  return false;
#undef DO_
}

void TransitRouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TransitRouteInfo)
  // optional string onestop_id = 1;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->onestop_id().data(), this->onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->onestop_id(), output);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->block_id(), output);
  }

  // optional uint32 trip_id = 3;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trip_id(), output);
  }

  // optional string short_name = 4;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->short_name(), output);
  }

  // optional string long_name = 5;
  if (has_long_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.long_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->long_name(), output);
  }

  // optional string headsign = 6;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.headsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->headsign(), output);
  }

  // optional uint32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->color(), output);
  }

  // optional uint32 text_color = 8;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->text_color(), output);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->description(), output);
  }

  // optional string operator_onestop_id = 10;
  if (has_operator_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_onestop_id().data(), this->operator_onestop_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_onestop_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->operator_onestop_id(), output);
  }

  // optional string operator_name = 11;
  if (has_operator_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_name().data(), this->operator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->operator_name(), output);
  }

  // optional string operator_url = 12;
  if (has_operator_url()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operator_url().data(), this->operator_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->operator_url(), output);
  }

  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  for (unsigned int i = 0, n = this->transit_stops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->transit_stops(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TransitRouteInfo)
}

int TransitRouteInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitRouteInfo)
  int total_size = 0;

  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  total_size += 1 * this->transit_stops_size();
  for (int i = 0; i < this->transit_stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transit_stops(i));
  }

  switch (has_onestop_id_case()) {
    // optional string onestop_id = 1;
    case kOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_block_id_case()) {
    // optional uint32 block_id = 2;
    case kBlockId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_id());
      break;
    }
    case HAS_BLOCK_ID_NOT_SET: {
      break;
    }
  }
  switch (has_trip_id_case()) {
    // optional uint32 trip_id = 3;
    case kTripId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trip_id());
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_short_name_case()) {
    // optional string short_name = 4;
    case kShortName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
      break;
    }
    case HAS_SHORT_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_long_name_case()) {
    // optional string long_name = 5;
    case kLongName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
      break;
    }
    case HAS_LONG_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_headsign_case()) {
    // optional string headsign = 6;
    case kHeadsign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
      break;
    }
    case HAS_HEADSIGN_NOT_SET: {
      break;
    }
  }
  switch (has_color_case()) {
    // optional uint32 color = 7;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  switch (has_text_color_case()) {
    // optional uint32 text_color = 8;
    case kTextColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->text_color());
      break;
    }
    case HAS_TEXT_COLOR_NOT_SET: {
      break;
    }
  }
  switch (has_description_case()) {
    // optional string description = 9;
    case kDescription: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  switch (has_operator_onestop_id_case()) {
    // optional string operator_onestop_id = 10;
    case kOperatorOnestopId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_onestop_id());
      break;
    }
    case HAS_OPERATOR_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (has_operator_name_case()) {
    // optional string operator_name = 11;
    case kOperatorName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_name());
      break;
    }
    case HAS_OPERATOR_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_operator_url_case()) {
    // optional string operator_url = 12;
    case kOperatorUrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_url());
      break;
    }
    case HAS_OPERATOR_URL_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitRouteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransitRouteInfo*>(&from));
}

void TransitRouteInfo::MergeFrom(const TransitRouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitRouteInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  transit_stops_.MergeFrom(from.transit_stops_);
  switch (from.has_onestop_id_case()) {
    case kOnestopId: {
      set_onestop_id(from.onestop_id());
      break;
    }
    case HAS_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_block_id_case()) {
    case kBlockId: {
      set_block_id(from.block_id());
      break;
    }
    case HAS_BLOCK_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_trip_id_case()) {
    case kTripId: {
      set_trip_id(from.trip_id());
      break;
    }
    case HAS_TRIP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_short_name_case()) {
    case kShortName: {
      set_short_name(from.short_name());
      break;
    }
    case HAS_SHORT_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_long_name_case()) {
    case kLongName: {
      set_long_name(from.long_name());
      break;
    }
    case HAS_LONG_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_headsign_case()) {
    case kHeadsign: {
      set_headsign(from.headsign());
      break;
    }
    case HAS_HEADSIGN_NOT_SET: {
      break;
    }
  }
  switch (from.has_color_case()) {
    case kColor: {
      set_color(from.color());
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_text_color_case()) {
    case kTextColor: {
      set_text_color(from.text_color());
      break;
    }
    case HAS_TEXT_COLOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_description_case()) {
    case kDescription: {
      set_description(from.description());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_operator_onestop_id_case()) {
    case kOperatorOnestopId: {
      set_operator_onestop_id(from.operator_onestop_id());
      break;
    }
    case HAS_OPERATOR_ONESTOP_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_operator_name_case()) {
    case kOperatorName: {
      set_operator_name(from.operator_name());
      break;
    }
    case HAS_OPERATOR_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_operator_url_case()) {
    case kOperatorUrl: {
      set_operator_url(from.operator_url());
      break;
    }
    case HAS_OPERATOR_URL_NOT_SET: {
      break;
    }
  }
}

void TransitRouteInfo::CopyFrom(const TransitRouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitRouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitRouteInfo::IsInitialized() const {

  return true;
}

void TransitRouteInfo::Swap(TransitRouteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitRouteInfo::InternalSwap(TransitRouteInfo* other) {
  transit_stops_.UnsafeArenaSwap(&other->transit_stops_);
  std::swap(has_onestop_id_, other->has_onestop_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_block_id_, other->has_block_id_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_trip_id_, other->has_trip_id_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_short_name_, other->has_short_name_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_long_name_, other->has_long_name_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_headsign_, other->has_headsign_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_color_, other->has_color_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_text_color_, other->has_text_color_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_description_, other->has_description_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_operator_onestop_id_, other->has_operator_onestop_id_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  std::swap(has_operator_name_, other->has_operator_name_);
  std::swap(_oneof_case_[10], other->_oneof_case_[10]);
  std::swap(has_operator_url_, other->has_operator_url_);
  std::swap(_oneof_case_[11], other->_oneof_case_[11]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransitRouteInfo::GetTypeName() const {
  return "valhalla.TransitRouteInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransitRouteInfo

// optional string onestop_id = 1;
bool TransitRouteInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
void TransitRouteInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
void TransitRouteInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
 const ::std::string& TransitRouteInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.onestop_id)
}
 void TransitRouteInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.onestop_id)
}
 void TransitRouteInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.onestop_id)
}
 ::std::string* TransitRouteInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.onestop_id)
}

// optional uint32 block_id = 2;
bool TransitRouteInfo::has_block_id() const {
  return has_block_id_case() == kBlockId;
}
void TransitRouteInfo::set_has_block_id() {
  _oneof_case_[1] = kBlockId;
}
void TransitRouteInfo::clear_block_id() {
  if (has_block_id()) {
    has_block_id_.block_id_ = 0u;
    clear_has_has_block_id();
  }
}
 ::google::protobuf::uint32 TransitRouteInfo::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.block_id)
  if (has_block_id()) {
    return has_block_id_.block_id_;
  }
  return 0u;
}
 void TransitRouteInfo::set_block_id(::google::protobuf::uint32 value) {
  if (!has_block_id()) {
    clear_has_block_id();
    set_has_block_id();
  }
  has_block_id_.block_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.block_id)
}

// optional uint32 trip_id = 3;
bool TransitRouteInfo::has_trip_id() const {
  return has_trip_id_case() == kTripId;
}
void TransitRouteInfo::set_has_trip_id() {
  _oneof_case_[2] = kTripId;
}
void TransitRouteInfo::clear_trip_id() {
  if (has_trip_id()) {
    has_trip_id_.trip_id_ = 0u;
    clear_has_has_trip_id();
  }
}
 ::google::protobuf::uint32 TransitRouteInfo::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.trip_id)
  if (has_trip_id()) {
    return has_trip_id_.trip_id_;
  }
  return 0u;
}
 void TransitRouteInfo::set_trip_id(::google::protobuf::uint32 value) {
  if (!has_trip_id()) {
    clear_has_trip_id();
    set_has_trip_id();
  }
  has_trip_id_.trip_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.trip_id)
}

// optional string short_name = 4;
bool TransitRouteInfo::has_short_name() const {
  return has_short_name_case() == kShortName;
}
void TransitRouteInfo::set_has_short_name() {
  _oneof_case_[3] = kShortName;
}
void TransitRouteInfo::clear_short_name() {
  if (has_short_name()) {
    has_short_name_.short_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_short_name();
  }
}
 const ::std::string& TransitRouteInfo::short_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.short_name)
  if (has_short_name()) {
    return has_short_name_.short_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_short_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.short_name)
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.short_name)
}
 void TransitRouteInfo::set_short_name(const char* value) {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.short_name)
}
 void TransitRouteInfo::set_short_name(const char* value, size_t size) {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.short_name)
}
 ::std::string* TransitRouteInfo::mutable_short_name() {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.short_name)
  return has_short_name_.short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_short_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.short_name)
  if (has_short_name()) {
    clear_has_has_short_name();
    return has_short_name_.short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_short_name(::std::string* short_name) {
  if (!has_short_name()) {
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_short_name();
  if (short_name != NULL) {
    set_has_short_name();
    has_short_name_.short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        short_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.short_name)
}

// optional string long_name = 5;
bool TransitRouteInfo::has_long_name() const {
  return has_long_name_case() == kLongName;
}
void TransitRouteInfo::set_has_long_name() {
  _oneof_case_[4] = kLongName;
}
void TransitRouteInfo::clear_long_name() {
  if (has_long_name()) {
    has_long_name_.long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_long_name();
  }
}
 const ::std::string& TransitRouteInfo::long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.long_name)
  if (has_long_name()) {
    return has_long_name_.long_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_long_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.long_name)
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.long_name)
}
 void TransitRouteInfo::set_long_name(const char* value) {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.long_name)
}
 void TransitRouteInfo::set_long_name(const char* value, size_t size) {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.long_name)
}
 ::std::string* TransitRouteInfo::mutable_long_name() {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.long_name)
  return has_long_name_.long_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.long_name)
  if (has_long_name()) {
    clear_has_has_long_name();
    return has_long_name_.long_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_long_name(::std::string* long_name) {
  if (!has_long_name()) {
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_long_name();
  if (long_name != NULL) {
    set_has_long_name();
    has_long_name_.long_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        long_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.long_name)
}

// optional string headsign = 6;
bool TransitRouteInfo::has_headsign() const {
  return has_headsign_case() == kHeadsign;
}
void TransitRouteInfo::set_has_headsign() {
  _oneof_case_[5] = kHeadsign;
}
void TransitRouteInfo::clear_headsign() {
  if (has_headsign()) {
    has_headsign_.headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_headsign();
  }
}
 const ::std::string& TransitRouteInfo::headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.headsign)
  if (has_headsign()) {
    return has_headsign_.headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_headsign(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.headsign)
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.headsign)
}
 void TransitRouteInfo::set_headsign(const char* value) {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.headsign)
}
 void TransitRouteInfo::set_headsign(const char* value, size_t size) {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.headsign)
}
 ::std::string* TransitRouteInfo::mutable_headsign() {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.headsign)
  return has_headsign_.headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.headsign)
  if (has_headsign()) {
    clear_has_has_headsign();
    return has_headsign_.headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_headsign(::std::string* headsign) {
  if (!has_headsign()) {
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_headsign();
  if (headsign != NULL) {
    set_has_headsign();
    has_headsign_.headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        headsign);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.headsign)
}

// optional uint32 color = 7;
bool TransitRouteInfo::has_color() const {
  return has_color_case() == kColor;
}
void TransitRouteInfo::set_has_color() {
  _oneof_case_[6] = kColor;
}
void TransitRouteInfo::clear_color() {
  if (has_color()) {
    has_color_.color_ = 0u;
    clear_has_has_color();
  }
}
 ::google::protobuf::uint32 TransitRouteInfo::color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.color)
  if (has_color()) {
    return has_color_.color_;
  }
  return 0u;
}
 void TransitRouteInfo::set_color(::google::protobuf::uint32 value) {
  if (!has_color()) {
    clear_has_color();
    set_has_color();
  }
  has_color_.color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.color)
}

// optional uint32 text_color = 8;
bool TransitRouteInfo::has_text_color() const {
  return has_text_color_case() == kTextColor;
}
void TransitRouteInfo::set_has_text_color() {
  _oneof_case_[7] = kTextColor;
}
void TransitRouteInfo::clear_text_color() {
  if (has_text_color()) {
    has_text_color_.text_color_ = 0u;
    clear_has_has_text_color();
  }
}
 ::google::protobuf::uint32 TransitRouteInfo::text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.text_color)
  if (has_text_color()) {
    return has_text_color_.text_color_;
  }
  return 0u;
}
 void TransitRouteInfo::set_text_color(::google::protobuf::uint32 value) {
  if (!has_text_color()) {
    clear_has_text_color();
    set_has_text_color();
  }
  has_text_color_.text_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.text_color)
}

// optional string description = 9;
bool TransitRouteInfo::has_description() const {
  return has_description_case() == kDescription;
}
void TransitRouteInfo::set_has_description() {
  _oneof_case_[8] = kDescription;
}
void TransitRouteInfo::clear_description() {
  if (has_description()) {
    has_description_.description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_description();
  }
}
 const ::std::string& TransitRouteInfo::description() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.description)
  if (has_description()) {
    return has_description_.description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_description(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.description)
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.description)
}
 void TransitRouteInfo::set_description(const char* value) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.description)
}
 void TransitRouteInfo::set_description(const char* value, size_t size) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.description)
}
 ::std::string* TransitRouteInfo::mutable_description() {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.description)
  return has_description_.description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.description)
  if (has_description()) {
    clear_has_has_description();
    return has_description_.description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_description(::std::string* description) {
  if (!has_description()) {
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_description();
  if (description != NULL) {
    set_has_description();
    has_description_.description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        description);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.description)
}

// optional string operator_onestop_id = 10;
bool TransitRouteInfo::has_operator_onestop_id() const {
  return has_operator_onestop_id_case() == kOperatorOnestopId;
}
void TransitRouteInfo::set_has_operator_onestop_id() {
  _oneof_case_[9] = kOperatorOnestopId;
}
void TransitRouteInfo::clear_operator_onestop_id() {
  if (has_operator_onestop_id()) {
    has_operator_onestop_id_.operator_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_onestop_id();
  }
}
 const ::std::string& TransitRouteInfo::operator_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_onestop_id)
  if (has_operator_onestop_id()) {
    return has_operator_onestop_id_.operator_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_operator_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_onestop_id)
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_onestop_id)
}
 void TransitRouteInfo::set_operator_onestop_id(const char* value) {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_onestop_id)
}
 void TransitRouteInfo::set_operator_onestop_id(const char* value, size_t size) {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_onestop_id)
}
 ::std::string* TransitRouteInfo::mutable_operator_onestop_id() {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_onestop_id)
  return has_operator_onestop_id_.operator_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_operator_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_onestop_id)
  if (has_operator_onestop_id()) {
    clear_has_has_operator_onestop_id();
    return has_operator_onestop_id_.operator_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_operator_onestop_id(::std::string* operator_onestop_id) {
  if (!has_operator_onestop_id()) {
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_onestop_id();
  if (operator_onestop_id != NULL) {
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_onestop_id)
}

// optional string operator_name = 11;
bool TransitRouteInfo::has_operator_name() const {
  return has_operator_name_case() == kOperatorName;
}
void TransitRouteInfo::set_has_operator_name() {
  _oneof_case_[10] = kOperatorName;
}
void TransitRouteInfo::clear_operator_name() {
  if (has_operator_name()) {
    has_operator_name_.operator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_name();
  }
}
 const ::std::string& TransitRouteInfo::operator_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_name)
  if (has_operator_name()) {
    return has_operator_name_.operator_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_operator_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_name)
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_name)
}
 void TransitRouteInfo::set_operator_name(const char* value) {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_name)
}
 void TransitRouteInfo::set_operator_name(const char* value, size_t size) {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_name)
}
 ::std::string* TransitRouteInfo::mutable_operator_name() {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_name)
  return has_operator_name_.operator_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_operator_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_name)
  if (has_operator_name()) {
    clear_has_has_operator_name();
    return has_operator_name_.operator_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_operator_name(::std::string* operator_name) {
  if (!has_operator_name()) {
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_name();
  if (operator_name != NULL) {
    set_has_operator_name();
    has_operator_name_.operator_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_name)
}

// optional string operator_url = 12;
bool TransitRouteInfo::has_operator_url() const {
  return has_operator_url_case() == kOperatorUrl;
}
void TransitRouteInfo::set_has_operator_url() {
  _oneof_case_[11] = kOperatorUrl;
}
void TransitRouteInfo::clear_operator_url() {
  if (has_operator_url()) {
    has_operator_url_.operator_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_url();
  }
}
 const ::std::string& TransitRouteInfo::operator_url() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_url)
  if (has_operator_url()) {
    return has_operator_url_.operator_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TransitRouteInfo::set_operator_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_url)
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_url)
}
 void TransitRouteInfo::set_operator_url(const char* value) {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_url)
}
 void TransitRouteInfo::set_operator_url(const char* value, size_t size) {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_url)
}
 ::std::string* TransitRouteInfo::mutable_operator_url() {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_url)
  return has_operator_url_.operator_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransitRouteInfo::release_operator_url() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_url)
  if (has_operator_url()) {
    clear_has_has_operator_url();
    return has_operator_url_.operator_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TransitRouteInfo::set_allocated_operator_url(::std::string* operator_url) {
  if (!has_operator_url()) {
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_url();
  if (operator_url != NULL) {
    set_has_operator_url();
    has_operator_url_.operator_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_url);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_url)
}

// repeated .valhalla.TransitPlatformInfo transit_stops = 13;
int TransitRouteInfo::transit_stops_size() const {
  return transit_stops_.size();
}
void TransitRouteInfo::clear_transit_stops() {
  transit_stops_.Clear();
}
const ::valhalla::TransitPlatformInfo& TransitRouteInfo::transit_stops(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Get(index);
}
::valhalla::TransitPlatformInfo* TransitRouteInfo::mutable_transit_stops(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Mutable(index);
}
::valhalla::TransitPlatformInfo* TransitRouteInfo::add_transit_stops() {
  // @@protoc_insertion_point(field_add:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >*
TransitRouteInfo::mutable_transit_stops() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TransitRouteInfo.transit_stops)
  return &transit_stops_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >&
TransitRouteInfo::transit_stops() const {
  // @@protoc_insertion_point(field_list:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_;
}

bool TransitRouteInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
void TransitRouteInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
bool TransitRouteInfo::has_has_block_id() const {
  return has_block_id_case() != HAS_BLOCK_ID_NOT_SET;
}
void TransitRouteInfo::clear_has_has_block_id() {
  _oneof_case_[1] = HAS_BLOCK_ID_NOT_SET;
}
bool TransitRouteInfo::has_has_trip_id() const {
  return has_trip_id_case() != HAS_TRIP_ID_NOT_SET;
}
void TransitRouteInfo::clear_has_has_trip_id() {
  _oneof_case_[2] = HAS_TRIP_ID_NOT_SET;
}
bool TransitRouteInfo::has_has_short_name() const {
  return has_short_name_case() != HAS_SHORT_NAME_NOT_SET;
}
void TransitRouteInfo::clear_has_has_short_name() {
  _oneof_case_[3] = HAS_SHORT_NAME_NOT_SET;
}
bool TransitRouteInfo::has_has_long_name() const {
  return has_long_name_case() != HAS_LONG_NAME_NOT_SET;
}
void TransitRouteInfo::clear_has_has_long_name() {
  _oneof_case_[4] = HAS_LONG_NAME_NOT_SET;
}
bool TransitRouteInfo::has_has_headsign() const {
  return has_headsign_case() != HAS_HEADSIGN_NOT_SET;
}
void TransitRouteInfo::clear_has_has_headsign() {
  _oneof_case_[5] = HAS_HEADSIGN_NOT_SET;
}
bool TransitRouteInfo::has_has_color() const {
  return has_color_case() != HAS_COLOR_NOT_SET;
}
void TransitRouteInfo::clear_has_has_color() {
  _oneof_case_[6] = HAS_COLOR_NOT_SET;
}
bool TransitRouteInfo::has_has_text_color() const {
  return has_text_color_case() != HAS_TEXT_COLOR_NOT_SET;
}
void TransitRouteInfo::clear_has_has_text_color() {
  _oneof_case_[7] = HAS_TEXT_COLOR_NOT_SET;
}
bool TransitRouteInfo::has_has_description() const {
  return has_description_case() != HAS_DESCRIPTION_NOT_SET;
}
void TransitRouteInfo::clear_has_has_description() {
  _oneof_case_[8] = HAS_DESCRIPTION_NOT_SET;
}
bool TransitRouteInfo::has_has_operator_onestop_id() const {
  return has_operator_onestop_id_case() != HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
void TransitRouteInfo::clear_has_has_operator_onestop_id() {
  _oneof_case_[9] = HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
bool TransitRouteInfo::has_has_operator_name() const {
  return has_operator_name_case() != HAS_OPERATOR_NAME_NOT_SET;
}
void TransitRouteInfo::clear_has_has_operator_name() {
  _oneof_case_[10] = HAS_OPERATOR_NAME_NOT_SET;
}
bool TransitRouteInfo::has_has_operator_url() const {
  return has_operator_url_case() != HAS_OPERATOR_URL_NOT_SET;
}
void TransitRouteInfo::clear_has_has_operator_url() {
  _oneof_case_[11] = HAS_OPERATOR_URL_NOT_SET;
}
TransitRouteInfo::HasOnestopIdCase TransitRouteInfo::has_onestop_id_case() const {
  return TransitRouteInfo::HasOnestopIdCase(_oneof_case_[0]);
}
TransitRouteInfo::HasBlockIdCase TransitRouteInfo::has_block_id_case() const {
  return TransitRouteInfo::HasBlockIdCase(_oneof_case_[1]);
}
TransitRouteInfo::HasTripIdCase TransitRouteInfo::has_trip_id_case() const {
  return TransitRouteInfo::HasTripIdCase(_oneof_case_[2]);
}
TransitRouteInfo::HasShortNameCase TransitRouteInfo::has_short_name_case() const {
  return TransitRouteInfo::HasShortNameCase(_oneof_case_[3]);
}
TransitRouteInfo::HasLongNameCase TransitRouteInfo::has_long_name_case() const {
  return TransitRouteInfo::HasLongNameCase(_oneof_case_[4]);
}
TransitRouteInfo::HasHeadsignCase TransitRouteInfo::has_headsign_case() const {
  return TransitRouteInfo::HasHeadsignCase(_oneof_case_[5]);
}
TransitRouteInfo::HasColorCase TransitRouteInfo::has_color_case() const {
  return TransitRouteInfo::HasColorCase(_oneof_case_[6]);
}
TransitRouteInfo::HasTextColorCase TransitRouteInfo::has_text_color_case() const {
  return TransitRouteInfo::HasTextColorCase(_oneof_case_[7]);
}
TransitRouteInfo::HasDescriptionCase TransitRouteInfo::has_description_case() const {
  return TransitRouteInfo::HasDescriptionCase(_oneof_case_[8]);
}
TransitRouteInfo::HasOperatorOnestopIdCase TransitRouteInfo::has_operator_onestop_id_case() const {
  return TransitRouteInfo::HasOperatorOnestopIdCase(_oneof_case_[9]);
}
TransitRouteInfo::HasOperatorNameCase TransitRouteInfo::has_operator_name_case() const {
  return TransitRouteInfo::HasOperatorNameCase(_oneof_case_[10]);
}
TransitRouteInfo::HasOperatorUrlCase TransitRouteInfo::has_operator_url_case() const {
  return TransitRouteInfo::HasOperatorUrlCase(_oneof_case_[11]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool Pronunciation_Alphabet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pronunciation_Alphabet Pronunciation::kIpa;
const Pronunciation_Alphabet Pronunciation::kXKatakana;
const Pronunciation_Alphabet Pronunciation::kXJeita;
const Pronunciation_Alphabet Pronunciation::kNtSampa;
const Pronunciation_Alphabet Pronunciation::Alphabet_MIN;
const Pronunciation_Alphabet Pronunciation::Alphabet_MAX;
const int Pronunciation::Alphabet_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pronunciation::kAlphabetFieldNumber;
const int Pronunciation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pronunciation::Pronunciation()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Pronunciation)
}

void Pronunciation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pronunciation::Pronunciation(const Pronunciation& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Pronunciation)
}

void Pronunciation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_alphabet();
  clear_has_has_value();
}

Pronunciation::~Pronunciation() {
  // @@protoc_insertion_point(destructor:valhalla.Pronunciation)
  SharedDtor();
}

void Pronunciation::SharedDtor() {
  if (has_has_alphabet()) {
    clear_has_alphabet();
  }
  if (has_has_value()) {
    clear_has_value();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Pronunciation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Pronunciation& Pronunciation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

Pronunciation* Pronunciation::default_instance_ = NULL;

Pronunciation* Pronunciation::New(::google::protobuf::Arena* arena) const {
  Pronunciation* n = new Pronunciation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pronunciation::clear_has_alphabet() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Pronunciation)
  switch(has_alphabet_case()) {
    case kAlphabet: {
      // No need to clear
      break;
    }
    case HAS_ALPHABET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_ALPHABET_NOT_SET;
}

void Pronunciation::clear_has_value() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Pronunciation)
  switch(has_value_case()) {
    case kValue: {
      has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_VALUE_NOT_SET;
}


void Pronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Pronunciation)
  clear_has_alphabet();
  clear_has_value();
}

bool Pronunciation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Pronunciation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.Pronunciation.Alphabet alphabet = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_alphabet(static_cast< ::valhalla::Pronunciation_Alphabet >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Pronunciation.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Pronunciation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Pronunciation)
  return false;
#undef DO_
}

void Pronunciation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Pronunciation)
  // optional .valhalla.Pronunciation.Alphabet alphabet = 1;
  if (has_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->alphabet(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Pronunciation.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Pronunciation)
}

int Pronunciation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Pronunciation)
  int total_size = 0;

  switch (has_alphabet_case()) {
    // optional .valhalla.Pronunciation.Alphabet alphabet = 1;
    case kAlphabet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alphabet());
      break;
    }
    case HAS_ALPHABET_NOT_SET: {
      break;
    }
  }
  switch (has_value_case()) {
    // optional string value = 2;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pronunciation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Pronunciation*>(&from));
}

void Pronunciation::MergeFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Pronunciation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_alphabet_case()) {
    case kAlphabet: {
      set_alphabet(from.alphabet());
      break;
    }
    case HAS_ALPHABET_NOT_SET: {
      break;
    }
  }
  switch (from.has_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
}

void Pronunciation::CopyFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Pronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pronunciation::IsInitialized() const {

  return true;
}

void Pronunciation::Swap(Pronunciation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pronunciation::InternalSwap(Pronunciation* other) {
  std::swap(has_alphabet_, other->has_alphabet_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_value_, other->has_value_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Pronunciation::GetTypeName() const {
  return "valhalla.Pronunciation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pronunciation

// optional .valhalla.Pronunciation.Alphabet alphabet = 1;
bool Pronunciation::has_alphabet() const {
  return has_alphabet_case() == kAlphabet;
}
void Pronunciation::set_has_alphabet() {
  _oneof_case_[0] = kAlphabet;
}
void Pronunciation::clear_alphabet() {
  if (has_alphabet()) {
    has_alphabet_.alphabet_ = 0;
    clear_has_has_alphabet();
  }
}
 ::valhalla::Pronunciation_Alphabet Pronunciation::alphabet() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.alphabet)
  if (has_alphabet()) {
    return static_cast< ::valhalla::Pronunciation_Alphabet >(has_alphabet_.alphabet_);
  }
  return static_cast< ::valhalla::Pronunciation_Alphabet >(0);
}
 void Pronunciation::set_alphabet(::valhalla::Pronunciation_Alphabet value) {
  if (!has_alphabet()) {
    clear_has_alphabet();
    set_has_alphabet();
  }
  has_alphabet_.alphabet_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.alphabet)
}

// optional string value = 2;
bool Pronunciation::has_value() const {
  return has_value_case() == kValue;
}
void Pronunciation::set_has_value() {
  _oneof_case_[1] = kValue;
}
void Pronunciation::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
 const ::std::string& Pronunciation::value() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Pronunciation::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.value)
}
 void Pronunciation::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Pronunciation.value)
}
 void Pronunciation::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Pronunciation.value)
}
 ::std::string* Pronunciation::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Pronunciation.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pronunciation::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.Pronunciation.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Pronunciation::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Pronunciation.value)
}

bool Pronunciation::has_has_alphabet() const {
  return has_alphabet_case() != HAS_ALPHABET_NOT_SET;
}
void Pronunciation::clear_has_has_alphabet() {
  _oneof_case_[0] = HAS_ALPHABET_NOT_SET;
}
bool Pronunciation::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
void Pronunciation::clear_has_has_value() {
  _oneof_case_[1] = HAS_VALUE_NOT_SET;
}
Pronunciation::HasAlphabetCase Pronunciation::has_alphabet_case() const {
  return Pronunciation::HasAlphabetCase(_oneof_case_[0]);
}
Pronunciation::HasValueCase Pronunciation::has_value_case() const {
  return Pronunciation::HasValueCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetName::kValueFieldNumber;
const int StreetName::kIsRouteNumberFieldNumber;
const int StreetName::kPronunciationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetName::StreetName()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.StreetName)
}

void StreetName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pronunciation_ = const_cast< ::valhalla::Pronunciation*>(
      ::valhalla::Pronunciation::internal_default_instance());
#else
  pronunciation_ = const_cast< ::valhalla::Pronunciation*>(&::valhalla::Pronunciation::default_instance());
#endif
}

StreetName::StreetName(const StreetName& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.StreetName)
}

void StreetName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pronunciation_ = NULL;
  clear_has_has_value();
  clear_has_has_is_route_number();
}

StreetName::~StreetName() {
  // @@protoc_insertion_point(destructor:valhalla.StreetName)
  SharedDtor();
}

void StreetName::SharedDtor() {
  if (has_has_value()) {
    clear_has_value();
  }
  if (has_has_is_route_number()) {
    clear_has_is_route_number();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pronunciation_;
  }
}

void StreetName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StreetName& StreetName::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

StreetName* StreetName::default_instance_ = NULL;

StreetName* StreetName::New(::google::protobuf::Arena* arena) const {
  StreetName* n = new StreetName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetName::clear_has_value() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.StreetName)
  switch(has_value_case()) {
    case kValue: {
      has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}

void StreetName::clear_has_is_route_number() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.StreetName)
  switch(has_is_route_number_case()) {
    case kIsRouteNumber: {
      // No need to clear
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}


void StreetName::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.StreetName)
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
  clear_has_value();
  clear_has_is_route_number();
}

bool StreetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.StreetName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.StreetName.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_route_number;
        break;
      }

      // optional bool is_route_number = 2;
      case 2: {
        if (tag == 16) {
         parse_is_route_number:
          clear_has_is_route_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_is_route_number_.is_route_number_)));
          set_has_is_route_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pronunciation;
        break;
      }

      // optional .valhalla.Pronunciation pronunciation = 3;
      case 3: {
        if (tag == 26) {
         parse_pronunciation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pronunciation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.StreetName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.StreetName)
  return false;
#undef DO_
}

void StreetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.StreetName)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.StreetName.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_route_number(), output);
  }

  // optional .valhalla.Pronunciation pronunciation = 3;
  if (this->has_pronunciation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pronunciation_, output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.StreetName)
}

int StreetName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.StreetName)
  int total_size = 0;

  // optional .valhalla.Pronunciation pronunciation = 3;
  if (this->has_pronunciation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pronunciation_);
  }

  switch (has_value_case()) {
    // optional string value = 1;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (has_is_route_number_case()) {
    // optional bool is_route_number = 2;
    case kIsRouteNumber: {
      total_size += 1 + 1;
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StreetName*>(&from));
}

void StreetName::MergeFrom(const StreetName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.StreetName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.has_is_route_number_case()) {
    case kIsRouteNumber: {
      set_is_route_number(from.is_route_number());
      break;
    }
    case HAS_IS_ROUTE_NUMBER_NOT_SET: {
      break;
    }
  }
  if (from.has_pronunciation()) {
    mutable_pronunciation()->::valhalla::Pronunciation::MergeFrom(from.pronunciation());
  }
}

void StreetName::CopyFrom(const StreetName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.StreetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetName::IsInitialized() const {

  return true;
}

void StreetName::Swap(StreetName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetName::InternalSwap(StreetName* other) {
  std::swap(pronunciation_, other->pronunciation_);
  std::swap(has_value_, other->has_value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_is_route_number_, other->has_is_route_number_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StreetName::GetTypeName() const {
  return "valhalla.StreetName";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetName

// optional string value = 1;
bool StreetName::has_value() const {
  return has_value_case() == kValue;
}
void StreetName::set_has_value() {
  _oneof_case_[0] = kValue;
}
void StreetName::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
 const ::std::string& StreetName::value() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void StreetName::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.StreetName.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.StreetName.value)
}
 void StreetName::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.StreetName.value)
}
 void StreetName::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.StreetName.value)
}
 ::std::string* StreetName::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetName::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void StreetName::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.value)
}

// optional bool is_route_number = 2;
bool StreetName::has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
void StreetName::set_has_is_route_number() {
  _oneof_case_[1] = kIsRouteNumber;
}
void StreetName::clear_is_route_number() {
  if (has_is_route_number()) {
    has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
 bool StreetName::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.is_route_number)
  if (has_is_route_number()) {
    return has_is_route_number_.is_route_number_;
  }
  return false;
}
 void StreetName::set_is_route_number(bool value) {
  if (!has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  has_is_route_number_.is_route_number_ = value;
  // @@protoc_insertion_point(field_set:valhalla.StreetName.is_route_number)
}

// optional .valhalla.Pronunciation pronunciation = 3;
bool StreetName::has_pronunciation() const {
  return !_is_default_instance_ && pronunciation_ != NULL;
}
void StreetName::clear_pronunciation() {
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
}
const ::valhalla::Pronunciation& StreetName::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.pronunciation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance().pronunciation_;
#else
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance_->pronunciation_;
#endif
}
::valhalla::Pronunciation* StreetName::mutable_pronunciation() {
  
  if (pronunciation_ == NULL) {
    pronunciation_ = new ::valhalla::Pronunciation;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.pronunciation)
  return pronunciation_;
}
::valhalla::Pronunciation* StreetName::release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.pronunciation)
  
  ::valhalla::Pronunciation* temp = pronunciation_;
  pronunciation_ = NULL;
  return temp;
}
void StreetName::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  delete pronunciation_;
  pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.pronunciation)
}

bool StreetName::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
void StreetName::clear_has_has_value() {
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}
bool StreetName::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
void StreetName::clear_has_has_is_route_number() {
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
StreetName::HasValueCase StreetName::has_value_case() const {
  return StreetName::HasValueCase(_oneof_case_[0]);
}
StreetName::HasIsRouteNumberCase StreetName::has_is_route_number_case() const {
  return StreetName::HasIsRouteNumberCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool TurnLane_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TurnLane_State TurnLane::kInvalid;
const TurnLane_State TurnLane::kValid;
const TurnLane_State TurnLane::kActive;
const TurnLane_State TurnLane::State_MIN;
const TurnLane_State TurnLane::State_MAX;
const int TurnLane::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnLane::kDirectionsMaskFieldNumber;
const int TurnLane::kStateFieldNumber;
const int TurnLane::kActiveDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnLane::TurnLane()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TurnLane)
}

void TurnLane::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TurnLane::TurnLane(const TurnLane& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TurnLane)
}

void TurnLane::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_has_directions_mask();
  clear_has_has_state();
  clear_has_has_active_direction();
}

TurnLane::~TurnLane() {
  // @@protoc_insertion_point(destructor:valhalla.TurnLane)
  SharedDtor();
}

void TurnLane::SharedDtor() {
  if (has_has_directions_mask()) {
    clear_has_directions_mask();
  }
  if (has_has_state()) {
    clear_has_state();
  }
  if (has_has_active_direction()) {
    clear_has_active_direction();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TurnLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TurnLane& TurnLane::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TurnLane* TurnLane::default_instance_ = NULL;

TurnLane* TurnLane::New(::google::protobuf::Arena* arena) const {
  TurnLane* n = new TurnLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TurnLane::clear_has_directions_mask() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TurnLane)
  switch(has_directions_mask_case()) {
    case kDirectionsMask: {
      // No need to clear
      break;
    }
    case HAS_DIRECTIONS_MASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_DIRECTIONS_MASK_NOT_SET;
}

void TurnLane::clear_has_state() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TurnLane)
  switch(has_state_case()) {
    case kState: {
      // No need to clear
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_STATE_NOT_SET;
}

void TurnLane::clear_has_active_direction() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TurnLane)
  switch(has_active_direction_case()) {
    case kActiveDirection: {
      // No need to clear
      break;
    }
    case HAS_ACTIVE_DIRECTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_ACTIVE_DIRECTION_NOT_SET;
}


void TurnLane::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TurnLane)
  clear_has_directions_mask();
  clear_has_state();
  clear_has_active_direction();
}

bool TurnLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TurnLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 directions_mask = 1;
      case 1: {
        if (tag == 8) {
          clear_has_directions_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_directions_mask_.directions_mask_)));
          set_has_directions_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .valhalla.TurnLane.State state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::valhalla::TurnLane_State >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active_direction;
        break;
      }

      // optional uint32 active_direction = 3;
      case 3: {
        if (tag == 24) {
         parse_active_direction:
          clear_has_active_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_active_direction_.active_direction_)));
          set_has_active_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TurnLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TurnLane)
  return false;
#undef DO_
}

void TurnLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TurnLane)
  // optional uint32 directions_mask = 1;
  if (has_directions_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->directions_mask(), output);
  }

  // optional .valhalla.TurnLane.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint32 active_direction = 3;
  if (has_active_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_direction(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TurnLane)
}

int TurnLane::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TurnLane)
  int total_size = 0;

  switch (has_directions_mask_case()) {
    // optional uint32 directions_mask = 1;
    case kDirectionsMask: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->directions_mask());
      break;
    }
    case HAS_DIRECTIONS_MASK_NOT_SET: {
      break;
    }
  }
  switch (has_state_case()) {
    // optional .valhalla.TurnLane.State state = 2;
    case kState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  switch (has_active_direction_case()) {
    // optional uint32 active_direction = 3;
    case kActiveDirection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_direction());
      break;
    }
    case HAS_ACTIVE_DIRECTION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnLane::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TurnLane*>(&from));
}

void TurnLane::MergeFrom(const TurnLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TurnLane)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_directions_mask_case()) {
    case kDirectionsMask: {
      set_directions_mask(from.directions_mask());
      break;
    }
    case HAS_DIRECTIONS_MASK_NOT_SET: {
      break;
    }
  }
  switch (from.has_state_case()) {
    case kState: {
      set_state(from.state());
      break;
    }
    case HAS_STATE_NOT_SET: {
      break;
    }
  }
  switch (from.has_active_direction_case()) {
    case kActiveDirection: {
      set_active_direction(from.active_direction());
      break;
    }
    case HAS_ACTIVE_DIRECTION_NOT_SET: {
      break;
    }
  }
}

void TurnLane::CopyFrom(const TurnLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TurnLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnLane::IsInitialized() const {

  return true;
}

void TurnLane::Swap(TurnLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnLane::InternalSwap(TurnLane* other) {
  std::swap(has_directions_mask_, other->has_directions_mask_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_state_, other->has_state_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_active_direction_, other->has_active_direction_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TurnLane::GetTypeName() const {
  return "valhalla.TurnLane";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TurnLane

// optional uint32 directions_mask = 1;
bool TurnLane::has_directions_mask() const {
  return has_directions_mask_case() == kDirectionsMask;
}
void TurnLane::set_has_directions_mask() {
  _oneof_case_[0] = kDirectionsMask;
}
void TurnLane::clear_directions_mask() {
  if (has_directions_mask()) {
    has_directions_mask_.directions_mask_ = 0u;
    clear_has_has_directions_mask();
  }
}
 ::google::protobuf::uint32 TurnLane::directions_mask() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.directions_mask)
  if (has_directions_mask()) {
    return has_directions_mask_.directions_mask_;
  }
  return 0u;
}
 void TurnLane::set_directions_mask(::google::protobuf::uint32 value) {
  if (!has_directions_mask()) {
    clear_has_directions_mask();
    set_has_directions_mask();
  }
  has_directions_mask_.directions_mask_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.directions_mask)
}

// optional .valhalla.TurnLane.State state = 2;
bool TurnLane::has_state() const {
  return has_state_case() == kState;
}
void TurnLane::set_has_state() {
  _oneof_case_[1] = kState;
}
void TurnLane::clear_state() {
  if (has_state()) {
    has_state_.state_ = 0;
    clear_has_has_state();
  }
}
 ::valhalla::TurnLane_State TurnLane::state() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.state)
  if (has_state()) {
    return static_cast< ::valhalla::TurnLane_State >(has_state_.state_);
  }
  return static_cast< ::valhalla::TurnLane_State >(0);
}
 void TurnLane::set_state(::valhalla::TurnLane_State value) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
  }
  has_state_.state_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.state)
}

// optional uint32 active_direction = 3;
bool TurnLane::has_active_direction() const {
  return has_active_direction_case() == kActiveDirection;
}
void TurnLane::set_has_active_direction() {
  _oneof_case_[2] = kActiveDirection;
}
void TurnLane::clear_active_direction() {
  if (has_active_direction()) {
    has_active_direction_.active_direction_ = 0u;
    clear_has_has_active_direction();
  }
}
 ::google::protobuf::uint32 TurnLane::active_direction() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.active_direction)
  if (has_active_direction()) {
    return has_active_direction_.active_direction_;
  }
  return 0u;
}
 void TurnLane::set_active_direction(::google::protobuf::uint32 value) {
  if (!has_active_direction()) {
    clear_has_active_direction();
    set_has_active_direction();
  }
  has_active_direction_.active_direction_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.active_direction)
}

bool TurnLane::has_has_directions_mask() const {
  return has_directions_mask_case() != HAS_DIRECTIONS_MASK_NOT_SET;
}
void TurnLane::clear_has_has_directions_mask() {
  _oneof_case_[0] = HAS_DIRECTIONS_MASK_NOT_SET;
}
bool TurnLane::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
void TurnLane::clear_has_has_state() {
  _oneof_case_[1] = HAS_STATE_NOT_SET;
}
bool TurnLane::has_has_active_direction() const {
  return has_active_direction_case() != HAS_ACTIVE_DIRECTION_NOT_SET;
}
void TurnLane::clear_has_has_active_direction() {
  _oneof_case_[2] = HAS_ACTIVE_DIRECTION_NOT_SET;
}
TurnLane::HasDirectionsMaskCase TurnLane::has_directions_mask_case() const {
  return TurnLane::HasDirectionsMaskCase(_oneof_case_[0]);
}
TurnLane::HasStateCase TurnLane::has_state_case() const {
  return TurnLane::HasStateCase(_oneof_case_[1]);
}
TurnLane::HasActiveDirectionCase TurnLane::has_active_direction_case() const {
  return TurnLane::HasActiveDirectionCase(_oneof_case_[2]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool TaggedValue_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaggedValue_Type TaggedValue::kNone;
const TaggedValue_Type TaggedValue::kLayer;
const TaggedValue_Type TaggedValue::kPronunciation;
const TaggedValue_Type TaggedValue::kBssInfo;
const TaggedValue_Type TaggedValue::kTunnel;
const TaggedValue_Type TaggedValue::kBridge;
const TaggedValue_Type TaggedValue::Type_MIN;
const TaggedValue_Type TaggedValue::Type_MAX;
const int TaggedValue::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaggedValue::kValueFieldNumber;
const int TaggedValue::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaggedValue::TaggedValue()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.TaggedValue)
}

void TaggedValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaggedValue::TaggedValue(const TaggedValue& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.TaggedValue)
}

void TaggedValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_value();
  clear_has_has_type();
}

TaggedValue::~TaggedValue() {
  // @@protoc_insertion_point(destructor:valhalla.TaggedValue)
  SharedDtor();
}

void TaggedValue::SharedDtor() {
  if (has_has_value()) {
    clear_has_value();
  }
  if (has_has_type()) {
    clear_has_type();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaggedValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaggedValue& TaggedValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_tripcommon_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_tripcommon_2eproto();
#endif
  return *default_instance_;
}

TaggedValue* TaggedValue::default_instance_ = NULL;

TaggedValue* TaggedValue::New(::google::protobuf::Arena* arena) const {
  TaggedValue* n = new TaggedValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaggedValue::clear_has_value() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TaggedValue)
  switch(has_value_case()) {
    case kValue: {
      has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}

void TaggedValue::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.TaggedValue)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_TYPE_NOT_SET;
}


void TaggedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TaggedValue)
  clear_has_value();
  clear_has_type();
}

bool TaggedValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.TaggedValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .valhalla.TaggedValue.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::TaggedValue_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.TaggedValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.TaggedValue)
  return false;
#undef DO_
}

void TaggedValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.TaggedValue)
  // optional bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional .valhalla.TaggedValue.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.TaggedValue)
}

int TaggedValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TaggedValue)
  int total_size = 0;

  switch (has_value_case()) {
    // optional bytes value = 1;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (has_type_case()) {
    // optional .valhalla.TaggedValue.Type type = 2;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaggedValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaggedValue*>(&from));
}

void TaggedValue::MergeFrom(const TaggedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TaggedValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
}

void TaggedValue::CopyFrom(const TaggedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TaggedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaggedValue::IsInitialized() const {

  return true;
}

void TaggedValue::Swap(TaggedValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaggedValue::InternalSwap(TaggedValue* other) {
  std::swap(has_value_, other->has_value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TaggedValue::GetTypeName() const {
  return "valhalla.TaggedValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaggedValue

// optional bytes value = 1;
bool TaggedValue::has_value() const {
  return has_value_case() == kValue;
}
void TaggedValue::set_has_value() {
  _oneof_case_[0] = kValue;
}
void TaggedValue::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
 const ::std::string& TaggedValue::value() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TaggedValue::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.value)
}
 void TaggedValue::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TaggedValue.value)
}
 void TaggedValue::set_value(const void* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TaggedValue.value)
}
 ::std::string* TaggedValue::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TaggedValue.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaggedValue::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.TaggedValue.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TaggedValue::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TaggedValue.value)
}

// optional .valhalla.TaggedValue.Type type = 2;
bool TaggedValue::has_type() const {
  return has_type_case() == kType;
}
void TaggedValue::set_has_type() {
  _oneof_case_[1] = kType;
}
void TaggedValue::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::TaggedValue_Type TaggedValue::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.type)
  if (has_type()) {
    return static_cast< ::valhalla::TaggedValue_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::TaggedValue_Type >(0);
}
 void TaggedValue::set_type(::valhalla::TaggedValue_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.type)
}

bool TaggedValue::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
void TaggedValue::clear_has_has_value() {
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}
bool TaggedValue::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void TaggedValue::clear_has_has_type() {
  _oneof_case_[1] = HAS_TYPE_NOT_SET;
}
TaggedValue::HasValueCase TaggedValue::has_value_case() const {
  return TaggedValue::HasValueCase(_oneof_case_[0]);
}
TaggedValue::HasTypeCase TaggedValue::has_type_case() const {
  return TaggedValue::HasTypeCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: incidents.proto

#ifndef PROTOBUF_incidents_2eproto__INCLUDED
#define PROTOBUF_incidents_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_incidents_2eproto();
void protobuf_AssignDesc_incidents_2eproto();
void protobuf_ShutdownFile_incidents_2eproto();

class IncidentsTile;
class IncidentsTile_Location;
class IncidentsTile_Metadata;
class IncidentsTile_Metadata_Congestion;

enum IncidentsTile_Metadata_Type {
  IncidentsTile_Metadata_Type_ACCIDENT = 0,
  IncidentsTile_Metadata_Type_CONGESTION = 1,
  IncidentsTile_Metadata_Type_CONSTRUCTION = 2,
  IncidentsTile_Metadata_Type_DISABLED_VEHICLE = 3,
  IncidentsTile_Metadata_Type_LANE_RESTRICTION = 4,
  IncidentsTile_Metadata_Type_MASS_TRANSIT = 5,
  IncidentsTile_Metadata_Type_MISCELLANEOUS = 6,
  IncidentsTile_Metadata_Type_OTHER_NEWS = 7,
  IncidentsTile_Metadata_Type_PLANNED_EVENT = 8,
  IncidentsTile_Metadata_Type_ROAD_CLOSURE = 9,
  IncidentsTile_Metadata_Type_ROAD_HAZARD = 10,
  IncidentsTile_Metadata_Type_WEATHER = 11,
  IncidentsTile_Metadata_Type_IncidentsTile_Metadata_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IncidentsTile_Metadata_Type_IncidentsTile_Metadata_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IncidentsTile_Metadata_Type_IsValid(int value);
const IncidentsTile_Metadata_Type IncidentsTile_Metadata_Type_Type_MIN = IncidentsTile_Metadata_Type_ACCIDENT;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata_Type_Type_MAX = IncidentsTile_Metadata_Type_WEATHER;
const int IncidentsTile_Metadata_Type_Type_ARRAYSIZE = IncidentsTile_Metadata_Type_Type_MAX + 1;

enum IncidentsTile_Metadata_Impact {
  IncidentsTile_Metadata_Impact_UNKNOWN = 0,
  IncidentsTile_Metadata_Impact_CRITICAL = 1,
  IncidentsTile_Metadata_Impact_MAJOR = 2,
  IncidentsTile_Metadata_Impact_MINOR = 3,
  IncidentsTile_Metadata_Impact_LOW = 4,
  IncidentsTile_Metadata_Impact_IncidentsTile_Metadata_Impact_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IncidentsTile_Metadata_Impact_IncidentsTile_Metadata_Impact_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IncidentsTile_Metadata_Impact_IsValid(int value);
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata_Impact_Impact_MIN = IncidentsTile_Metadata_Impact_UNKNOWN;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata_Impact_Impact_MAX = IncidentsTile_Metadata_Impact_LOW;
const int IncidentsTile_Metadata_Impact_Impact_ARRAYSIZE = IncidentsTile_Metadata_Impact_Impact_MAX + 1;

// ===================================================================

class IncidentsTile_Location : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Location) */ {
 public:
  IncidentsTile_Location();
  virtual ~IncidentsTile_Location();

  IncidentsTile_Location(const IncidentsTile_Location& from);

  inline IncidentsTile_Location& operator=(const IncidentsTile_Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const IncidentsTile_Location& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IncidentsTile_Location* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IncidentsTile_Location* other);

  // implements Message ----------------------------------------------

  inline IncidentsTile_Location* New() const { return New(NULL); }

  IncidentsTile_Location* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IncidentsTile_Location& from);
  void MergeFrom(const IncidentsTile_Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentsTile_Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 edge_index = 1;
  void clear_edge_index();
  static const int kEdgeIndexFieldNumber = 1;
  ::google::protobuf::uint32 edge_index() const;
  void set_edge_index(::google::protobuf::uint32 value);

  // optional float start_offset = 2;
  void clear_start_offset();
  static const int kStartOffsetFieldNumber = 2;
  float start_offset() const;
  void set_start_offset(float value);

  // optional float end_offset = 3;
  void clear_end_offset();
  static const int kEndOffsetFieldNumber = 3;
  float end_offset() const;
  void set_end_offset(float value);

  // optional uint32 metadata_index = 4;
  void clear_metadata_index();
  static const int kMetadataIndexFieldNumber = 4;
  ::google::protobuf::uint32 metadata_index() const;
  void set_metadata_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Location)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint32 edge_index_;
  float start_offset_;
  float end_offset_;
  ::google::protobuf::uint32 metadata_index_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_incidents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_incidents_2eproto();
  #endif
  friend void protobuf_AssignDesc_incidents_2eproto();
  friend void protobuf_ShutdownFile_incidents_2eproto();

  void InitAsDefaultInstance();
  static IncidentsTile_Location* default_instance_;
};
// -------------------------------------------------------------------

class IncidentsTile_Metadata_Congestion : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Metadata.Congestion) */ {
 public:
  IncidentsTile_Metadata_Congestion();
  virtual ~IncidentsTile_Metadata_Congestion();

  IncidentsTile_Metadata_Congestion(const IncidentsTile_Metadata_Congestion& from);

  inline IncidentsTile_Metadata_Congestion& operator=(const IncidentsTile_Metadata_Congestion& from) {
    CopyFrom(from);
    return *this;
  }

  static const IncidentsTile_Metadata_Congestion& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IncidentsTile_Metadata_Congestion* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IncidentsTile_Metadata_Congestion* other);

  // implements Message ----------------------------------------------

  inline IncidentsTile_Metadata_Congestion* New() const { return New(NULL); }

  IncidentsTile_Metadata_Congestion* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IncidentsTile_Metadata_Congestion& from);
  void MergeFrom(const IncidentsTile_Metadata_Congestion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentsTile_Metadata_Congestion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Metadata.Congestion)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_incidents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_incidents_2eproto();
  #endif
  friend void protobuf_AssignDesc_incidents_2eproto();
  friend void protobuf_ShutdownFile_incidents_2eproto();

  void InitAsDefaultInstance();
  static IncidentsTile_Metadata_Congestion* default_instance_;
};
// -------------------------------------------------------------------

class IncidentsTile_Metadata : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile.Metadata) */ {
 public:
  IncidentsTile_Metadata();
  virtual ~IncidentsTile_Metadata();

  IncidentsTile_Metadata(const IncidentsTile_Metadata& from);

  inline IncidentsTile_Metadata& operator=(const IncidentsTile_Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const IncidentsTile_Metadata& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IncidentsTile_Metadata* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IncidentsTile_Metadata* other);

  // implements Message ----------------------------------------------

  inline IncidentsTile_Metadata* New() const { return New(NULL); }

  IncidentsTile_Metadata* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IncidentsTile_Metadata& from);
  void MergeFrom(const IncidentsTile_Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentsTile_Metadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef IncidentsTile_Metadata_Congestion Congestion;

  typedef IncidentsTile_Metadata_Type Type;
  static const Type ACCIDENT =
    IncidentsTile_Metadata_Type_ACCIDENT;
  static const Type CONGESTION =
    IncidentsTile_Metadata_Type_CONGESTION;
  static const Type CONSTRUCTION =
    IncidentsTile_Metadata_Type_CONSTRUCTION;
  static const Type DISABLED_VEHICLE =
    IncidentsTile_Metadata_Type_DISABLED_VEHICLE;
  static const Type LANE_RESTRICTION =
    IncidentsTile_Metadata_Type_LANE_RESTRICTION;
  static const Type MASS_TRANSIT =
    IncidentsTile_Metadata_Type_MASS_TRANSIT;
  static const Type MISCELLANEOUS =
    IncidentsTile_Metadata_Type_MISCELLANEOUS;
  static const Type OTHER_NEWS =
    IncidentsTile_Metadata_Type_OTHER_NEWS;
  static const Type PLANNED_EVENT =
    IncidentsTile_Metadata_Type_PLANNED_EVENT;
  static const Type ROAD_CLOSURE =
    IncidentsTile_Metadata_Type_ROAD_CLOSURE;
  static const Type ROAD_HAZARD =
    IncidentsTile_Metadata_Type_ROAD_HAZARD;
  static const Type WEATHER =
    IncidentsTile_Metadata_Type_WEATHER;
  static inline bool Type_IsValid(int value) {
    return IncidentsTile_Metadata_Type_IsValid(value);
  }
  static const Type Type_MIN =
    IncidentsTile_Metadata_Type_Type_MIN;
  static const Type Type_MAX =
    IncidentsTile_Metadata_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    IncidentsTile_Metadata_Type_Type_ARRAYSIZE;

  typedef IncidentsTile_Metadata_Impact Impact;
  static const Impact UNKNOWN =
    IncidentsTile_Metadata_Impact_UNKNOWN;
  static const Impact CRITICAL =
    IncidentsTile_Metadata_Impact_CRITICAL;
  static const Impact MAJOR =
    IncidentsTile_Metadata_Impact_MAJOR;
  static const Impact MINOR =
    IncidentsTile_Metadata_Impact_MINOR;
  static const Impact LOW =
    IncidentsTile_Metadata_Impact_LOW;
  static inline bool Impact_IsValid(int value) {
    return IncidentsTile_Metadata_Impact_IsValid(value);
  }
  static const Impact Impact_MIN =
    IncidentsTile_Metadata_Impact_Impact_MIN;
  static const Impact Impact_MAX =
    IncidentsTile_Metadata_Impact_Impact_MAX;
  static const int Impact_ARRAYSIZE =
    IncidentsTile_Metadata_Impact_Impact_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .valhalla.IncidentsTile.Metadata.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::valhalla::IncidentsTile_Metadata_Type type() const;
  void set_type(::valhalla::IncidentsTile_Metadata_Type value);

  // repeated uint32 alertc_codes = 2;
  int alertc_codes_size() const;
  void clear_alertc_codes();
  static const int kAlertcCodesFieldNumber = 2;
  ::google::protobuf::uint32 alertc_codes(int index) const;
  void set_alertc_codes(int index, ::google::protobuf::uint32 value);
  void add_alertc_codes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      alertc_codes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_alertc_codes();

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string sub_type = 4;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 4;
  const ::std::string& sub_type() const;
  void set_sub_type(const ::std::string& value);
  void set_sub_type(const char* value);
  void set_sub_type(const char* value, size_t size);
  ::std::string* mutable_sub_type();
  ::std::string* release_sub_type();
  void set_allocated_sub_type(::std::string* sub_type);

  // optional string sub_type_description = 5;
  void clear_sub_type_description();
  static const int kSubTypeDescriptionFieldNumber = 5;
  const ::std::string& sub_type_description() const;
  void set_sub_type_description(const ::std::string& value);
  void set_sub_type_description(const char* value);
  void set_sub_type_description(const char* value, size_t size);
  ::std::string* mutable_sub_type_description();
  ::std::string* release_sub_type_description();
  void set_allocated_sub_type_description(::std::string* sub_type_description);

  // optional uint64 start_time = 6;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 7;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  void clear_impact();
  static const int kImpactFieldNumber = 9;
  ::valhalla::IncidentsTile_Metadata_Impact impact() const;
  void set_impact(::valhalla::IncidentsTile_Metadata_Impact value);

  // optional bool road_closed = 10;
  void clear_road_closed();
  static const int kRoadClosedFieldNumber = 10;
  bool road_closed() const;
  void set_road_closed(bool value);

  // optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  bool has_congestion() const;
  void clear_congestion();
  static const int kCongestionFieldNumber = 11;
  const ::valhalla::IncidentsTile_Metadata_Congestion& congestion() const;
  ::valhalla::IncidentsTile_Metadata_Congestion* mutable_congestion();
  ::valhalla::IncidentsTile_Metadata_Congestion* release_congestion();
  void set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* congestion);

  // repeated string lanes_blocked = 12;
  int lanes_blocked_size() const;
  void clear_lanes_blocked();
  static const int kLanesBlockedFieldNumber = 12;
  const ::std::string& lanes_blocked(int index) const;
  ::std::string* mutable_lanes_blocked(int index);
  void set_lanes_blocked(int index, const ::std::string& value);
  void set_lanes_blocked(int index, const char* value);
  void set_lanes_blocked(int index, const char* value, size_t size);
  ::std::string* add_lanes_blocked();
  void add_lanes_blocked(const ::std::string& value);
  void add_lanes_blocked(const char* value);
  void add_lanes_blocked(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lanes_blocked() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lanes_blocked();

  // optional uint64 creation_time = 13;
  void clear_creation_time();
  static const int kCreationTimeFieldNumber = 13;
  ::google::protobuf::uint64 creation_time() const;
  void set_creation_time(::google::protobuf::uint64 value);

  // optional string long_description = 14;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 14;
  const ::std::string& long_description() const;
  void set_long_description(const ::std::string& value);
  void set_long_description(const char* value);
  void set_long_description(const char* value, size_t size);
  ::std::string* mutable_long_description();
  ::std::string* release_long_description();
  void set_allocated_long_description(::std::string* long_description);

  // optional string clear_lanes = 15;
  void clear_clear_lanes();
  static const int kClearLanesFieldNumber = 15;
  const ::std::string& clear_lanes() const;
  void set_clear_lanes(const ::std::string& value);
  void set_clear_lanes(const char* value);
  void set_clear_lanes(const char* value, size_t size);
  ::std::string* mutable_clear_lanes();
  ::std::string* release_clear_lanes();
  void set_allocated_clear_lanes(::std::string* clear_lanes);

  // optional uint64 num_lanes_blocked = 16;
  void clear_num_lanes_blocked();
  static const int kNumLanesBlockedFieldNumber = 16;
  ::google::protobuf::uint64 num_lanes_blocked() const;
  void set_num_lanes_blocked(::google::protobuf::uint64 value);

  // optional uint32 length = 17;
  void clear_length();
  static const int kLengthFieldNumber = 17;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // optional uint64 id = 128;
  void clear_id();
  static const int kIdFieldNumber = 128;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional string iso_3166_1_alpha2 = 129;
  void clear_iso_3166_1_alpha2();
  static const int kIso31661Alpha2FieldNumber = 129;
  const ::std::string& iso_3166_1_alpha2() const;
  void set_iso_3166_1_alpha2(const ::std::string& value);
  void set_iso_3166_1_alpha2(const char* value);
  void set_iso_3166_1_alpha2(const char* value, size_t size);
  ::std::string* mutable_iso_3166_1_alpha2();
  ::std::string* release_iso_3166_1_alpha2();
  void set_allocated_iso_3166_1_alpha2(::std::string* iso_3166_1_alpha2);

  // optional string iso_3166_1_alpha3 = 130;
  void clear_iso_3166_1_alpha3();
  static const int kIso31661Alpha3FieldNumber = 130;
  const ::std::string& iso_3166_1_alpha3() const;
  void set_iso_3166_1_alpha3(const ::std::string& value);
  void set_iso_3166_1_alpha3(const char* value);
  void set_iso_3166_1_alpha3(const char* value, size_t size);
  ::std::string* mutable_iso_3166_1_alpha3();
  ::std::string* release_iso_3166_1_alpha3();
  void set_allocated_iso_3166_1_alpha3(::std::string* iso_3166_1_alpha3);

  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile.Metadata)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > alertc_codes_;
  mutable int _alertc_codes_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr sub_type_;
  int type_;
  int impact_;
  ::google::protobuf::internal::ArenaStringPtr sub_type_description_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::valhalla::IncidentsTile_Metadata_Congestion* congestion_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lanes_blocked_;
  ::google::protobuf::uint64 creation_time_;
  bool road_closed_;
  ::google::protobuf::uint32 length_;
  ::google::protobuf::internal::ArenaStringPtr long_description_;
  ::google::protobuf::internal::ArenaStringPtr clear_lanes_;
  ::google::protobuf::uint64 num_lanes_blocked_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr iso_3166_1_alpha2_;
  ::google::protobuf::internal::ArenaStringPtr iso_3166_1_alpha3_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_incidents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_incidents_2eproto();
  #endif
  friend void protobuf_AssignDesc_incidents_2eproto();
  friend void protobuf_ShutdownFile_incidents_2eproto();

  void InitAsDefaultInstance();
  static IncidentsTile_Metadata* default_instance_;
};
// -------------------------------------------------------------------

class IncidentsTile : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.IncidentsTile) */ {
 public:
  IncidentsTile();
  virtual ~IncidentsTile();

  IncidentsTile(const IncidentsTile& from);

  inline IncidentsTile& operator=(const IncidentsTile& from) {
    CopyFrom(from);
    return *this;
  }

  static const IncidentsTile& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IncidentsTile* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IncidentsTile* other);

  // implements Message ----------------------------------------------

  inline IncidentsTile* New() const { return New(NULL); }

  IncidentsTile* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IncidentsTile& from);
  void MergeFrom(const IncidentsTile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentsTile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef IncidentsTile_Location Location;
  typedef IncidentsTile_Metadata Metadata;

  // accessors -------------------------------------------------------

  // repeated .valhalla.IncidentsTile.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  const ::valhalla::IncidentsTile_Location& locations(int index) const;
  ::valhalla::IncidentsTile_Location* mutable_locations(int index);
  ::valhalla::IncidentsTile_Location* add_locations();
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >*
      mutable_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >&
      locations() const;

  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::valhalla::IncidentsTile_Metadata& metadata(int index) const;
  ::valhalla::IncidentsTile_Metadata* mutable_metadata(int index);
  ::valhalla::IncidentsTile_Metadata* add_metadata();
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >*
      mutable_metadata();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:valhalla.IncidentsTile)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location > locations_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata > metadata_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_incidents_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_incidents_2eproto();
  #endif
  friend void protobuf_AssignDesc_incidents_2eproto();
  friend void protobuf_ShutdownFile_incidents_2eproto();

  void InitAsDefaultInstance();
  static IncidentsTile* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IncidentsTile_Location

// optional uint32 edge_index = 1;
inline void IncidentsTile_Location::clear_edge_index() {
  edge_index_ = 0u;
}
inline ::google::protobuf::uint32 IncidentsTile_Location::edge_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.edge_index)
  return edge_index_;
}
inline void IncidentsTile_Location::set_edge_index(::google::protobuf::uint32 value) {
  
  edge_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.edge_index)
}

// optional float start_offset = 2;
inline void IncidentsTile_Location::clear_start_offset() {
  start_offset_ = 0;
}
inline float IncidentsTile_Location::start_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.start_offset)
  return start_offset_;
}
inline void IncidentsTile_Location::set_start_offset(float value) {
  
  start_offset_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.start_offset)
}

// optional float end_offset = 3;
inline void IncidentsTile_Location::clear_end_offset() {
  end_offset_ = 0;
}
inline float IncidentsTile_Location::end_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.end_offset)
  return end_offset_;
}
inline void IncidentsTile_Location::set_end_offset(float value) {
  
  end_offset_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.end_offset)
}

// optional uint32 metadata_index = 4;
inline void IncidentsTile_Location::clear_metadata_index() {
  metadata_index_ = 0u;
}
inline ::google::protobuf::uint32 IncidentsTile_Location::metadata_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.metadata_index)
  return metadata_index_;
}
inline void IncidentsTile_Location::set_metadata_index(::google::protobuf::uint32 value) {
  
  metadata_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.metadata_index)
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata_Congestion

// optional uint32 value = 1;
inline void IncidentsTile_Metadata_Congestion::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 IncidentsTile_Metadata_Congestion::value() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.Congestion.value)
  return value_;
}
inline void IncidentsTile_Metadata_Congestion::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.Congestion.value)
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata

// optional .valhalla.IncidentsTile.Metadata.Type type = 1;
inline void IncidentsTile_Metadata::clear_type() {
  type_ = 0;
}
inline ::valhalla::IncidentsTile_Metadata_Type IncidentsTile_Metadata::type() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.type)
  return static_cast< ::valhalla::IncidentsTile_Metadata_Type >(type_);
}
inline void IncidentsTile_Metadata::set_type(::valhalla::IncidentsTile_Metadata_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.type)
}

// repeated uint32 alertc_codes = 2;
inline int IncidentsTile_Metadata::alertc_codes_size() const {
  return alertc_codes_.size();
}
inline void IncidentsTile_Metadata::clear_alertc_codes() {
  alertc_codes_.Clear();
}
inline ::google::protobuf::uint32 IncidentsTile_Metadata::alertc_codes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.alertc_codes)
  return alertc_codes_.Get(index);
}
inline void IncidentsTile_Metadata::set_alertc_codes(int index, ::google::protobuf::uint32 value) {
  alertc_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.alertc_codes)
}
inline void IncidentsTile_Metadata::add_alertc_codes(::google::protobuf::uint32 value) {
  alertc_codes_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.alertc_codes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IncidentsTile_Metadata::alertc_codes() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  return alertc_codes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IncidentsTile_Metadata::mutable_alertc_codes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  return &alertc_codes_;
}

// optional string description = 3;
inline void IncidentsTile_Metadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.description)
}
inline void IncidentsTile_Metadata::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.description)
}
inline void IncidentsTile_Metadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.description)
}
inline ::std::string* IncidentsTile_Metadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.description)
}

// optional string sub_type = 4;
inline void IncidentsTile_Metadata::clear_sub_type() {
  sub_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::sub_type() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type)
  return sub_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_sub_type(const ::std::string& value) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type)
}
inline void IncidentsTile_Metadata::set_sub_type(const char* value) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.sub_type)
}
inline void IncidentsTile_Metadata::set_sub_type(const char* value, size_t size) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.sub_type)
}
inline ::std::string* IncidentsTile_Metadata::mutable_sub_type() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type)
  return sub_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_sub_type() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type)
  
  return sub_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_sub_type(::std::string* sub_type) {
  if (sub_type != NULL) {
    
  } else {
    
  }
  sub_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_type);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type)
}

// optional string sub_type_description = 5;
inline void IncidentsTile_Metadata::clear_sub_type_description() {
  sub_type_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::sub_type_description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type_description)
  return sub_type_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_sub_type_description(const ::std::string& value) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type_description)
}
inline void IncidentsTile_Metadata::set_sub_type_description(const char* value) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.sub_type_description)
}
inline void IncidentsTile_Metadata::set_sub_type_description(const char* value, size_t size) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.sub_type_description)
}
inline ::std::string* IncidentsTile_Metadata::mutable_sub_type_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type_description)
  return sub_type_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_sub_type_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type_description)
  
  return sub_type_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_sub_type_description(::std::string* sub_type_description) {
  if (sub_type_description != NULL) {
    
  } else {
    
  }
  sub_type_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_type_description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type_description)
}

// optional uint64 start_time = 6;
inline void IncidentsTile_Metadata::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncidentsTile_Metadata::start_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.start_time)
  return start_time_;
}
inline void IncidentsTile_Metadata::set_start_time(::google::protobuf::uint64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.start_time)
}

// optional uint64 end_time = 7;
inline void IncidentsTile_Metadata::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncidentsTile_Metadata::end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.end_time)
  return end_time_;
}
inline void IncidentsTile_Metadata::set_end_time(::google::protobuf::uint64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.end_time)
}

// optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
inline void IncidentsTile_Metadata::clear_impact() {
  impact_ = 0;
}
inline ::valhalla::IncidentsTile_Metadata_Impact IncidentsTile_Metadata::impact() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.impact)
  return static_cast< ::valhalla::IncidentsTile_Metadata_Impact >(impact_);
}
inline void IncidentsTile_Metadata::set_impact(::valhalla::IncidentsTile_Metadata_Impact value) {
  
  impact_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.impact)
}

// optional bool road_closed = 10;
inline void IncidentsTile_Metadata::clear_road_closed() {
  road_closed_ = false;
}
inline bool IncidentsTile_Metadata::road_closed() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.road_closed)
  return road_closed_;
}
inline void IncidentsTile_Metadata::set_road_closed(bool value) {
  
  road_closed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.road_closed)
}

// optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
inline bool IncidentsTile_Metadata::has_congestion() const {
  return !_is_default_instance_ && congestion_ != NULL;
}
inline void IncidentsTile_Metadata::clear_congestion() {
  if (GetArenaNoVirtual() == NULL && congestion_ != NULL) delete congestion_;
  congestion_ = NULL;
}
inline const ::valhalla::IncidentsTile_Metadata_Congestion& IncidentsTile_Metadata::congestion() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.congestion)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return congestion_ != NULL ? *congestion_ : *default_instance().congestion_;
#else
  return congestion_ != NULL ? *congestion_ : *default_instance_->congestion_;
#endif
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::mutable_congestion() {
  
  if (congestion_ == NULL) {
    congestion_ = new ::valhalla::IncidentsTile_Metadata_Congestion;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.congestion)
  return congestion_;
}
inline ::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::release_congestion() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.congestion)
  
  ::valhalla::IncidentsTile_Metadata_Congestion* temp = congestion_;
  congestion_ = NULL;
  return temp;
}
inline void IncidentsTile_Metadata::set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* congestion) {
  delete congestion_;
  congestion_ = congestion;
  if (congestion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.congestion)
}

// repeated string lanes_blocked = 12;
inline int IncidentsTile_Metadata::lanes_blocked_size() const {
  return lanes_blocked_.size();
}
inline void IncidentsTile_Metadata::clear_lanes_blocked() {
  lanes_blocked_.Clear();
}
inline const ::std::string& IncidentsTile_Metadata::lanes_blocked(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Get(index);
}
inline ::std::string* IncidentsTile_Metadata::mutable_lanes_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Mutable(index);
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.lanes_blocked)
  lanes_blocked_.Mutable(index)->assign(value);
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value) {
  lanes_blocked_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value, size_t size) {
  lanes_blocked_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline ::std::string* IncidentsTile_Metadata::add_lanes_blocked() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Add();
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const ::std::string& value) {
  lanes_blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const char* value) {
  lanes_blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline void IncidentsTile_Metadata::add_lanes_blocked(const char* value, size_t size) {
  lanes_blocked_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IncidentsTile_Metadata::lanes_blocked() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IncidentsTile_Metadata::mutable_lanes_blocked() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return &lanes_blocked_;
}

// optional uint64 creation_time = 13;
inline void IncidentsTile_Metadata::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncidentsTile_Metadata::creation_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.creation_time)
  return creation_time_;
}
inline void IncidentsTile_Metadata::set_creation_time(::google::protobuf::uint64 value) {
  
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.creation_time)
}

// optional string long_description = 14;
inline void IncidentsTile_Metadata::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::long_description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.long_description)
  return long_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.long_description)
}
inline void IncidentsTile_Metadata::set_long_description(const char* value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.long_description)
}
inline void IncidentsTile_Metadata::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.long_description)
}
inline ::std::string* IncidentsTile_Metadata::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_long_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_long_description(::std::string* long_description) {
  if (long_description != NULL) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.long_description)
}

// optional string clear_lanes = 15;
inline void IncidentsTile_Metadata::clear_clear_lanes() {
  clear_lanes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::clear_lanes() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.clear_lanes)
  return clear_lanes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_clear_lanes(const ::std::string& value) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.clear_lanes)
}
inline void IncidentsTile_Metadata::set_clear_lanes(const char* value) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.clear_lanes)
}
inline void IncidentsTile_Metadata::set_clear_lanes(const char* value, size_t size) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.clear_lanes)
}
inline ::std::string* IncidentsTile_Metadata::mutable_clear_lanes() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.clear_lanes)
  return clear_lanes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_clear_lanes() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.clear_lanes)
  
  return clear_lanes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_clear_lanes(::std::string* clear_lanes) {
  if (clear_lanes != NULL) {
    
  } else {
    
  }
  clear_lanes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clear_lanes);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.clear_lanes)
}

// optional uint64 num_lanes_blocked = 16;
inline void IncidentsTile_Metadata::clear_num_lanes_blocked() {
  num_lanes_blocked_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncidentsTile_Metadata::num_lanes_blocked() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
  return num_lanes_blocked_;
}
inline void IncidentsTile_Metadata::set_num_lanes_blocked(::google::protobuf::uint64 value) {
  
  num_lanes_blocked_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
}

// optional uint32 length = 17;
inline void IncidentsTile_Metadata::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 IncidentsTile_Metadata::length() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.length)
  return length_;
}
inline void IncidentsTile_Metadata::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.length)
}

// optional uint64 id = 128;
inline void IncidentsTile_Metadata::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 IncidentsTile_Metadata::id() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.id)
  return id_;
}
inline void IncidentsTile_Metadata::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.id)
}

// optional string iso_3166_1_alpha2 = 129;
inline void IncidentsTile_Metadata::clear_iso_3166_1_alpha2() {
  iso_3166_1_alpha2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::iso_3166_1_alpha2() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return iso_3166_1_alpha2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const ::std::string& value) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const char* value) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const char* value, size_t size) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
inline ::std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha2() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return iso_3166_1_alpha2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha2() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  
  return iso_3166_1_alpha2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha2(::std::string* iso_3166_1_alpha2) {
  if (iso_3166_1_alpha2 != NULL) {
    
  } else {
    
  }
  iso_3166_1_alpha2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_3166_1_alpha2);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}

// optional string iso_3166_1_alpha3 = 130;
inline void IncidentsTile_Metadata::clear_iso_3166_1_alpha3() {
  iso_3166_1_alpha3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IncidentsTile_Metadata::iso_3166_1_alpha3() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return iso_3166_1_alpha3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const ::std::string& value) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const char* value) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
inline void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const char* value, size_t size) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
inline ::std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha3() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return iso_3166_1_alpha3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha3() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  
  return iso_3166_1_alpha3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha3(::std::string* iso_3166_1_alpha3) {
  if (iso_3166_1_alpha3 != NULL) {
    
  } else {
    
  }
  iso_3166_1_alpha3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_3166_1_alpha3);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}

// -------------------------------------------------------------------

// IncidentsTile

// repeated .valhalla.IncidentsTile.Location locations = 1;
inline int IncidentsTile::locations_size() const {
  return locations_.size();
}
inline void IncidentsTile::clear_locations() {
  locations_.Clear();
}
inline const ::valhalla::IncidentsTile_Location& IncidentsTile::locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.locations)
  return locations_.Get(index);
}
inline ::valhalla::IncidentsTile_Location* IncidentsTile::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.locations)
  return locations_.Mutable(index);
}
inline ::valhalla::IncidentsTile_Location* IncidentsTile::add_locations() {
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.locations)
  return locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >*
IncidentsTile::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.locations)
  return &locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >&
IncidentsTile::locations() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.locations)
  return locations_;
}

// repeated .valhalla.IncidentsTile.Metadata metadata = 2;
inline int IncidentsTile::metadata_size() const {
  return metadata_.size();
}
inline void IncidentsTile::clear_metadata() {
  metadata_.Clear();
}
inline const ::valhalla::IncidentsTile_Metadata& IncidentsTile::metadata(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.metadata)
  return metadata_.Get(index);
}
inline ::valhalla::IncidentsTile_Metadata* IncidentsTile::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.metadata)
  return metadata_.Mutable(index);
}
inline ::valhalla::IncidentsTile_Metadata* IncidentsTile::add_metadata() {
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.metadata)
  return metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >*
IncidentsTile::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.metadata)
  return &metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >&
IncidentsTile::metadata() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.metadata)
  return metadata_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::valhalla::IncidentsTile_Metadata_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::IncidentsTile_Metadata_Impact> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_incidents_2eproto__INCLUDED

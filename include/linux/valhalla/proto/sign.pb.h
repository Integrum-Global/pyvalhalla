// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#ifndef PROTOBUF_sign_2eproto__INCLUDED
#define PROTOBUF_sign_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "tripcommon.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace valhalla {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sign_2eproto();
void protobuf_AssignDesc_sign_2eproto();
void protobuf_ShutdownFile_sign_2eproto();

class TripSign;
class TripSignElement;

// ===================================================================

class TripSignElement : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSignElement) */ {
 public:
  TripSignElement();
  virtual ~TripSignElement();

  TripSignElement(const TripSignElement& from);

  inline TripSignElement& operator=(const TripSignElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const TripSignElement& default_instance();

  enum HasTextCase {
    kText = 1,
    HAS_TEXT_NOT_SET = 0,
  };

  enum HasIsRouteNumberCase {
    kIsRouteNumber = 2,
    HAS_IS_ROUTE_NUMBER_NOT_SET = 0,
  };

  enum HasConsecutiveCountCase {
    kConsecutiveCount = 3,
    HAS_CONSECUTIVE_COUNT_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TripSignElement* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TripSignElement* other);

  // implements Message ----------------------------------------------

  inline TripSignElement* New() const { return New(NULL); }

  TripSignElement* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TripSignElement& from);
  void MergeFrom(const TripSignElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSignElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional bool is_route_number = 2;
  private:
  bool has_is_route_number() const;
  public:
  void clear_is_route_number();
  static const int kIsRouteNumberFieldNumber = 2;
  bool is_route_number() const;
  void set_is_route_number(bool value);

  // optional uint32 consecutive_count = 3;
  private:
  bool has_consecutive_count() const;
  public:
  void clear_consecutive_count();
  static const int kConsecutiveCountFieldNumber = 3;
  ::google::protobuf::uint32 consecutive_count() const;
  void set_consecutive_count(::google::protobuf::uint32 value);

  // optional .valhalla.Pronunciation pronunciation = 4;
  bool has_pronunciation() const;
  void clear_pronunciation();
  static const int kPronunciationFieldNumber = 4;
  const ::valhalla::Pronunciation& pronunciation() const;
  ::valhalla::Pronunciation* mutable_pronunciation();
  ::valhalla::Pronunciation* release_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation);

  HasTextCase has_text_case() const;
  HasIsRouteNumberCase has_is_route_number_case() const;
  HasConsecutiveCountCase has_consecutive_count_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TripSignElement)
 private:
  inline void set_has_text();
  inline void set_has_is_route_number();
  inline void set_has_consecutive_count();

  inline bool has_has_text() const;
  void clear_has_text();
  inline void clear_has_has_text();

  inline bool has_has_is_route_number() const;
  void clear_has_is_route_number();
  inline void clear_has_has_is_route_number();

  inline bool has_has_consecutive_count() const;
  void clear_has_consecutive_count();
  inline void clear_has_has_consecutive_count();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::Pronunciation* pronunciation_;
  union HasTextUnion {
    HasTextUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
  } has_text_;
  union HasIsRouteNumberUnion {
    HasIsRouteNumberUnion() {}
    bool is_route_number_;
  } has_is_route_number_;
  union HasConsecutiveCountUnion {
    HasConsecutiveCountUnion() {}
    ::google::protobuf::uint32 consecutive_count_;
  } has_consecutive_count_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[3];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sign_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sign_2eproto();
  #endif
  friend void protobuf_AssignDesc_sign_2eproto();
  friend void protobuf_ShutdownFile_sign_2eproto();

  void InitAsDefaultInstance();
  static TripSignElement* default_instance_;
};
// -------------------------------------------------------------------

class TripSign : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSign) */ {
 public:
  TripSign();
  virtual ~TripSign();

  TripSign(const TripSign& from);

  inline TripSign& operator=(const TripSign& from) {
    CopyFrom(from);
    return *this;
  }

  static const TripSign& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TripSign* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TripSign* other);

  // implements Message ----------------------------------------------

  inline TripSign* New() const { return New(NULL); }

  TripSign* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TripSign& from);
  void MergeFrom(const TripSign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  int exit_numbers_size() const;
  void clear_exit_numbers();
  static const int kExitNumbersFieldNumber = 1;
  const ::valhalla::TripSignElement& exit_numbers(int index) const;
  ::valhalla::TripSignElement* mutable_exit_numbers(int index);
  ::valhalla::TripSignElement* add_exit_numbers();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_numbers();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_numbers() const;

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  int exit_onto_streets_size() const;
  void clear_exit_onto_streets();
  static const int kExitOntoStreetsFieldNumber = 2;
  const ::valhalla::TripSignElement& exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* mutable_exit_onto_streets(int index);
  ::valhalla::TripSignElement* add_exit_onto_streets();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_onto_streets();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_onto_streets() const;

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  int exit_toward_locations_size() const;
  void clear_exit_toward_locations();
  static const int kExitTowardLocationsFieldNumber = 3;
  const ::valhalla::TripSignElement& exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* mutable_exit_toward_locations(int index);
  ::valhalla::TripSignElement* add_exit_toward_locations();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_toward_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_toward_locations() const;

  // repeated .valhalla.TripSignElement exit_names = 4;
  int exit_names_size() const;
  void clear_exit_names();
  static const int kExitNamesFieldNumber = 4;
  const ::valhalla::TripSignElement& exit_names(int index) const;
  ::valhalla::TripSignElement* mutable_exit_names(int index);
  ::valhalla::TripSignElement* add_exit_names();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_names();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_names() const;

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  int guide_onto_streets_size() const;
  void clear_guide_onto_streets();
  static const int kGuideOntoStreetsFieldNumber = 5;
  const ::valhalla::TripSignElement& guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* mutable_guide_onto_streets(int index);
  ::valhalla::TripSignElement* add_guide_onto_streets();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_onto_streets();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_onto_streets() const;

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  int guide_toward_locations_size() const;
  void clear_guide_toward_locations();
  static const int kGuideTowardLocationsFieldNumber = 6;
  const ::valhalla::TripSignElement& guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* mutable_guide_toward_locations(int index);
  ::valhalla::TripSignElement* add_guide_toward_locations();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_toward_locations();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_toward_locations() const;

  // repeated .valhalla.TripSignElement junction_names = 7;
  int junction_names_size() const;
  void clear_junction_names();
  static const int kJunctionNamesFieldNumber = 7;
  const ::valhalla::TripSignElement& junction_names(int index) const;
  ::valhalla::TripSignElement* mutable_junction_names(int index);
  ::valhalla::TripSignElement* add_junction_names();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_junction_names();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      junction_names() const;

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  int guidance_view_junctions_size() const;
  void clear_guidance_view_junctions();
  static const int kGuidanceViewJunctionsFieldNumber = 8;
  const ::valhalla::TripSignElement& guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* mutable_guidance_view_junctions(int index);
  ::valhalla::TripSignElement* add_guidance_view_junctions();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_junctions();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_junctions() const;

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  int guidance_view_signboards_size() const;
  void clear_guidance_view_signboards();
  static const int kGuidanceViewSignboardsFieldNumber = 9;
  const ::valhalla::TripSignElement& guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* mutable_guidance_view_signboards(int index);
  ::valhalla::TripSignElement* add_guidance_view_signboards();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_signboards();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_signboards() const;

  // @@protoc_insertion_point(class_scope:valhalla.TripSign)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_numbers_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_onto_streets_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_toward_locations_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > exit_names_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guide_onto_streets_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guide_toward_locations_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > junction_names_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_junctions_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_signboards_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sign_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sign_2eproto();
  #endif
  friend void protobuf_AssignDesc_sign_2eproto();
  friend void protobuf_ShutdownFile_sign_2eproto();

  void InitAsDefaultInstance();
  static TripSign* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TripSignElement

// optional string text = 1;
inline bool TripSignElement::has_text() const {
  return has_text_case() == kText;
}
inline void TripSignElement::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void TripSignElement::clear_text() {
  if (has_text()) {
    has_text_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_text();
  }
}
inline const ::std::string& TripSignElement::text() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.text)
  if (has_text()) {
    return has_text_.text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TripSignElement::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
}
inline void TripSignElement::set_text(const char* value) {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TripSignElement.text)
}
inline void TripSignElement::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_text_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TripSignElement.text)
}
inline ::std::string* TripSignElement::mutable_text() {
  if (!has_text()) {
    clear_has_text();
    set_has_text();
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.text)
  return has_text_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TripSignElement::release_text() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.text)
  if (has_text()) {
    clear_has_has_text();
    return has_text_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TripSignElement::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    has_text_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_text();
  if (text != NULL) {
    set_has_text();
    has_text_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.text)
}

// optional bool is_route_number = 2;
inline bool TripSignElement::has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
inline void TripSignElement::set_has_is_route_number() {
  _oneof_case_[1] = kIsRouteNumber;
}
inline void TripSignElement::clear_is_route_number() {
  if (has_is_route_number()) {
    has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
inline bool TripSignElement::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.is_route_number)
  if (has_is_route_number()) {
    return has_is_route_number_.is_route_number_;
  }
  return false;
}
inline void TripSignElement::set_is_route_number(bool value) {
  if (!has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  has_is_route_number_.is_route_number_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.is_route_number)
}

// optional uint32 consecutive_count = 3;
inline bool TripSignElement::has_consecutive_count() const {
  return has_consecutive_count_case() == kConsecutiveCount;
}
inline void TripSignElement::set_has_consecutive_count() {
  _oneof_case_[2] = kConsecutiveCount;
}
inline void TripSignElement::clear_consecutive_count() {
  if (has_consecutive_count()) {
    has_consecutive_count_.consecutive_count_ = 0u;
    clear_has_has_consecutive_count();
  }
}
inline ::google::protobuf::uint32 TripSignElement::consecutive_count() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.consecutive_count)
  if (has_consecutive_count()) {
    return has_consecutive_count_.consecutive_count_;
  }
  return 0u;
}
inline void TripSignElement::set_consecutive_count(::google::protobuf::uint32 value) {
  if (!has_consecutive_count()) {
    clear_has_consecutive_count();
    set_has_consecutive_count();
  }
  has_consecutive_count_.consecutive_count_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.consecutive_count)
}

// optional .valhalla.Pronunciation pronunciation = 4;
inline bool TripSignElement::has_pronunciation() const {
  return !_is_default_instance_ && pronunciation_ != NULL;
}
inline void TripSignElement::clear_pronunciation() {
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
}
inline const ::valhalla::Pronunciation& TripSignElement::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.pronunciation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance().pronunciation_;
#else
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance_->pronunciation_;
#endif
}
inline ::valhalla::Pronunciation* TripSignElement::mutable_pronunciation() {
  
  if (pronunciation_ == NULL) {
    pronunciation_ = new ::valhalla::Pronunciation;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.pronunciation)
  return pronunciation_;
}
inline ::valhalla::Pronunciation* TripSignElement::release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.pronunciation)
  
  ::valhalla::Pronunciation* temp = pronunciation_;
  pronunciation_ = NULL;
  return temp;
}
inline void TripSignElement::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  delete pronunciation_;
  pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.pronunciation)
}

inline bool TripSignElement::has_has_text() const {
  return has_text_case() != HAS_TEXT_NOT_SET;
}
inline void TripSignElement::clear_has_has_text() {
  _oneof_case_[0] = HAS_TEXT_NOT_SET;
}
inline bool TripSignElement::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline void TripSignElement::clear_has_has_is_route_number() {
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline bool TripSignElement::has_has_consecutive_count() const {
  return has_consecutive_count_case() != HAS_CONSECUTIVE_COUNT_NOT_SET;
}
inline void TripSignElement::clear_has_has_consecutive_count() {
  _oneof_case_[2] = HAS_CONSECUTIVE_COUNT_NOT_SET;
}
inline TripSignElement::HasTextCase TripSignElement::has_text_case() const {
  return TripSignElement::HasTextCase(_oneof_case_[0]);
}
inline TripSignElement::HasIsRouteNumberCase TripSignElement::has_is_route_number_case() const {
  return TripSignElement::HasIsRouteNumberCase(_oneof_case_[1]);
}
inline TripSignElement::HasConsecutiveCountCase TripSignElement::has_consecutive_count_case() const {
  return TripSignElement::HasConsecutiveCountCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// TripSign

// repeated .valhalla.TripSignElement exit_numbers = 1;
inline int TripSign::exit_numbers_size() const {
  return exit_numbers_.size();
}
inline void TripSign::clear_exit_numbers() {
  exit_numbers_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::exit_numbers(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_numbers() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_numbers)
  return exit_numbers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_numbers() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_numbers)
  return &exit_numbers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_numbers() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_numbers)
  return exit_numbers_;
}

// repeated .valhalla.TripSignElement exit_onto_streets = 2;
inline int TripSign::exit_onto_streets_size() const {
  return exit_onto_streets_.size();
}
inline void TripSign::clear_exit_onto_streets() {
  exit_onto_streets_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::exit_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_onto_streets)
  return &exit_onto_streets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_onto_streets)
  return exit_onto_streets_;
}

// repeated .valhalla.TripSignElement exit_toward_locations = 3;
inline int TripSign::exit_toward_locations_size() const {
  return exit_toward_locations_.size();
}
inline void TripSign::clear_exit_toward_locations() {
  exit_toward_locations_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::exit_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_toward_locations)
  return &exit_toward_locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_toward_locations)
  return exit_toward_locations_;
}

// repeated .valhalla.TripSignElement exit_names = 4;
inline int TripSign::exit_names_size() const {
  return exit_names_.size();
}
inline void TripSign::clear_exit_names() {
  exit_names_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::exit_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_names)
  return exit_names_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_names)
  return exit_names_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_exit_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_names)
  return exit_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_names)
  return &exit_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_names)
  return exit_names_;
}

// repeated .valhalla.TripSignElement guide_onto_streets = 5;
inline int TripSign::guide_onto_streets_size() const {
  return guide_onto_streets_.size();
}
inline void TripSign::clear_guide_onto_streets() {
  guide_onto_streets_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::guide_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guide_onto_streets() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_onto_streets)
  return &guide_onto_streets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_onto_streets)
  return guide_onto_streets_;
}

// repeated .valhalla.TripSignElement guide_toward_locations = 6;
inline int TripSign::guide_toward_locations_size() const {
  return guide_toward_locations_.size();
}
inline void TripSign::clear_guide_toward_locations() {
  guide_toward_locations_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::guide_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guide_toward_locations() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_toward_locations)
  return &guide_toward_locations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_toward_locations)
  return guide_toward_locations_;
}

// repeated .valhalla.TripSignElement junction_names = 7;
inline int TripSign::junction_names_size() const {
  return junction_names_.size();
}
inline void TripSign::clear_junction_names() {
  junction_names_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::junction_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.junction_names)
  return junction_names_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_junction_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.junction_names)
  return junction_names_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_junction_names() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.junction_names)
  return junction_names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_junction_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.junction_names)
  return &junction_names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::junction_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.junction_names)
  return junction_names_;
}

// repeated .valhalla.TripSignElement guidance_view_junctions = 8;
inline int TripSign::guidance_view_junctions_size() const {
  return guidance_view_junctions_.size();
}
inline void TripSign::clear_guidance_view_junctions() {
  guidance_view_junctions_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_junctions(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_junctions() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_junctions() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_junctions)
  return &guidance_view_junctions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_junctions() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_junctions)
  return guidance_view_junctions_;
}

// repeated .valhalla.TripSignElement guidance_view_signboards = 9;
inline int TripSign::guidance_view_signboards_size() const {
  return guidance_view_signboards_.size();
}
inline void TripSign::clear_guidance_view_signboards() {
  guidance_view_signboards_.Clear();
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_signboards(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Get(index);
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_signboards(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Mutable(index);
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_signboards() {
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_signboards() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_signboards)
  return &guidance_view_signboards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_signboards() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_signboards)
  return guidance_view_signboards_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sign_2eproto__INCLUDED

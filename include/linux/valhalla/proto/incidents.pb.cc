// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: incidents.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "incidents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_incidents_2eproto() {
  delete IncidentsTile::default_instance_;
  delete IncidentsTile_Location::default_instance_;
  delete IncidentsTile_Metadata::default_instance_;
  delete IncidentsTile_Metadata_Congestion::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_incidents_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_incidents_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_incidents_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  IncidentsTile::default_instance_ = new IncidentsTile();
  IncidentsTile_Location::default_instance_ = new IncidentsTile_Location();
  IncidentsTile_Metadata::default_instance_ = new IncidentsTile_Metadata();
  IncidentsTile_Metadata_Congestion::default_instance_ = new IncidentsTile_Metadata_Congestion();
  IncidentsTile::default_instance_->InitAsDefaultInstance();
  IncidentsTile_Location::default_instance_->InitAsDefaultInstance();
  IncidentsTile_Metadata::default_instance_->InitAsDefaultInstance();
  IncidentsTile_Metadata_Congestion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_incidents_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_incidents_2eproto_once_);
void protobuf_AddDesc_incidents_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_incidents_2eproto_once_,
                 &protobuf_AddDesc_incidents_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_incidents_2eproto {
  StaticDescriptorInitializer_incidents_2eproto() {
    protobuf_AddDesc_incidents_2eproto();
  }
} static_descriptor_initializer_incidents_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncidentsTile_Location::kEdgeIndexFieldNumber;
const int IncidentsTile_Location::kStartOffsetFieldNumber;
const int IncidentsTile_Location::kEndOffsetFieldNumber;
const int IncidentsTile_Location::kMetadataIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncidentsTile_Location::IncidentsTile_Location()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.IncidentsTile.Location)
}

void IncidentsTile_Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IncidentsTile_Location::IncidentsTile_Location(const IncidentsTile_Location& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Location)
}

void IncidentsTile_Location::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  edge_index_ = 0u;
  start_offset_ = 0;
  end_offset_ = 0;
  metadata_index_ = 0u;
}

IncidentsTile_Location::~IncidentsTile_Location() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Location)
  SharedDtor();
}

void IncidentsTile_Location::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IncidentsTile_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncidentsTile_Location& IncidentsTile_Location::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_incidents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_incidents_2eproto();
#endif
  return *default_instance_;
}

IncidentsTile_Location* IncidentsTile_Location::default_instance_ = NULL;

IncidentsTile_Location* IncidentsTile_Location::New(::google::protobuf::Arena* arena) const {
  IncidentsTile_Location* n = new IncidentsTile_Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncidentsTile_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Location)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IncidentsTile_Location, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IncidentsTile_Location*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(edge_index_, metadata_index_);

#undef ZR_HELPER_
#undef ZR_

}

bool IncidentsTile_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.IncidentsTile.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 edge_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edge_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_start_offset;
        break;
      }

      // optional float start_offset = 2;
      case 2: {
        if (tag == 21) {
         parse_start_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_end_offset;
        break;
      }

      // optional float end_offset = 3;
      case 3: {
        if (tag == 29) {
         parse_end_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_metadata_index;
        break;
      }

      // optional uint32 metadata_index = 4;
      case 4: {
        if (tag == 32) {
         parse_metadata_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metadata_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.IncidentsTile.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.IncidentsTile.Location)
  return false;
#undef DO_
}

void IncidentsTile_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.IncidentsTile.Location)
  // optional uint32 edge_index = 1;
  if (this->edge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->edge_index(), output);
  }

  // optional float start_offset = 2;
  if (this->start_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_offset(), output);
  }

  // optional float end_offset = 3;
  if (this->end_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_offset(), output);
  }

  // optional uint32 metadata_index = 4;
  if (this->metadata_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->metadata_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.IncidentsTile.Location)
}

int IncidentsTile_Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Location)
  int total_size = 0;

  // optional uint32 edge_index = 1;
  if (this->edge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edge_index());
  }

  // optional float start_offset = 2;
  if (this->start_offset() != 0) {
    total_size += 1 + 4;
  }

  // optional float end_offset = 3;
  if (this->end_offset() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 metadata_index = 4;
  if (this->metadata_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metadata_index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncidentsTile_Location::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncidentsTile_Location*>(&from));
}

void IncidentsTile_Location::MergeFrom(const IncidentsTile_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.edge_index() != 0) {
    set_edge_index(from.edge_index());
  }
  if (from.start_offset() != 0) {
    set_start_offset(from.start_offset());
  }
  if (from.end_offset() != 0) {
    set_end_offset(from.end_offset());
  }
  if (from.metadata_index() != 0) {
    set_metadata_index(from.metadata_index());
  }
}

void IncidentsTile_Location::CopyFrom(const IncidentsTile_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Location::IsInitialized() const {

  return true;
}

void IncidentsTile_Location::Swap(IncidentsTile_Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncidentsTile_Location::InternalSwap(IncidentsTile_Location* other) {
  std::swap(edge_index_, other->edge_index_);
  std::swap(start_offset_, other->start_offset_);
  std::swap(end_offset_, other->end_offset_);
  std::swap(metadata_index_, other->metadata_index_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncidentsTile_Location::GetTypeName() const {
  return "valhalla.IncidentsTile.Location";
}


// -------------------------------------------------------------------

bool IncidentsTile_Metadata_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::ACCIDENT;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONGESTION;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONSTRUCTION;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::DISABLED_VEHICLE;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::LANE_RESTRICTION;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::MASS_TRANSIT;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::MISCELLANEOUS;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::OTHER_NEWS;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::PLANNED_EVENT;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_CLOSURE;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_HAZARD;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::WEATHER;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MIN;
const IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MAX;
const int IncidentsTile_Metadata::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool IncidentsTile_Metadata_Impact_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::UNKNOWN;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::CRITICAL;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MAJOR;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MINOR;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::LOW;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MIN;
const IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MAX;
const int IncidentsTile_Metadata::Impact_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncidentsTile_Metadata_Congestion::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.IncidentsTile.Metadata.Congestion)
}

void IncidentsTile_Metadata_Congestion::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(const IncidentsTile_Metadata_Congestion& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Metadata.Congestion)
}

void IncidentsTile_Metadata_Congestion::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

IncidentsTile_Metadata_Congestion::~IncidentsTile_Metadata_Congestion() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata.Congestion)
  SharedDtor();
}

void IncidentsTile_Metadata_Congestion::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IncidentsTile_Metadata_Congestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncidentsTile_Metadata_Congestion& IncidentsTile_Metadata_Congestion::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_incidents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_incidents_2eproto();
#endif
  return *default_instance_;
}

IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata_Congestion::default_instance_ = NULL;

IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata_Congestion::New(::google::protobuf::Arena* arena) const {
  IncidentsTile_Metadata_Congestion* n = new IncidentsTile_Metadata_Congestion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncidentsTile_Metadata_Congestion::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata.Congestion)
  value_ = 0u;
}

bool IncidentsTile_Metadata_Congestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.IncidentsTile.Metadata.Congestion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.IncidentsTile.Metadata.Congestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.IncidentsTile.Metadata.Congestion)
  return false;
#undef DO_
}

void IncidentsTile_Metadata_Congestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.IncidentsTile.Metadata.Congestion)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.IncidentsTile.Metadata.Congestion)
}

int IncidentsTile_Metadata_Congestion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata.Congestion)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncidentsTile_Metadata_Congestion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncidentsTile_Metadata_Congestion*>(&from));
}

void IncidentsTile_Metadata_Congestion::MergeFrom(const IncidentsTile_Metadata_Congestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void IncidentsTile_Metadata_Congestion::CopyFrom(const IncidentsTile_Metadata_Congestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Metadata_Congestion::IsInitialized() const {

  return true;
}

void IncidentsTile_Metadata_Congestion::Swap(IncidentsTile_Metadata_Congestion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncidentsTile_Metadata_Congestion::InternalSwap(IncidentsTile_Metadata_Congestion* other) {
  std::swap(value_, other->value_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncidentsTile_Metadata_Congestion::GetTypeName() const {
  return "valhalla.IncidentsTile.Metadata.Congestion";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncidentsTile_Metadata::kTypeFieldNumber;
const int IncidentsTile_Metadata::kAlertcCodesFieldNumber;
const int IncidentsTile_Metadata::kDescriptionFieldNumber;
const int IncidentsTile_Metadata::kSubTypeFieldNumber;
const int IncidentsTile_Metadata::kSubTypeDescriptionFieldNumber;
const int IncidentsTile_Metadata::kStartTimeFieldNumber;
const int IncidentsTile_Metadata::kEndTimeFieldNumber;
const int IncidentsTile_Metadata::kImpactFieldNumber;
const int IncidentsTile_Metadata::kRoadClosedFieldNumber;
const int IncidentsTile_Metadata::kCongestionFieldNumber;
const int IncidentsTile_Metadata::kLanesBlockedFieldNumber;
const int IncidentsTile_Metadata::kCreationTimeFieldNumber;
const int IncidentsTile_Metadata::kLongDescriptionFieldNumber;
const int IncidentsTile_Metadata::kClearLanesFieldNumber;
const int IncidentsTile_Metadata::kNumLanesBlockedFieldNumber;
const int IncidentsTile_Metadata::kLengthFieldNumber;
const int IncidentsTile_Metadata::kIdFieldNumber;
const int IncidentsTile_Metadata::kIso31661Alpha2FieldNumber;
const int IncidentsTile_Metadata::kIso31661Alpha3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncidentsTile_Metadata::IncidentsTile_Metadata()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.IncidentsTile.Metadata)
}

void IncidentsTile_Metadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  congestion_ = const_cast< ::valhalla::IncidentsTile_Metadata_Congestion*>(
      ::valhalla::IncidentsTile_Metadata_Congestion::internal_default_instance());
#else
  congestion_ = const_cast< ::valhalla::IncidentsTile_Metadata_Congestion*>(&::valhalla::IncidentsTile_Metadata_Congestion::default_instance());
#endif
}

IncidentsTile_Metadata::IncidentsTile_Metadata(const IncidentsTile_Metadata& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Metadata)
}

void IncidentsTile_Metadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  impact_ = 0;
  road_closed_ = false;
  congestion_ = NULL;
  creation_time_ = GOOGLE_ULONGLONG(0);
  long_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_lanes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_lanes_blocked_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  iso_3166_1_alpha2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IncidentsTile_Metadata::~IncidentsTile_Metadata() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata)
  SharedDtor();
}

void IncidentsTile_Metadata::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_lanes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete congestion_;
  }
}

void IncidentsTile_Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncidentsTile_Metadata& IncidentsTile_Metadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_incidents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_incidents_2eproto();
#endif
  return *default_instance_;
}

IncidentsTile_Metadata* IncidentsTile_Metadata::default_instance_ = NULL;

IncidentsTile_Metadata* IncidentsTile_Metadata::New(::google::protobuf::Arena* arena) const {
  IncidentsTile_Metadata* n = new IncidentsTile_Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncidentsTile_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IncidentsTile_Metadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IncidentsTile_Metadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, impact_);
  ZR_(start_time_, end_time_);
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_type_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(creation_time_, length_);
  if (GetArenaNoVirtual() == NULL && congestion_ != NULL) delete congestion_;
  congestion_ = NULL;
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_lanes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_lanes_blocked_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  iso_3166_1_alpha2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  alertc_codes_.Clear();
  lanes_blocked_.Clear();
}

bool IncidentsTile_Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.IncidentsTile.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.IncidentsTile.Metadata.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::IncidentsTile_Metadata_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alertc_codes;
        break;
      }

      // repeated uint32 alertc_codes = 2;
      case 2: {
        if (tag == 18) {
         parse_alertc_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alertc_codes())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_alertc_codes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sub_type;
        break;
      }

      // optional string sub_type = 4;
      case 4: {
        if (tag == 34) {
         parse_sub_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_type().data(), this->sub_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.sub_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sub_type_description;
        break;
      }

      // optional string sub_type_description = 5;
      case 5: {
        if (tag == 42) {
         parse_sub_type_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_type_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_type_description().data(), this->sub_type_description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.sub_type_description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 6;
      case 6: {
        if (tag == 48) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 7;
      case 7: {
        if (tag == 56) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_impact;
        break;
      }

      // optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
      case 9: {
        if (tag == 72) {
         parse_impact:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_impact(static_cast< ::valhalla::IncidentsTile_Metadata_Impact >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_road_closed;
        break;
      }

      // optional bool road_closed = 10;
      case 10: {
        if (tag == 80) {
         parse_road_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &road_closed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_congestion;
        break;
      }

      // optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
      case 11: {
        if (tag == 90) {
         parse_congestion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_congestion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lanes_blocked;
        break;
      }

      // repeated string lanes_blocked = 12;
      case 12: {
        if (tag == 98) {
         parse_lanes_blocked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lanes_blocked()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lanes_blocked(this->lanes_blocked_size() - 1).data(),
            this->lanes_blocked(this->lanes_blocked_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.lanes_blocked"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lanes_blocked;
        if (input->ExpectTag(104)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 13;
      case 13: {
        if (tag == 104) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_long_description;
        break;
      }

      // optional string long_description = 14;
      case 14: {
        if (tag == 114) {
         parse_long_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_description().data(), this->long_description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.long_description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_clear_lanes;
        break;
      }

      // optional string clear_lanes = 15;
      case 15: {
        if (tag == 122) {
         parse_clear_lanes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clear_lanes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clear_lanes().data(), this->clear_lanes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.clear_lanes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_lanes_blocked;
        break;
      }

      // optional uint64 num_lanes_blocked = 16;
      case 16: {
        if (tag == 128) {
         parse_num_lanes_blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_lanes_blocked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_length;
        break;
      }

      // optional uint32 length = 17;
      case 17: {
        if (tag == 136) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1024)) goto parse_id;
        break;
      }

      // optional uint64 id = 128;
      case 128: {
        if (tag == 1024) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_iso_3166_1_alpha2;
        break;
      }

      // optional string iso_3166_1_alpha2 = 129;
      case 129: {
        if (tag == 1034) {
         parse_iso_3166_1_alpha2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso_3166_1_alpha2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iso_3166_1_alpha2().data(), this->iso_3166_1_alpha2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_iso_3166_1_alpha3;
        break;
      }

      // optional string iso_3166_1_alpha3 = 130;
      case 130: {
        if (tag == 1042) {
         parse_iso_3166_1_alpha3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iso_3166_1_alpha3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iso_3166_1_alpha3().data(), this->iso_3166_1_alpha3().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.IncidentsTile.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.IncidentsTile.Metadata)
  return false;
#undef DO_
}

void IncidentsTile_Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.IncidentsTile.Metadata)
  // optional .valhalla.IncidentsTile.Metadata.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 alertc_codes = 2;
  if (this->alertc_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_alertc_codes_cached_byte_size_);
  }
  for (int i = 0; i < this->alertc_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->alertc_codes(i), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string sub_type = 4;
  if (this->sub_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_type().data(), this->sub_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.sub_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sub_type(), output);
  }

  // optional string sub_type_description = 5;
  if (this->sub_type_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_type_description().data(), this->sub_type_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.sub_type_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sub_type_description(), output);
  }

  // optional uint64 start_time = 6;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_time(), output);
  }

  // optional uint64 end_time = 7;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_time(), output);
  }

  // optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  if (this->impact() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->impact(), output);
  }

  // optional bool road_closed = 10;
  if (this->road_closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->road_closed(), output);
  }

  // optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  if (this->has_congestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->congestion_, output);
  }

  // repeated string lanes_blocked = 12;
  for (int i = 0; i < this->lanes_blocked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lanes_blocked(i).data(), this->lanes_blocked(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.lanes_blocked");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lanes_blocked(i), output);
  }

  // optional uint64 creation_time = 13;
  if (this->creation_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->creation_time(), output);
  }

  // optional string long_description = 14;
  if (this->long_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_description().data(), this->long_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.long_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->long_description(), output);
  }

  // optional string clear_lanes = 15;
  if (this->clear_lanes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clear_lanes().data(), this->clear_lanes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.clear_lanes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->clear_lanes(), output);
  }

  // optional uint64 num_lanes_blocked = 16;
  if (this->num_lanes_blocked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->num_lanes_blocked(), output);
  }

  // optional uint32 length = 17;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->length(), output);
  }

  // optional uint64 id = 128;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(128, this->id(), output);
  }

  // optional string iso_3166_1_alpha2 = 129;
  if (this->iso_3166_1_alpha2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_3166_1_alpha2().data(), this->iso_3166_1_alpha2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      129, this->iso_3166_1_alpha2(), output);
  }

  // optional string iso_3166_1_alpha3 = 130;
  if (this->iso_3166_1_alpha3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iso_3166_1_alpha3().data(), this->iso_3166_1_alpha3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      130, this->iso_3166_1_alpha3(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.IncidentsTile.Metadata)
}

int IncidentsTile_Metadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata)
  int total_size = 0;

  // optional .valhalla.IncidentsTile.Metadata.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string sub_type = 4;
  if (this->sub_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_type());
  }

  // optional string sub_type_description = 5;
  if (this->sub_type_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_type_description());
  }

  // optional uint64 start_time = 6;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());
  }

  // optional uint64 end_time = 7;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_time());
  }

  // optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  if (this->impact() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->impact());
  }

  // optional bool road_closed = 10;
  if (this->road_closed() != 0) {
    total_size += 1 + 1;
  }

  // optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  if (this->has_congestion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->congestion_);
  }

  // optional uint64 creation_time = 13;
  if (this->creation_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->creation_time());
  }

  // optional string long_description = 14;
  if (this->long_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_description());
  }

  // optional string clear_lanes = 15;
  if (this->clear_lanes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clear_lanes());
  }

  // optional uint64 num_lanes_blocked = 16;
  if (this->num_lanes_blocked() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_lanes_blocked());
  }

  // optional uint32 length = 17;
  if (this->length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  // optional uint64 id = 128;
  if (this->id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional string iso_3166_1_alpha2 = 129;
  if (this->iso_3166_1_alpha2().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iso_3166_1_alpha2());
  }

  // optional string iso_3166_1_alpha3 = 130;
  if (this->iso_3166_1_alpha3().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iso_3166_1_alpha3());
  }

  // repeated uint32 alertc_codes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->alertc_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alertc_codes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _alertc_codes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string lanes_blocked = 12;
  total_size += 1 * this->lanes_blocked_size();
  for (int i = 0; i < this->lanes_blocked_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lanes_blocked(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncidentsTile_Metadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncidentsTile_Metadata*>(&from));
}

void IncidentsTile_Metadata::MergeFrom(const IncidentsTile_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  alertc_codes_.MergeFrom(from.alertc_codes_);
  lanes_blocked_.MergeFrom(from.lanes_blocked_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.sub_type().size() > 0) {

    sub_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_type_);
  }
  if (from.sub_type_description().size() > 0) {

    sub_type_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_type_description_);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.impact() != 0) {
    set_impact(from.impact());
  }
  if (from.road_closed() != 0) {
    set_road_closed(from.road_closed());
  }
  if (from.has_congestion()) {
    mutable_congestion()->::valhalla::IncidentsTile_Metadata_Congestion::MergeFrom(from.congestion());
  }
  if (from.creation_time() != 0) {
    set_creation_time(from.creation_time());
  }
  if (from.long_description().size() > 0) {

    long_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_description_);
  }
  if (from.clear_lanes().size() > 0) {

    clear_lanes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clear_lanes_);
  }
  if (from.num_lanes_blocked() != 0) {
    set_num_lanes_blocked(from.num_lanes_blocked());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.iso_3166_1_alpha2().size() > 0) {

    iso_3166_1_alpha2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_3166_1_alpha2_);
  }
  if (from.iso_3166_1_alpha3().size() > 0) {

    iso_3166_1_alpha3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iso_3166_1_alpha3_);
  }
}

void IncidentsTile_Metadata::CopyFrom(const IncidentsTile_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Metadata::IsInitialized() const {

  return true;
}

void IncidentsTile_Metadata::Swap(IncidentsTile_Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncidentsTile_Metadata::InternalSwap(IncidentsTile_Metadata* other) {
  std::swap(type_, other->type_);
  alertc_codes_.UnsafeArenaSwap(&other->alertc_codes_);
  description_.Swap(&other->description_);
  sub_type_.Swap(&other->sub_type_);
  sub_type_description_.Swap(&other->sub_type_description_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(impact_, other->impact_);
  std::swap(road_closed_, other->road_closed_);
  std::swap(congestion_, other->congestion_);
  lanes_blocked_.UnsafeArenaSwap(&other->lanes_blocked_);
  std::swap(creation_time_, other->creation_time_);
  long_description_.Swap(&other->long_description_);
  clear_lanes_.Swap(&other->clear_lanes_);
  std::swap(num_lanes_blocked_, other->num_lanes_blocked_);
  std::swap(length_, other->length_);
  std::swap(id_, other->id_);
  iso_3166_1_alpha2_.Swap(&other->iso_3166_1_alpha2_);
  iso_3166_1_alpha3_.Swap(&other->iso_3166_1_alpha3_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncidentsTile_Metadata::GetTypeName() const {
  return "valhalla.IncidentsTile.Metadata";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IncidentsTile::kLocationsFieldNumber;
const int IncidentsTile::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IncidentsTile::IncidentsTile()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.IncidentsTile)
}

void IncidentsTile::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IncidentsTile::IncidentsTile(const IncidentsTile& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile)
}

void IncidentsTile::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

IncidentsTile::~IncidentsTile() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile)
  SharedDtor();
}

void IncidentsTile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IncidentsTile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IncidentsTile& IncidentsTile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_incidents_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_incidents_2eproto();
#endif
  return *default_instance_;
}

IncidentsTile* IncidentsTile::default_instance_ = NULL;

IncidentsTile* IncidentsTile::New(::google::protobuf::Arena* arena) const {
  IncidentsTile* n = new IncidentsTile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IncidentsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile)
  locations_.Clear();
  metadata_.Clear();
}

bool IncidentsTile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.IncidentsTile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.IncidentsTile.Location locations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_locations;
        if (input->ExpectTag(18)) goto parse_loop_metadata;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_metadata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.IncidentsTile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.IncidentsTile)
  return false;
#undef DO_
}

void IncidentsTile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.IncidentsTile)
  // repeated .valhalla.IncidentsTile.Location locations = 1;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->locations(i), output);
  }

  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->metadata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.IncidentsTile)
}

int IncidentsTile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile)
  int total_size = 0;

  // repeated .valhalla.IncidentsTile.Location locations = 1;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncidentsTile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IncidentsTile*>(&from));
}

void IncidentsTile::MergeFrom(const IncidentsTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  locations_.MergeFrom(from.locations_);
  metadata_.MergeFrom(from.metadata_);
}

void IncidentsTile::CopyFrom(const IncidentsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile::IsInitialized() const {

  return true;
}

void IncidentsTile::Swap(IncidentsTile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IncidentsTile::InternalSwap(IncidentsTile* other) {
  locations_.UnsafeArenaSwap(&other->locations_);
  metadata_.UnsafeArenaSwap(&other->metadata_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IncidentsTile::GetTypeName() const {
  return "valhalla.IncidentsTile";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IncidentsTile_Location

// optional uint32 edge_index = 1;
void IncidentsTile_Location::clear_edge_index() {
  edge_index_ = 0u;
}
 ::google::protobuf::uint32 IncidentsTile_Location::edge_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.edge_index)
  return edge_index_;
}
 void IncidentsTile_Location::set_edge_index(::google::protobuf::uint32 value) {
  
  edge_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.edge_index)
}

// optional float start_offset = 2;
void IncidentsTile_Location::clear_start_offset() {
  start_offset_ = 0;
}
 float IncidentsTile_Location::start_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.start_offset)
  return start_offset_;
}
 void IncidentsTile_Location::set_start_offset(float value) {
  
  start_offset_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.start_offset)
}

// optional float end_offset = 3;
void IncidentsTile_Location::clear_end_offset() {
  end_offset_ = 0;
}
 float IncidentsTile_Location::end_offset() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.end_offset)
  return end_offset_;
}
 void IncidentsTile_Location::set_end_offset(float value) {
  
  end_offset_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.end_offset)
}

// optional uint32 metadata_index = 4;
void IncidentsTile_Location::clear_metadata_index() {
  metadata_index_ = 0u;
}
 ::google::protobuf::uint32 IncidentsTile_Location::metadata_index() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Location.metadata_index)
  return metadata_index_;
}
 void IncidentsTile_Location::set_metadata_index(::google::protobuf::uint32 value) {
  
  metadata_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Location.metadata_index)
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata_Congestion

// optional uint32 value = 1;
void IncidentsTile_Metadata_Congestion::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 IncidentsTile_Metadata_Congestion::value() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.Congestion.value)
  return value_;
}
 void IncidentsTile_Metadata_Congestion::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.Congestion.value)
}

// -------------------------------------------------------------------

// IncidentsTile_Metadata

// optional .valhalla.IncidentsTile.Metadata.Type type = 1;
void IncidentsTile_Metadata::clear_type() {
  type_ = 0;
}
 ::valhalla::IncidentsTile_Metadata_Type IncidentsTile_Metadata::type() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.type)
  return static_cast< ::valhalla::IncidentsTile_Metadata_Type >(type_);
}
 void IncidentsTile_Metadata::set_type(::valhalla::IncidentsTile_Metadata_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.type)
}

// repeated uint32 alertc_codes = 2;
int IncidentsTile_Metadata::alertc_codes_size() const {
  return alertc_codes_.size();
}
void IncidentsTile_Metadata::clear_alertc_codes() {
  alertc_codes_.Clear();
}
 ::google::protobuf::uint32 IncidentsTile_Metadata::alertc_codes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.alertc_codes)
  return alertc_codes_.Get(index);
}
 void IncidentsTile_Metadata::set_alertc_codes(int index, ::google::protobuf::uint32 value) {
  alertc_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.alertc_codes)
}
 void IncidentsTile_Metadata::add_alertc_codes(::google::protobuf::uint32 value) {
  alertc_codes_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.alertc_codes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IncidentsTile_Metadata::alertc_codes() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  return alertc_codes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IncidentsTile_Metadata::mutable_alertc_codes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.alertc_codes)
  return &alertc_codes_;
}

// optional string description = 3;
void IncidentsTile_Metadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.description)
}
 void IncidentsTile_Metadata::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.description)
}
 void IncidentsTile_Metadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.description)
}
 ::std::string* IncidentsTile_Metadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.description)
}

// optional string sub_type = 4;
void IncidentsTile_Metadata::clear_sub_type() {
  sub_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::sub_type() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type)
  return sub_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_sub_type(const ::std::string& value) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type)
}
 void IncidentsTile_Metadata::set_sub_type(const char* value) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.sub_type)
}
 void IncidentsTile_Metadata::set_sub_type(const char* value, size_t size) {
  
  sub_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.sub_type)
}
 ::std::string* IncidentsTile_Metadata::mutable_sub_type() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type)
  return sub_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_sub_type() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type)
  
  return sub_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_sub_type(::std::string* sub_type) {
  if (sub_type != NULL) {
    
  } else {
    
  }
  sub_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_type);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type)
}

// optional string sub_type_description = 5;
void IncidentsTile_Metadata::clear_sub_type_description() {
  sub_type_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::sub_type_description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.sub_type_description)
  return sub_type_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_sub_type_description(const ::std::string& value) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.sub_type_description)
}
 void IncidentsTile_Metadata::set_sub_type_description(const char* value) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.sub_type_description)
}
 void IncidentsTile_Metadata::set_sub_type_description(const char* value, size_t size) {
  
  sub_type_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.sub_type_description)
}
 ::std::string* IncidentsTile_Metadata::mutable_sub_type_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.sub_type_description)
  return sub_type_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_sub_type_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.sub_type_description)
  
  return sub_type_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_sub_type_description(::std::string* sub_type_description) {
  if (sub_type_description != NULL) {
    
  } else {
    
  }
  sub_type_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_type_description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.sub_type_description)
}

// optional uint64 start_time = 6;
void IncidentsTile_Metadata::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 IncidentsTile_Metadata::start_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.start_time)
  return start_time_;
}
 void IncidentsTile_Metadata::set_start_time(::google::protobuf::uint64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.start_time)
}

// optional uint64 end_time = 7;
void IncidentsTile_Metadata::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 IncidentsTile_Metadata::end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.end_time)
  return end_time_;
}
 void IncidentsTile_Metadata::set_end_time(::google::protobuf::uint64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.end_time)
}

// optional .valhalla.IncidentsTile.Metadata.Impact impact = 9;
void IncidentsTile_Metadata::clear_impact() {
  impact_ = 0;
}
 ::valhalla::IncidentsTile_Metadata_Impact IncidentsTile_Metadata::impact() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.impact)
  return static_cast< ::valhalla::IncidentsTile_Metadata_Impact >(impact_);
}
 void IncidentsTile_Metadata::set_impact(::valhalla::IncidentsTile_Metadata_Impact value) {
  
  impact_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.impact)
}

// optional bool road_closed = 10;
void IncidentsTile_Metadata::clear_road_closed() {
  road_closed_ = false;
}
 bool IncidentsTile_Metadata::road_closed() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.road_closed)
  return road_closed_;
}
 void IncidentsTile_Metadata::set_road_closed(bool value) {
  
  road_closed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.road_closed)
}

// optional .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
bool IncidentsTile_Metadata::has_congestion() const {
  return !_is_default_instance_ && congestion_ != NULL;
}
void IncidentsTile_Metadata::clear_congestion() {
  if (GetArenaNoVirtual() == NULL && congestion_ != NULL) delete congestion_;
  congestion_ = NULL;
}
const ::valhalla::IncidentsTile_Metadata_Congestion& IncidentsTile_Metadata::congestion() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.congestion)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return congestion_ != NULL ? *congestion_ : *default_instance().congestion_;
#else
  return congestion_ != NULL ? *congestion_ : *default_instance_->congestion_;
#endif
}
::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::mutable_congestion() {
  
  if (congestion_ == NULL) {
    congestion_ = new ::valhalla::IncidentsTile_Metadata_Congestion;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.congestion)
  return congestion_;
}
::valhalla::IncidentsTile_Metadata_Congestion* IncidentsTile_Metadata::release_congestion() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.congestion)
  
  ::valhalla::IncidentsTile_Metadata_Congestion* temp = congestion_;
  congestion_ = NULL;
  return temp;
}
void IncidentsTile_Metadata::set_allocated_congestion(::valhalla::IncidentsTile_Metadata_Congestion* congestion) {
  delete congestion_;
  congestion_ = congestion;
  if (congestion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.congestion)
}

// repeated string lanes_blocked = 12;
int IncidentsTile_Metadata::lanes_blocked_size() const {
  return lanes_blocked_.size();
}
void IncidentsTile_Metadata::clear_lanes_blocked() {
  lanes_blocked_.Clear();
}
 const ::std::string& IncidentsTile_Metadata::lanes_blocked(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Get(index);
}
 ::std::string* IncidentsTile_Metadata::mutable_lanes_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Mutable(index);
}
 void IncidentsTile_Metadata::set_lanes_blocked(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.lanes_blocked)
  lanes_blocked_.Mutable(index)->assign(value);
}
 void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value) {
  lanes_blocked_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
 void IncidentsTile_Metadata::set_lanes_blocked(int index, const char* value, size_t size) {
  lanes_blocked_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
 ::std::string* IncidentsTile_Metadata::add_lanes_blocked() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_.Add();
}
 void IncidentsTile_Metadata::add_lanes_blocked(const ::std::string& value) {
  lanes_blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
 void IncidentsTile_Metadata::add_lanes_blocked(const char* value) {
  lanes_blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
 void IncidentsTile_Metadata::add_lanes_blocked(const char* value, size_t size) {
  lanes_blocked_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.IncidentsTile.Metadata.lanes_blocked)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
IncidentsTile_Metadata::lanes_blocked() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return lanes_blocked_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
IncidentsTile_Metadata::mutable_lanes_blocked() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.Metadata.lanes_blocked)
  return &lanes_blocked_;
}

// optional uint64 creation_time = 13;
void IncidentsTile_Metadata::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 IncidentsTile_Metadata::creation_time() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.creation_time)
  return creation_time_;
}
 void IncidentsTile_Metadata::set_creation_time(::google::protobuf::uint64 value) {
  
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.creation_time)
}

// optional string long_description = 14;
void IncidentsTile_Metadata::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::long_description() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.long_description)
  return long_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.long_description)
}
 void IncidentsTile_Metadata::set_long_description(const char* value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.long_description)
}
 void IncidentsTile_Metadata::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.long_description)
}
 ::std::string* IncidentsTile_Metadata::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_long_description() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_long_description(::std::string* long_description) {
  if (long_description != NULL) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.long_description)
}

// optional string clear_lanes = 15;
void IncidentsTile_Metadata::clear_clear_lanes() {
  clear_lanes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::clear_lanes() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.clear_lanes)
  return clear_lanes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_clear_lanes(const ::std::string& value) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.clear_lanes)
}
 void IncidentsTile_Metadata::set_clear_lanes(const char* value) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.clear_lanes)
}
 void IncidentsTile_Metadata::set_clear_lanes(const char* value, size_t size) {
  
  clear_lanes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.clear_lanes)
}
 ::std::string* IncidentsTile_Metadata::mutable_clear_lanes() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.clear_lanes)
  return clear_lanes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_clear_lanes() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.clear_lanes)
  
  return clear_lanes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_clear_lanes(::std::string* clear_lanes) {
  if (clear_lanes != NULL) {
    
  } else {
    
  }
  clear_lanes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clear_lanes);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.clear_lanes)
}

// optional uint64 num_lanes_blocked = 16;
void IncidentsTile_Metadata::clear_num_lanes_blocked() {
  num_lanes_blocked_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 IncidentsTile_Metadata::num_lanes_blocked() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
  return num_lanes_blocked_;
}
 void IncidentsTile_Metadata::set_num_lanes_blocked(::google::protobuf::uint64 value) {
  
  num_lanes_blocked_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.num_lanes_blocked)
}

// optional uint32 length = 17;
void IncidentsTile_Metadata::clear_length() {
  length_ = 0u;
}
 ::google::protobuf::uint32 IncidentsTile_Metadata::length() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.length)
  return length_;
}
 void IncidentsTile_Metadata::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.length)
}

// optional uint64 id = 128;
void IncidentsTile_Metadata::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 IncidentsTile_Metadata::id() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.id)
  return id_;
}
 void IncidentsTile_Metadata::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.id)
}

// optional string iso_3166_1_alpha2 = 129;
void IncidentsTile_Metadata::clear_iso_3166_1_alpha2() {
  iso_3166_1_alpha2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::iso_3166_1_alpha2() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return iso_3166_1_alpha2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const ::std::string& value) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const char* value) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha2(const char* value, size_t size) {
  
  iso_3166_1_alpha2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}
 ::std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha2() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  return iso_3166_1_alpha2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha2() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
  
  return iso_3166_1_alpha2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha2(::std::string* iso_3166_1_alpha2) {
  if (iso_3166_1_alpha2 != NULL) {
    
  } else {
    
  }
  iso_3166_1_alpha2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_3166_1_alpha2);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2)
}

// optional string iso_3166_1_alpha3 = 130;
void IncidentsTile_Metadata::clear_iso_3166_1_alpha3() {
  iso_3166_1_alpha3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IncidentsTile_Metadata::iso_3166_1_alpha3() const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return iso_3166_1_alpha3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const ::std::string& value) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const char* value) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
 void IncidentsTile_Metadata::set_iso_3166_1_alpha3(const char* value, size_t size) {
  
  iso_3166_1_alpha3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}
 ::std::string* IncidentsTile_Metadata::mutable_iso_3166_1_alpha3() {
  
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  return iso_3166_1_alpha3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IncidentsTile_Metadata::release_iso_3166_1_alpha3() {
  // @@protoc_insertion_point(field_release:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
  
  return iso_3166_1_alpha3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IncidentsTile_Metadata::set_allocated_iso_3166_1_alpha3(::std::string* iso_3166_1_alpha3) {
  if (iso_3166_1_alpha3 != NULL) {
    
  } else {
    
  }
  iso_3166_1_alpha3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iso_3166_1_alpha3);
  // @@protoc_insertion_point(field_set_allocated:valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3)
}

// -------------------------------------------------------------------

// IncidentsTile

// repeated .valhalla.IncidentsTile.Location locations = 1;
int IncidentsTile::locations_size() const {
  return locations_.size();
}
void IncidentsTile::clear_locations() {
  locations_.Clear();
}
const ::valhalla::IncidentsTile_Location& IncidentsTile::locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.locations)
  return locations_.Get(index);
}
::valhalla::IncidentsTile_Location* IncidentsTile::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.locations)
  return locations_.Mutable(index);
}
::valhalla::IncidentsTile_Location* IncidentsTile::add_locations() {
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.locations)
  return locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >*
IncidentsTile::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.locations)
  return &locations_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Location >&
IncidentsTile::locations() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.locations)
  return locations_;
}

// repeated .valhalla.IncidentsTile.Metadata metadata = 2;
int IncidentsTile::metadata_size() const {
  return metadata_.size();
}
void IncidentsTile::clear_metadata() {
  metadata_.Clear();
}
const ::valhalla::IncidentsTile_Metadata& IncidentsTile::metadata(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.IncidentsTile.metadata)
  return metadata_.Get(index);
}
::valhalla::IncidentsTile_Metadata* IncidentsTile::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.IncidentsTile.metadata)
  return metadata_.Mutable(index);
}
::valhalla::IncidentsTile_Metadata* IncidentsTile::add_metadata() {
  // @@protoc_insertion_point(field_add:valhalla.IncidentsTile.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >*
IncidentsTile::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.IncidentsTile.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::IncidentsTile_Metadata >&
IncidentsTile::metadata() const {
  // @@protoc_insertion_point(field_list:valhalla.IncidentsTile.metadata)
  return metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

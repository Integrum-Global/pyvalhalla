// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripcommon.proto

#ifndef PROTOBUF_tripcommon_2eproto__INCLUDED
#define PROTOBUF_tripcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tripcommon_2eproto();
void protobuf_AssignDesc_tripcommon_2eproto();
void protobuf_ShutdownFile_tripcommon_2eproto();

class BikeShareStationInfo;
class BoundingBox;
class LatLng;
class Location;
class Location_PathEdge;
class Location_SearchFilter;
class Pronunciation;
class StreetName;
class TaggedValue;
class TransitEgressInfo;
class TransitPlatformInfo;
class TransitRouteInfo;
class TransitStationInfo;
class TurnLane;

enum Location_Type {
  Location_Type_kBreak = 0,
  Location_Type_kThrough = 1,
  Location_Type_kVia = 2,
  Location_Type_kBreakThrough = 3,
  Location_Type_Location_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Location_Type_Location_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Location_Type_IsValid(int value);
const Location_Type Location_Type_Type_MIN = Location_Type_kBreak;
const Location_Type Location_Type_Type_MAX = Location_Type_kBreakThrough;
const int Location_Type_Type_ARRAYSIZE = Location_Type_Type_MAX + 1;

enum Location_SideOfStreet {
  Location_SideOfStreet_kNone = 0,
  Location_SideOfStreet_kLeft = 1,
  Location_SideOfStreet_kRight = 2,
  Location_SideOfStreet_Location_SideOfStreet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Location_SideOfStreet_Location_SideOfStreet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Location_SideOfStreet_IsValid(int value);
const Location_SideOfStreet Location_SideOfStreet_SideOfStreet_MIN = Location_SideOfStreet_kNone;
const Location_SideOfStreet Location_SideOfStreet_SideOfStreet_MAX = Location_SideOfStreet_kRight;
const int Location_SideOfStreet_SideOfStreet_ARRAYSIZE = Location_SideOfStreet_SideOfStreet_MAX + 1;

enum Location_PreferredSide {
  Location_PreferredSide_either = 0,
  Location_PreferredSide_same = 1,
  Location_PreferredSide_opposite = 2,
  Location_PreferredSide_Location_PreferredSide_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Location_PreferredSide_Location_PreferredSide_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Location_PreferredSide_IsValid(int value);
const Location_PreferredSide Location_PreferredSide_PreferredSide_MIN = Location_PreferredSide_either;
const Location_PreferredSide Location_PreferredSide_PreferredSide_MAX = Location_PreferredSide_opposite;
const int Location_PreferredSide_PreferredSide_ARRAYSIZE = Location_PreferredSide_PreferredSide_MAX + 1;

enum TransitPlatformInfo_Type {
  TransitPlatformInfo_Type_kStop = 0,
  TransitPlatformInfo_Type_kStation = 1,
  TransitPlatformInfo_Type_TransitPlatformInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransitPlatformInfo_Type_TransitPlatformInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransitPlatformInfo_Type_IsValid(int value);
const TransitPlatformInfo_Type TransitPlatformInfo_Type_Type_MIN = TransitPlatformInfo_Type_kStop;
const TransitPlatformInfo_Type TransitPlatformInfo_Type_Type_MAX = TransitPlatformInfo_Type_kStation;
const int TransitPlatformInfo_Type_Type_ARRAYSIZE = TransitPlatformInfo_Type_Type_MAX + 1;

enum Pronunciation_Alphabet {
  Pronunciation_Alphabet_kIpa = 0,
  Pronunciation_Alphabet_kXKatakana = 1,
  Pronunciation_Alphabet_kXJeita = 2,
  Pronunciation_Alphabet_kNtSampa = 3,
  Pronunciation_Alphabet_Pronunciation_Alphabet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Pronunciation_Alphabet_Pronunciation_Alphabet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Pronunciation_Alphabet_IsValid(int value);
const Pronunciation_Alphabet Pronunciation_Alphabet_Alphabet_MIN = Pronunciation_Alphabet_kIpa;
const Pronunciation_Alphabet Pronunciation_Alphabet_Alphabet_MAX = Pronunciation_Alphabet_kNtSampa;
const int Pronunciation_Alphabet_Alphabet_ARRAYSIZE = Pronunciation_Alphabet_Alphabet_MAX + 1;

enum TurnLane_State {
  TurnLane_State_kInvalid = 0,
  TurnLane_State_kValid = 1,
  TurnLane_State_kActive = 2,
  TurnLane_State_TurnLane_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TurnLane_State_TurnLane_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TurnLane_State_IsValid(int value);
const TurnLane_State TurnLane_State_State_MIN = TurnLane_State_kInvalid;
const TurnLane_State TurnLane_State_State_MAX = TurnLane_State_kActive;
const int TurnLane_State_State_ARRAYSIZE = TurnLane_State_State_MAX + 1;

enum TaggedValue_Type {
  TaggedValue_Type_kNone = 0,
  TaggedValue_Type_kLayer = 1,
  TaggedValue_Type_kPronunciation = 2,
  TaggedValue_Type_kBssInfo = 3,
  TaggedValue_Type_kTunnel = 49,
  TaggedValue_Type_kBridge = 50,
  TaggedValue_Type_TaggedValue_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaggedValue_Type_TaggedValue_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaggedValue_Type_IsValid(int value);
const TaggedValue_Type TaggedValue_Type_Type_MIN = TaggedValue_Type_kNone;
const TaggedValue_Type TaggedValue_Type_Type_MAX = TaggedValue_Type_kBridge;
const int TaggedValue_Type_Type_ARRAYSIZE = TaggedValue_Type_Type_MAX + 1;

enum RoadClass {
  kMotorway = 0,
  kTrunk = 1,
  kPrimary = 2,
  kSecondary = 3,
  kTertiary = 4,
  kUnclassified = 5,
  kResidential = 6,
  kServiceOther = 7,
  RoadClass_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoadClass_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoadClass_IsValid(int value);
const RoadClass RoadClass_MIN = kMotorway;
const RoadClass RoadClass_MAX = kServiceOther;
const int RoadClass_ARRAYSIZE = RoadClass_MAX + 1;

enum TravelMode {
  kDrive = 0,
  kPedestrian = 1,
  kBicycle = 2,
  kTransit = 3,
  TravelMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TravelMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TravelMode_IsValid(int value);
const TravelMode TravelMode_MIN = kDrive;
const TravelMode TravelMode_MAX = kTransit;
const int TravelMode_ARRAYSIZE = TravelMode_MAX + 1;

enum VehicleType {
  kCar = 0,
  kMotorcycle = 1,
  kAutoBus = 2,
  kTractorTrailer = 3,
  kMotorScooter = 4,
  VehicleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleType_IsValid(int value);
const VehicleType VehicleType_MIN = kCar;
const VehicleType VehicleType_MAX = kMotorScooter;
const int VehicleType_ARRAYSIZE = VehicleType_MAX + 1;

enum PedestrianType {
  kFoot = 0,
  kWheelchair = 1,
  kSegway = 2,
  PedestrianType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PedestrianType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PedestrianType_IsValid(int value);
const PedestrianType PedestrianType_MIN = kFoot;
const PedestrianType PedestrianType_MAX = kSegway;
const int PedestrianType_ARRAYSIZE = PedestrianType_MAX + 1;

enum BicycleType {
  kRoad = 0,
  kCross = 1,
  kHybrid = 2,
  kMountain = 3,
  BicycleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BicycleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BicycleType_IsValid(int value);
const BicycleType BicycleType_MIN = kRoad;
const BicycleType BicycleType_MAX = kMountain;
const int BicycleType_ARRAYSIZE = BicycleType_MAX + 1;

enum TransitType {
  kTram = 0,
  kMetro = 1,
  kRail = 2,
  kBus = 3,
  kFerry = 4,
  kCableCar = 5,
  kGondola = 6,
  kFunicular = 7,
  TransitType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransitType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransitType_IsValid(int value);
const TransitType TransitType_MIN = kTram;
const TransitType TransitType_MAX = kFunicular;
const int TransitType_ARRAYSIZE = TransitType_MAX + 1;

// ===================================================================

class LatLng : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.LatLng) */ {
 public:
  LatLng();
  virtual ~LatLng();

  LatLng(const LatLng& from);

  inline LatLng& operator=(const LatLng& from) {
    CopyFrom(from);
    return *this;
  }

  static const LatLng& default_instance();

  enum HasLatCase {
    kLat = 1,
    HAS_LAT_NOT_SET = 0,
  };

  enum HasLngCase {
    kLng = 2,
    HAS_LNG_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LatLng* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LatLng* other);

  // implements Message ----------------------------------------------

  inline LatLng* New() const { return New(NULL); }

  LatLng* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LatLng& from);
  void MergeFrom(const LatLng& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LatLng* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lat = 1;
  private:
  bool has_lat() const;
  public:
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // optional double lng = 2;
  private:
  bool has_lng() const;
  public:
  void clear_lng();
  static const int kLngFieldNumber = 2;
  double lng() const;
  void set_lng(double value);

  HasLatCase has_lat_case() const;
  HasLngCase has_lng_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.LatLng)
 private:
  inline void set_has_lat();
  inline void set_has_lng();

  inline bool has_has_lat() const;
  void clear_has_lat();
  inline void clear_has_has_lat();

  inline bool has_has_lng() const;
  void clear_has_lng();
  inline void clear_has_has_lng();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasLatUnion {
    HasLatUnion() {}
    double lat_;
  } has_lat_;
  union HasLngUnion {
    HasLngUnion() {}
    double lng_;
  } has_lng_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static LatLng* default_instance_;
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }

  static const BoundingBox& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BoundingBox* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BoundingBox* other);

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const { return New(NULL); }

  BoundingBox* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .valhalla.LatLng min_ll = 1;
  bool has_min_ll() const;
  void clear_min_ll();
  static const int kMinLlFieldNumber = 1;
  const ::valhalla::LatLng& min_ll() const;
  ::valhalla::LatLng* mutable_min_ll();
  ::valhalla::LatLng* release_min_ll();
  void set_allocated_min_ll(::valhalla::LatLng* min_ll);

  // optional .valhalla.LatLng max_ll = 2;
  bool has_max_ll() const;
  void clear_max_ll();
  static const int kMaxLlFieldNumber = 2;
  const ::valhalla::LatLng& max_ll() const;
  ::valhalla::LatLng* mutable_max_ll();
  ::valhalla::LatLng* release_max_ll();
  void set_allocated_max_ll(::valhalla::LatLng* max_ll);

  // @@protoc_insertion_point(class_scope:valhalla.BoundingBox)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* min_ll_;
  ::valhalla::LatLng* max_ll_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static BoundingBox* default_instance_;
};
// -------------------------------------------------------------------

class Location_PathEdge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location.PathEdge) */ {
 public:
  Location_PathEdge();
  virtual ~Location_PathEdge();

  Location_PathEdge(const Location_PathEdge& from);

  inline Location_PathEdge& operator=(const Location_PathEdge& from) {
    CopyFrom(from);
    return *this;
  }

  static const Location_PathEdge& default_instance();

  enum HasGraphIdCase {
    kGraphId = 1,
    HAS_GRAPH_ID_NOT_SET = 0,
  };

  enum HasPercentAlongCase {
    kPercentAlong = 2,
    HAS_PERCENT_ALONG_NOT_SET = 0,
  };

  enum HasSideOfStreetCase {
    kSideOfStreet = 4,
    HAS_SIDE_OF_STREET_NOT_SET = 0,
  };

  enum HasDistanceCase {
    kDistance = 5,
    HAS_DISTANCE_NOT_SET = 0,
  };

  enum HasMinimumReachabilityCase {
    kMinimumReachability = 6,
    HAS_MINIMUM_REACHABILITY_NOT_SET = 0,
  };

  enum HasBeginNodeCase {
    kBeginNode = 7,
    HAS_BEGIN_NODE_NOT_SET = 0,
  };

  enum HasEndNodeCase {
    kEndNode = 8,
    HAS_END_NODE_NOT_SET = 0,
  };

  enum HasOutboundReachCase {
    kOutboundReach = 11,
    HAS_OUTBOUND_REACH_NOT_SET = 0,
  };

  enum HasInboundReachCase {
    kInboundReach = 12,
    HAS_INBOUND_REACH_NOT_SET = 0,
  };

  enum HasHeadingCase {
    kHeading = 13,
    HAS_HEADING_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Location_PathEdge* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Location_PathEdge* other);

  // implements Message ----------------------------------------------

  inline Location_PathEdge* New() const { return New(NULL); }

  Location_PathEdge* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Location_PathEdge& from);
  void MergeFrom(const Location_PathEdge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location_PathEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 graph_id = 1;
  private:
  bool has_graph_id() const;
  public:
  void clear_graph_id();
  static const int kGraphIdFieldNumber = 1;
  ::google::protobuf::uint64 graph_id() const;
  void set_graph_id(::google::protobuf::uint64 value);

  // optional double percent_along = 2;
  private:
  bool has_percent_along() const;
  public:
  void clear_percent_along();
  static const int kPercentAlongFieldNumber = 2;
  double percent_along() const;
  void set_percent_along(double value);

  // optional .valhalla.LatLng ll = 3;
  bool has_ll() const;
  void clear_ll();
  static const int kLlFieldNumber = 3;
  const ::valhalla::LatLng& ll() const;
  ::valhalla::LatLng* mutable_ll();
  ::valhalla::LatLng* release_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);

  // optional .valhalla.Location.SideOfStreet side_of_street = 4;
  private:
  bool has_side_of_street() const;
  public:
  void clear_side_of_street();
  static const int kSideOfStreetFieldNumber = 4;
  ::valhalla::Location_SideOfStreet side_of_street() const;
  void set_side_of_street(::valhalla::Location_SideOfStreet value);

  // optional double distance = 5;
  private:
  bool has_distance() const;
  public:
  void clear_distance();
  static const int kDistanceFieldNumber = 5;
  double distance() const;
  void set_distance(double value);

  // optional int32 minimum_reachability = 6;
  private:
  bool has_minimum_reachability() const;
  public:
  void clear_minimum_reachability();
  static const int kMinimumReachabilityFieldNumber = 6;
  ::google::protobuf::int32 minimum_reachability() const;
  void set_minimum_reachability(::google::protobuf::int32 value);

  // optional bool begin_node = 7;
  private:
  bool has_begin_node() const;
  public:
  void clear_begin_node();
  static const int kBeginNodeFieldNumber = 7;
  bool begin_node() const;
  void set_begin_node(bool value);

  // optional bool end_node = 8;
  private:
  bool has_end_node() const;
  public:
  void clear_end_node();
  static const int kEndNodeFieldNumber = 8;
  bool end_node() const;
  void set_end_node(bool value);

  // repeated string names = 10;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 10;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // optional int32 outbound_reach = 11;
  private:
  bool has_outbound_reach() const;
  public:
  void clear_outbound_reach();
  static const int kOutboundReachFieldNumber = 11;
  ::google::protobuf::int32 outbound_reach() const;
  void set_outbound_reach(::google::protobuf::int32 value);

  // optional int32 inbound_reach = 12;
  private:
  bool has_inbound_reach() const;
  public:
  void clear_inbound_reach();
  static const int kInboundReachFieldNumber = 12;
  ::google::protobuf::int32 inbound_reach() const;
  void set_inbound_reach(::google::protobuf::int32 value);

  // optional float heading = 13;
  private:
  bool has_heading() const;
  public:
  void clear_heading();
  static const int kHeadingFieldNumber = 13;
  float heading() const;
  void set_heading(float value);

  HasGraphIdCase has_graph_id_case() const;
  HasPercentAlongCase has_percent_along_case() const;
  HasSideOfStreetCase has_side_of_street_case() const;
  HasDistanceCase has_distance_case() const;
  HasMinimumReachabilityCase has_minimum_reachability_case() const;
  HasBeginNodeCase has_begin_node_case() const;
  HasEndNodeCase has_end_node_case() const;
  HasOutboundReachCase has_outbound_reach_case() const;
  HasInboundReachCase has_inbound_reach_case() const;
  HasHeadingCase has_heading_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location.PathEdge)
 private:
  inline void set_has_graph_id();
  inline void set_has_percent_along();
  inline void set_has_side_of_street();
  inline void set_has_distance();
  inline void set_has_minimum_reachability();
  inline void set_has_begin_node();
  inline void set_has_end_node();
  inline void set_has_outbound_reach();
  inline void set_has_inbound_reach();
  inline void set_has_heading();

  inline bool has_has_graph_id() const;
  void clear_has_graph_id();
  inline void clear_has_has_graph_id();

  inline bool has_has_percent_along() const;
  void clear_has_percent_along();
  inline void clear_has_has_percent_along();

  inline bool has_has_side_of_street() const;
  void clear_has_side_of_street();
  inline void clear_has_has_side_of_street();

  inline bool has_has_distance() const;
  void clear_has_distance();
  inline void clear_has_has_distance();

  inline bool has_has_minimum_reachability() const;
  void clear_has_minimum_reachability();
  inline void clear_has_has_minimum_reachability();

  inline bool has_has_begin_node() const;
  void clear_has_begin_node();
  inline void clear_has_has_begin_node();

  inline bool has_has_end_node() const;
  void clear_has_end_node();
  inline void clear_has_has_end_node();

  inline bool has_has_outbound_reach() const;
  void clear_has_outbound_reach();
  inline void clear_has_has_outbound_reach();

  inline bool has_has_inbound_reach() const;
  void clear_has_inbound_reach();
  inline void clear_has_has_inbound_reach();

  inline bool has_has_heading() const;
  void clear_has_heading();
  inline void clear_has_has_heading();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* ll_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  union HasGraphIdUnion {
    HasGraphIdUnion() {}
    ::google::protobuf::uint64 graph_id_;
  } has_graph_id_;
  union HasPercentAlongUnion {
    HasPercentAlongUnion() {}
    double percent_along_;
  } has_percent_along_;
  union HasSideOfStreetUnion {
    HasSideOfStreetUnion() {}
    int side_of_street_;
  } has_side_of_street_;
  union HasDistanceUnion {
    HasDistanceUnion() {}
    double distance_;
  } has_distance_;
  union HasMinimumReachabilityUnion {
    HasMinimumReachabilityUnion() {}
    ::google::protobuf::int32 minimum_reachability_;
  } has_minimum_reachability_;
  union HasBeginNodeUnion {
    HasBeginNodeUnion() {}
    bool begin_node_;
  } has_begin_node_;
  union HasEndNodeUnion {
    HasEndNodeUnion() {}
    bool end_node_;
  } has_end_node_;
  union HasOutboundReachUnion {
    HasOutboundReachUnion() {}
    ::google::protobuf::int32 outbound_reach_;
  } has_outbound_reach_;
  union HasInboundReachUnion {
    HasInboundReachUnion() {}
    ::google::protobuf::int32 inbound_reach_;
  } has_inbound_reach_;
  union HasHeadingUnion {
    HasHeadingUnion() {}
    float heading_;
  } has_heading_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[10];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static Location_PathEdge* default_instance_;
};
// -------------------------------------------------------------------

class Location_SearchFilter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location.SearchFilter) */ {
 public:
  Location_SearchFilter();
  virtual ~Location_SearchFilter();

  Location_SearchFilter(const Location_SearchFilter& from);

  inline Location_SearchFilter& operator=(const Location_SearchFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const Location_SearchFilter& default_instance();

  enum HasMinRoadClassCase {
    kMinRoadClass = 1,
    HAS_MIN_ROAD_CLASS_NOT_SET = 0,
  };

  enum HasMaxRoadClassCase {
    kMaxRoadClass = 2,
    HAS_MAX_ROAD_CLASS_NOT_SET = 0,
  };

  enum HasExcludeTunnelCase {
    kExcludeTunnel = 3,
    HAS_EXCLUDE_TUNNEL_NOT_SET = 0,
  };

  enum HasExcludeBridgeCase {
    kExcludeBridge = 4,
    HAS_EXCLUDE_BRIDGE_NOT_SET = 0,
  };

  enum HasExcludeRampCase {
    kExcludeRamp = 5,
    HAS_EXCLUDE_RAMP_NOT_SET = 0,
  };

  enum HasExcludeClosuresCase {
    kExcludeClosures = 6,
    HAS_EXCLUDE_CLOSURES_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Location_SearchFilter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Location_SearchFilter* other);

  // implements Message ----------------------------------------------

  inline Location_SearchFilter* New() const { return New(NULL); }

  Location_SearchFilter* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Location_SearchFilter& from);
  void MergeFrom(const Location_SearchFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location_SearchFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .valhalla.RoadClass min_road_class = 1;
  private:
  bool has_min_road_class() const;
  public:
  void clear_min_road_class();
  static const int kMinRoadClassFieldNumber = 1;
  ::valhalla::RoadClass min_road_class() const;
  void set_min_road_class(::valhalla::RoadClass value);

  // optional .valhalla.RoadClass max_road_class = 2;
  private:
  bool has_max_road_class() const;
  public:
  void clear_max_road_class();
  static const int kMaxRoadClassFieldNumber = 2;
  ::valhalla::RoadClass max_road_class() const;
  void set_max_road_class(::valhalla::RoadClass value);

  // optional bool exclude_tunnel = 3;
  private:
  bool has_exclude_tunnel() const;
  public:
  void clear_exclude_tunnel();
  static const int kExcludeTunnelFieldNumber = 3;
  bool exclude_tunnel() const;
  void set_exclude_tunnel(bool value);

  // optional bool exclude_bridge = 4;
  private:
  bool has_exclude_bridge() const;
  public:
  void clear_exclude_bridge();
  static const int kExcludeBridgeFieldNumber = 4;
  bool exclude_bridge() const;
  void set_exclude_bridge(bool value);

  // optional bool exclude_ramp = 5;
  private:
  bool has_exclude_ramp() const;
  public:
  void clear_exclude_ramp();
  static const int kExcludeRampFieldNumber = 5;
  bool exclude_ramp() const;
  void set_exclude_ramp(bool value);

  // optional bool exclude_closures = 6;
  private:
  bool has_exclude_closures() const;
  public:
  void clear_exclude_closures();
  static const int kExcludeClosuresFieldNumber = 6;
  bool exclude_closures() const;
  void set_exclude_closures(bool value);

  HasMinRoadClassCase has_min_road_class_case() const;
  HasMaxRoadClassCase has_max_road_class_case() const;
  HasExcludeTunnelCase has_exclude_tunnel_case() const;
  HasExcludeBridgeCase has_exclude_bridge_case() const;
  HasExcludeRampCase has_exclude_ramp_case() const;
  HasExcludeClosuresCase has_exclude_closures_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location.SearchFilter)
 private:
  inline void set_has_min_road_class();
  inline void set_has_max_road_class();
  inline void set_has_exclude_tunnel();
  inline void set_has_exclude_bridge();
  inline void set_has_exclude_ramp();
  inline void set_has_exclude_closures();

  inline bool has_has_min_road_class() const;
  void clear_has_min_road_class();
  inline void clear_has_has_min_road_class();

  inline bool has_has_max_road_class() const;
  void clear_has_max_road_class();
  inline void clear_has_has_max_road_class();

  inline bool has_has_exclude_tunnel() const;
  void clear_has_exclude_tunnel();
  inline void clear_has_has_exclude_tunnel();

  inline bool has_has_exclude_bridge() const;
  void clear_has_exclude_bridge();
  inline void clear_has_has_exclude_bridge();

  inline bool has_has_exclude_ramp() const;
  void clear_has_exclude_ramp();
  inline void clear_has_has_exclude_ramp();

  inline bool has_has_exclude_closures() const;
  void clear_has_exclude_closures();
  inline void clear_has_has_exclude_closures();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasMinRoadClassUnion {
    HasMinRoadClassUnion() {}
    int min_road_class_;
  } has_min_road_class_;
  union HasMaxRoadClassUnion {
    HasMaxRoadClassUnion() {}
    int max_road_class_;
  } has_max_road_class_;
  union HasExcludeTunnelUnion {
    HasExcludeTunnelUnion() {}
    bool exclude_tunnel_;
  } has_exclude_tunnel_;
  union HasExcludeBridgeUnion {
    HasExcludeBridgeUnion() {}
    bool exclude_bridge_;
  } has_exclude_bridge_;
  union HasExcludeRampUnion {
    HasExcludeRampUnion() {}
    bool exclude_ramp_;
  } has_exclude_ramp_;
  union HasExcludeClosuresUnion {
    HasExcludeClosuresUnion() {}
    bool exclude_closures_;
  } has_exclude_closures_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[6];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static Location_SearchFilter* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const Location& default_instance();

  enum HasTypeCase {
    kType = 2,
    HAS_TYPE_NOT_SET = 0,
  };

  enum HasHeadingCase {
    kHeading = 3,
    HAS_HEADING_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 4,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasStreetCase {
    kStreet = 5,
    HAS_STREET_NOT_SET = 0,
  };

  enum HasCityCase {
    kCity = 6,
    HAS_CITY_NOT_SET = 0,
  };

  enum HasStateCase {
    kState = 7,
    HAS_STATE_NOT_SET = 0,
  };

  enum HasPostalCodeCase {
    kPostalCode = 8,
    HAS_POSTAL_CODE_NOT_SET = 0,
  };

  enum HasCountryCase {
    kCountry = 9,
    HAS_COUNTRY_NOT_SET = 0,
  };

  enum HasPhoneCase {
    kPhone = 10,
    HAS_PHONE_NOT_SET = 0,
  };

  enum HasUrlCase {
    kUrl = 11,
    HAS_URL_NOT_SET = 0,
  };

  enum HasDateTimeCase {
    kDateTime = 12,
    HAS_DATE_TIME_NOT_SET = 0,
  };

  enum HasSideOfStreetCase {
    kSideOfStreet = 13,
    HAS_SIDE_OF_STREET_NOT_SET = 0,
  };

  enum HasHeadingToleranceCase {
    kHeadingTolerance = 14,
    HAS_HEADING_TOLERANCE_NOT_SET = 0,
  };

  enum HasNodeSnapToleranceCase {
    kNodeSnapTolerance = 15,
    HAS_NODE_SNAP_TOLERANCE_NOT_SET = 0,
  };

  enum HasWayIdCase {
    kWayId = 16,
    HAS_WAY_ID_NOT_SET = 0,
  };

  enum HasMinimumReachabilityCase {
    kMinimumReachability = 17,
    HAS_MINIMUM_REACHABILITY_NOT_SET = 0,
  };

  enum HasRadiusCase {
    kRadius = 18,
    HAS_RADIUS_NOT_SET = 0,
  };

  enum HasAccuracyCase {
    kAccuracy = 19,
    HAS_ACCURACY_NOT_SET = 0,
  };

  enum HasTimeCase {
    kTime = 20,
    HAS_TIME_NOT_SET = 0,
  };

  enum HasSkipRankingCandidatesCase {
    kSkipRankingCandidates = 21,
    HAS_SKIP_RANKING_CANDIDATES_NOT_SET = 0,
  };

  enum HasOriginalIndexCase {
    kOriginalIndex = 24,
    HAS_ORIGINAL_INDEX_NOT_SET = 0,
  };

  enum HasLegShapeIndexCase {
    kLegShapeIndex = 35,
    HAS_LEG_SHAPE_INDEX_NOT_SET = 0,
  };

  enum HasDistanceFromLegOriginCase {
    kDistanceFromLegOrigin = 36,
    HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET = 0,
  };

  enum HasPreferredSideCase {
    kPreferredSide = 26,
    HAS_PREFERRED_SIDE_NOT_SET = 0,
  };

  enum HasSearchCutoffCase {
    kSearchCutoff = 28,
    HAS_SEARCH_CUTOFF_NOT_SET = 0,
  };

  enum HasStreetSideToleranceCase {
    kStreetSideTolerance = 29,
    HAS_STREET_SIDE_TOLERANCE_NOT_SET = 0,
  };

  enum HasRouteIndexCase {
    kRouteIndex = 30,
    HAS_ROUTE_INDEX_NOT_SET = 0,
  };

  enum HasWaypointIndexCase {
    kWaypointIndex = 31,
    HAS_WAYPOINT_INDEX_NOT_SET = 0,
  };

  enum HasStreetSideMaxDistanceCase {
    kStreetSideMaxDistance = 33,
    HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET = 0,
  };

  enum HasPreferredLayerCase {
    kPreferredLayer = 34,
    HAS_PREFERRED_LAYER_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Location* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Location_PathEdge PathEdge;
  typedef Location_SearchFilter SearchFilter;

  typedef Location_Type Type;
  static const Type kBreak =
    Location_Type_kBreak;
  static const Type kThrough =
    Location_Type_kThrough;
  static const Type kVia =
    Location_Type_kVia;
  static const Type kBreakThrough =
    Location_Type_kBreakThrough;
  static inline bool Type_IsValid(int value) {
    return Location_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Location_Type_Type_MIN;
  static const Type Type_MAX =
    Location_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Location_Type_Type_ARRAYSIZE;

  typedef Location_SideOfStreet SideOfStreet;
  static const SideOfStreet kNone =
    Location_SideOfStreet_kNone;
  static const SideOfStreet kLeft =
    Location_SideOfStreet_kLeft;
  static const SideOfStreet kRight =
    Location_SideOfStreet_kRight;
  static inline bool SideOfStreet_IsValid(int value) {
    return Location_SideOfStreet_IsValid(value);
  }
  static const SideOfStreet SideOfStreet_MIN =
    Location_SideOfStreet_SideOfStreet_MIN;
  static const SideOfStreet SideOfStreet_MAX =
    Location_SideOfStreet_SideOfStreet_MAX;
  static const int SideOfStreet_ARRAYSIZE =
    Location_SideOfStreet_SideOfStreet_ARRAYSIZE;

  typedef Location_PreferredSide PreferredSide;
  static const PreferredSide either =
    Location_PreferredSide_either;
  static const PreferredSide same =
    Location_PreferredSide_same;
  static const PreferredSide opposite =
    Location_PreferredSide_opposite;
  static inline bool PreferredSide_IsValid(int value) {
    return Location_PreferredSide_IsValid(value);
  }
  static const PreferredSide PreferredSide_MIN =
    Location_PreferredSide_PreferredSide_MIN;
  static const PreferredSide PreferredSide_MAX =
    Location_PreferredSide_PreferredSide_MAX;
  static const int PreferredSide_ARRAYSIZE =
    Location_PreferredSide_PreferredSide_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .valhalla.LatLng ll = 1;
  bool has_ll() const;
  void clear_ll();
  static const int kLlFieldNumber = 1;
  const ::valhalla::LatLng& ll() const;
  ::valhalla::LatLng* mutable_ll();
  ::valhalla::LatLng* release_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);

  // optional .valhalla.Location.Type type = 2;
  private:
  bool has_type() const;
  public:
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::valhalla::Location_Type type() const;
  void set_type(::valhalla::Location_Type value);

  // optional uint32 heading = 3;
  private:
  bool has_heading() const;
  public:
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  ::google::protobuf::uint32 heading() const;
  void set_heading(::google::protobuf::uint32 value);

  // optional string name = 4;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string street = 5;
  private:
  bool has_street() const;
  public:
  void clear_street();
  static const int kStreetFieldNumber = 5;
  const ::std::string& street() const;
  void set_street(const ::std::string& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  ::std::string* mutable_street();
  ::std::string* release_street();
  void set_allocated_street(::std::string* street);

  // optional string city = 6;
  private:
  bool has_city() const;
  public:
  void clear_city();
  static const int kCityFieldNumber = 6;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string state = 7;
  private:
  bool has_state() const;
  public:
  void clear_state();
  static const int kStateFieldNumber = 7;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional string postal_code = 8;
  private:
  bool has_postal_code() const;
  public:
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 8;
  const ::std::string& postal_code() const;
  void set_postal_code(const ::std::string& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  ::std::string* mutable_postal_code();
  ::std::string* release_postal_code();
  void set_allocated_postal_code(::std::string* postal_code);

  // optional string country = 9;
  private:
  bool has_country() const;
  public:
  void clear_country();
  static const int kCountryFieldNumber = 9;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string phone = 10;
  private:
  bool has_phone() const;
  public:
  void clear_phone();
  static const int kPhoneFieldNumber = 10;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string url = 11;
  private:
  bool has_url() const;
  public:
  void clear_url();
  static const int kUrlFieldNumber = 11;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string date_time = 12;
  private:
  bool has_date_time() const;
  public:
  void clear_date_time();
  static const int kDateTimeFieldNumber = 12;
  const ::std::string& date_time() const;
  void set_date_time(const ::std::string& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  ::std::string* mutable_date_time();
  ::std::string* release_date_time();
  void set_allocated_date_time(::std::string* date_time);

  // optional .valhalla.Location.SideOfStreet side_of_street = 13;
  private:
  bool has_side_of_street() const;
  public:
  void clear_side_of_street();
  static const int kSideOfStreetFieldNumber = 13;
  ::valhalla::Location_SideOfStreet side_of_street() const;
  void set_side_of_street(::valhalla::Location_SideOfStreet value);

  // optional uint32 heading_tolerance = 14;
  private:
  bool has_heading_tolerance() const;
  public:
  void clear_heading_tolerance();
  static const int kHeadingToleranceFieldNumber = 14;
  ::google::protobuf::uint32 heading_tolerance() const;
  void set_heading_tolerance(::google::protobuf::uint32 value);

  // optional uint32 node_snap_tolerance = 15;
  private:
  bool has_node_snap_tolerance() const;
  public:
  void clear_node_snap_tolerance();
  static const int kNodeSnapToleranceFieldNumber = 15;
  ::google::protobuf::uint32 node_snap_tolerance() const;
  void set_node_snap_tolerance(::google::protobuf::uint32 value);

  // optional uint64 way_id = 16;
  private:
  bool has_way_id() const;
  public:
  void clear_way_id();
  static const int kWayIdFieldNumber = 16;
  ::google::protobuf::uint64 way_id() const;
  void set_way_id(::google::protobuf::uint64 value);

  // optional uint32 minimum_reachability = 17;
  private:
  bool has_minimum_reachability() const;
  public:
  void clear_minimum_reachability();
  static const int kMinimumReachabilityFieldNumber = 17;
  ::google::protobuf::uint32 minimum_reachability() const;
  void set_minimum_reachability(::google::protobuf::uint32 value);

  // optional uint32 radius = 18;
  private:
  bool has_radius() const;
  public:
  void clear_radius();
  static const int kRadiusFieldNumber = 18;
  ::google::protobuf::uint32 radius() const;
  void set_radius(::google::protobuf::uint32 value);

  // optional uint32 accuracy = 19;
  private:
  bool has_accuracy() const;
  public:
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 19;
  ::google::protobuf::uint32 accuracy() const;
  void set_accuracy(::google::protobuf::uint32 value);

  // optional double time = 20;
  private:
  bool has_time() const;
  public:
  void clear_time();
  static const int kTimeFieldNumber = 20;
  double time() const;
  void set_time(double value);

  // optional bool skip_ranking_candidates = 21;
  private:
  bool has_skip_ranking_candidates() const;
  public:
  void clear_skip_ranking_candidates();
  static const int kSkipRankingCandidatesFieldNumber = 21;
  bool skip_ranking_candidates() const;
  void set_skip_ranking_candidates(bool value);

  // repeated .valhalla.Location.PathEdge path_edges = 22;
  int path_edges_size() const;
  void clear_path_edges();
  static const int kPathEdgesFieldNumber = 22;
  const ::valhalla::Location_PathEdge& path_edges(int index) const;
  ::valhalla::Location_PathEdge* mutable_path_edges(int index);
  ::valhalla::Location_PathEdge* add_path_edges();
  ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
      mutable_path_edges();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
      path_edges() const;

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  int filtered_edges_size() const;
  void clear_filtered_edges();
  static const int kFilteredEdgesFieldNumber = 23;
  const ::valhalla::Location_PathEdge& filtered_edges(int index) const;
  ::valhalla::Location_PathEdge* mutable_filtered_edges(int index);
  ::valhalla::Location_PathEdge* add_filtered_edges();
  ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
      mutable_filtered_edges();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
      filtered_edges() const;

  // optional uint32 original_index = 24;
  private:
  bool has_original_index() const;
  public:
  void clear_original_index();
  static const int kOriginalIndexFieldNumber = 24;
  ::google::protobuf::uint32 original_index() const;
  void set_original_index(::google::protobuf::uint32 value);

  // optional .valhalla.LatLng projected_ll = 25;
  bool has_projected_ll() const;
  void clear_projected_ll();
  static const int kProjectedLlFieldNumber = 25;
  const ::valhalla::LatLng& projected_ll() const;
  ::valhalla::LatLng* mutable_projected_ll();
  ::valhalla::LatLng* release_projected_ll();
  void set_allocated_projected_ll(::valhalla::LatLng* projected_ll);

  // optional uint32 leg_shape_index = 35;
  private:
  bool has_leg_shape_index() const;
  public:
  void clear_leg_shape_index();
  static const int kLegShapeIndexFieldNumber = 35;
  ::google::protobuf::uint32 leg_shape_index() const;
  void set_leg_shape_index(::google::protobuf::uint32 value);

  // optional double distance_from_leg_origin = 36;
  private:
  bool has_distance_from_leg_origin() const;
  public:
  void clear_distance_from_leg_origin();
  static const int kDistanceFromLegOriginFieldNumber = 36;
  double distance_from_leg_origin() const;
  void set_distance_from_leg_origin(double value);

  // optional .valhalla.Location.PreferredSide preferred_side = 26;
  private:
  bool has_preferred_side() const;
  public:
  void clear_preferred_side();
  static const int kPreferredSideFieldNumber = 26;
  ::valhalla::Location_PreferredSide preferred_side() const;
  void set_preferred_side(::valhalla::Location_PreferredSide value);

  // optional .valhalla.LatLng display_ll = 27;
  bool has_display_ll() const;
  void clear_display_ll();
  static const int kDisplayLlFieldNumber = 27;
  const ::valhalla::LatLng& display_ll() const;
  ::valhalla::LatLng* mutable_display_ll();
  ::valhalla::LatLng* release_display_ll();
  void set_allocated_display_ll(::valhalla::LatLng* display_ll);

  // optional uint32 search_cutoff = 28;
  private:
  bool has_search_cutoff() const;
  public:
  void clear_search_cutoff();
  static const int kSearchCutoffFieldNumber = 28;
  ::google::protobuf::uint32 search_cutoff() const;
  void set_search_cutoff(::google::protobuf::uint32 value);

  // optional uint32 street_side_tolerance = 29;
  private:
  bool has_street_side_tolerance() const;
  public:
  void clear_street_side_tolerance();
  static const int kStreetSideToleranceFieldNumber = 29;
  ::google::protobuf::uint32 street_side_tolerance() const;
  void set_street_side_tolerance(::google::protobuf::uint32 value);

  // optional uint32 route_index = 30;
  private:
  bool has_route_index() const;
  public:
  void clear_route_index();
  static const int kRouteIndexFieldNumber = 30;
  ::google::protobuf::uint32 route_index() const;
  void set_route_index(::google::protobuf::uint32 value);

  // optional uint32 waypoint_index = 31;
  private:
  bool has_waypoint_index() const;
  public:
  void clear_waypoint_index();
  static const int kWaypointIndexFieldNumber = 31;
  ::google::protobuf::uint32 waypoint_index() const;
  void set_waypoint_index(::google::protobuf::uint32 value);

  // optional .valhalla.Location.SearchFilter search_filter = 32;
  bool has_search_filter() const;
  void clear_search_filter();
  static const int kSearchFilterFieldNumber = 32;
  const ::valhalla::Location_SearchFilter& search_filter() const;
  ::valhalla::Location_SearchFilter* mutable_search_filter();
  ::valhalla::Location_SearchFilter* release_search_filter();
  void set_allocated_search_filter(::valhalla::Location_SearchFilter* search_filter);

  // optional uint32 street_side_max_distance = 33;
  private:
  bool has_street_side_max_distance() const;
  public:
  void clear_street_side_max_distance();
  static const int kStreetSideMaxDistanceFieldNumber = 33;
  ::google::protobuf::uint32 street_side_max_distance() const;
  void set_street_side_max_distance(::google::protobuf::uint32 value);

  // optional int32 preferred_layer = 34;
  private:
  bool has_preferred_layer() const;
  public:
  void clear_preferred_layer();
  static const int kPreferredLayerFieldNumber = 34;
  ::google::protobuf::int32 preferred_layer() const;
  void set_preferred_layer(::google::protobuf::int32 value);

  HasTypeCase has_type_case() const;
  HasHeadingCase has_heading_case() const;
  HasNameCase has_name_case() const;
  HasStreetCase has_street_case() const;
  HasCityCase has_city_case() const;
  HasStateCase has_state_case() const;
  HasPostalCodeCase has_postal_code_case() const;
  HasCountryCase has_country_case() const;
  HasPhoneCase has_phone_case() const;
  HasUrlCase has_url_case() const;
  HasDateTimeCase has_date_time_case() const;
  HasSideOfStreetCase has_side_of_street_case() const;
  HasHeadingToleranceCase has_heading_tolerance_case() const;
  HasNodeSnapToleranceCase has_node_snap_tolerance_case() const;
  HasWayIdCase has_way_id_case() const;
  HasMinimumReachabilityCase has_minimum_reachability_case() const;
  HasRadiusCase has_radius_case() const;
  HasAccuracyCase has_accuracy_case() const;
  HasTimeCase has_time_case() const;
  HasSkipRankingCandidatesCase has_skip_ranking_candidates_case() const;
  HasOriginalIndexCase has_original_index_case() const;
  HasLegShapeIndexCase has_leg_shape_index_case() const;
  HasDistanceFromLegOriginCase has_distance_from_leg_origin_case() const;
  HasPreferredSideCase has_preferred_side_case() const;
  HasSearchCutoffCase has_search_cutoff_case() const;
  HasStreetSideToleranceCase has_street_side_tolerance_case() const;
  HasRouteIndexCase has_route_index_case() const;
  HasWaypointIndexCase has_waypoint_index_case() const;
  HasStreetSideMaxDistanceCase has_street_side_max_distance_case() const;
  HasPreferredLayerCase has_preferred_layer_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location)
 private:
  inline void set_has_type();
  inline void set_has_heading();
  inline void set_has_name();
  inline void set_has_street();
  inline void set_has_city();
  inline void set_has_state();
  inline void set_has_postal_code();
  inline void set_has_country();
  inline void set_has_phone();
  inline void set_has_url();
  inline void set_has_date_time();
  inline void set_has_side_of_street();
  inline void set_has_heading_tolerance();
  inline void set_has_node_snap_tolerance();
  inline void set_has_way_id();
  inline void set_has_minimum_reachability();
  inline void set_has_radius();
  inline void set_has_accuracy();
  inline void set_has_time();
  inline void set_has_skip_ranking_candidates();
  inline void set_has_original_index();
  inline void set_has_leg_shape_index();
  inline void set_has_distance_from_leg_origin();
  inline void set_has_preferred_side();
  inline void set_has_search_cutoff();
  inline void set_has_street_side_tolerance();
  inline void set_has_route_index();
  inline void set_has_waypoint_index();
  inline void set_has_street_side_max_distance();
  inline void set_has_preferred_layer();

  inline bool has_has_type() const;
  void clear_has_type();
  inline void clear_has_has_type();

  inline bool has_has_heading() const;
  void clear_has_heading();
  inline void clear_has_has_heading();

  inline bool has_has_name() const;
  void clear_has_name();
  inline void clear_has_has_name();

  inline bool has_has_street() const;
  void clear_has_street();
  inline void clear_has_has_street();

  inline bool has_has_city() const;
  void clear_has_city();
  inline void clear_has_has_city();

  inline bool has_has_state() const;
  void clear_has_state();
  inline void clear_has_has_state();

  inline bool has_has_postal_code() const;
  void clear_has_postal_code();
  inline void clear_has_has_postal_code();

  inline bool has_has_country() const;
  void clear_has_country();
  inline void clear_has_has_country();

  inline bool has_has_phone() const;
  void clear_has_phone();
  inline void clear_has_has_phone();

  inline bool has_has_url() const;
  void clear_has_url();
  inline void clear_has_has_url();

  inline bool has_has_date_time() const;
  void clear_has_date_time();
  inline void clear_has_has_date_time();

  inline bool has_has_side_of_street() const;
  void clear_has_side_of_street();
  inline void clear_has_has_side_of_street();

  inline bool has_has_heading_tolerance() const;
  void clear_has_heading_tolerance();
  inline void clear_has_has_heading_tolerance();

  inline bool has_has_node_snap_tolerance() const;
  void clear_has_node_snap_tolerance();
  inline void clear_has_has_node_snap_tolerance();

  inline bool has_has_way_id() const;
  void clear_has_way_id();
  inline void clear_has_has_way_id();

  inline bool has_has_minimum_reachability() const;
  void clear_has_minimum_reachability();
  inline void clear_has_has_minimum_reachability();

  inline bool has_has_radius() const;
  void clear_has_radius();
  inline void clear_has_has_radius();

  inline bool has_has_accuracy() const;
  void clear_has_accuracy();
  inline void clear_has_has_accuracy();

  inline bool has_has_time() const;
  void clear_has_time();
  inline void clear_has_has_time();

  inline bool has_has_skip_ranking_candidates() const;
  void clear_has_skip_ranking_candidates();
  inline void clear_has_has_skip_ranking_candidates();

  inline bool has_has_original_index() const;
  void clear_has_original_index();
  inline void clear_has_has_original_index();

  inline bool has_has_leg_shape_index() const;
  void clear_has_leg_shape_index();
  inline void clear_has_has_leg_shape_index();

  inline bool has_has_distance_from_leg_origin() const;
  void clear_has_distance_from_leg_origin();
  inline void clear_has_has_distance_from_leg_origin();

  inline bool has_has_preferred_side() const;
  void clear_has_preferred_side();
  inline void clear_has_has_preferred_side();

  inline bool has_has_search_cutoff() const;
  void clear_has_search_cutoff();
  inline void clear_has_has_search_cutoff();

  inline bool has_has_street_side_tolerance() const;
  void clear_has_street_side_tolerance();
  inline void clear_has_has_street_side_tolerance();

  inline bool has_has_route_index() const;
  void clear_has_route_index();
  inline void clear_has_has_route_index();

  inline bool has_has_waypoint_index() const;
  void clear_has_waypoint_index();
  inline void clear_has_has_waypoint_index();

  inline bool has_has_street_side_max_distance() const;
  void clear_has_street_side_max_distance();
  inline void clear_has_has_street_side_max_distance();

  inline bool has_has_preferred_layer() const;
  void clear_has_preferred_layer();
  inline void clear_has_has_preferred_layer();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* ll_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge > path_edges_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge > filtered_edges_;
  ::valhalla::LatLng* projected_ll_;
  ::valhalla::LatLng* display_ll_;
  ::valhalla::Location_SearchFilter* search_filter_;
  union HasTypeUnion {
    HasTypeUnion() {}
    int type_;
  } has_type_;
  union HasHeadingUnion {
    HasHeadingUnion() {}
    ::google::protobuf::uint32 heading_;
  } has_heading_;
  union HasNameUnion {
    HasNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
  } has_name_;
  union HasStreetUnion {
    HasStreetUnion() {}
    ::google::protobuf::internal::ArenaStringPtr street_;
  } has_street_;
  union HasCityUnion {
    HasCityUnion() {}
    ::google::protobuf::internal::ArenaStringPtr city_;
  } has_city_;
  union HasStateUnion {
    HasStateUnion() {}
    ::google::protobuf::internal::ArenaStringPtr state_;
  } has_state_;
  union HasPostalCodeUnion {
    HasPostalCodeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr postal_code_;
  } has_postal_code_;
  union HasCountryUnion {
    HasCountryUnion() {}
    ::google::protobuf::internal::ArenaStringPtr country_;
  } has_country_;
  union HasPhoneUnion {
    HasPhoneUnion() {}
    ::google::protobuf::internal::ArenaStringPtr phone_;
  } has_phone_;
  union HasUrlUnion {
    HasUrlUnion() {}
    ::google::protobuf::internal::ArenaStringPtr url_;
  } has_url_;
  union HasDateTimeUnion {
    HasDateTimeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr date_time_;
  } has_date_time_;
  union HasSideOfStreetUnion {
    HasSideOfStreetUnion() {}
    int side_of_street_;
  } has_side_of_street_;
  union HasHeadingToleranceUnion {
    HasHeadingToleranceUnion() {}
    ::google::protobuf::uint32 heading_tolerance_;
  } has_heading_tolerance_;
  union HasNodeSnapToleranceUnion {
    HasNodeSnapToleranceUnion() {}
    ::google::protobuf::uint32 node_snap_tolerance_;
  } has_node_snap_tolerance_;
  union HasWayIdUnion {
    HasWayIdUnion() {}
    ::google::protobuf::uint64 way_id_;
  } has_way_id_;
  union HasMinimumReachabilityUnion {
    HasMinimumReachabilityUnion() {}
    ::google::protobuf::uint32 minimum_reachability_;
  } has_minimum_reachability_;
  union HasRadiusUnion {
    HasRadiusUnion() {}
    ::google::protobuf::uint32 radius_;
  } has_radius_;
  union HasAccuracyUnion {
    HasAccuracyUnion() {}
    ::google::protobuf::uint32 accuracy_;
  } has_accuracy_;
  union HasTimeUnion {
    HasTimeUnion() {}
    double time_;
  } has_time_;
  union HasSkipRankingCandidatesUnion {
    HasSkipRankingCandidatesUnion() {}
    bool skip_ranking_candidates_;
  } has_skip_ranking_candidates_;
  union HasOriginalIndexUnion {
    HasOriginalIndexUnion() {}
    ::google::protobuf::uint32 original_index_;
  } has_original_index_;
  union HasLegShapeIndexUnion {
    HasLegShapeIndexUnion() {}
    ::google::protobuf::uint32 leg_shape_index_;
  } has_leg_shape_index_;
  union HasDistanceFromLegOriginUnion {
    HasDistanceFromLegOriginUnion() {}
    double distance_from_leg_origin_;
  } has_distance_from_leg_origin_;
  union HasPreferredSideUnion {
    HasPreferredSideUnion() {}
    int preferred_side_;
  } has_preferred_side_;
  union HasSearchCutoffUnion {
    HasSearchCutoffUnion() {}
    ::google::protobuf::uint32 search_cutoff_;
  } has_search_cutoff_;
  union HasStreetSideToleranceUnion {
    HasStreetSideToleranceUnion() {}
    ::google::protobuf::uint32 street_side_tolerance_;
  } has_street_side_tolerance_;
  union HasRouteIndexUnion {
    HasRouteIndexUnion() {}
    ::google::protobuf::uint32 route_index_;
  } has_route_index_;
  union HasWaypointIndexUnion {
    HasWaypointIndexUnion() {}
    ::google::protobuf::uint32 waypoint_index_;
  } has_waypoint_index_;
  union HasStreetSideMaxDistanceUnion {
    HasStreetSideMaxDistanceUnion() {}
    ::google::protobuf::uint32 street_side_max_distance_;
  } has_street_side_max_distance_;
  union HasPreferredLayerUnion {
    HasPreferredLayerUnion() {}
    ::google::protobuf::int32 preferred_layer_;
  } has_preferred_layer_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[30];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class TransitEgressInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitEgressInfo) */ {
 public:
  TransitEgressInfo();
  virtual ~TransitEgressInfo();

  TransitEgressInfo(const TransitEgressInfo& from);

  inline TransitEgressInfo& operator=(const TransitEgressInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransitEgressInfo& default_instance();

  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 2,
    HAS_NAME_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransitEgressInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransitEgressInfo* other);

  // implements Message ----------------------------------------------

  inline TransitEgressInfo* New() const { return New(NULL); }

  TransitEgressInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransitEgressInfo& from);
  void MergeFrom(const TransitEgressInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitEgressInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string onestop_id = 1;
  private:
  bool has_onestop_id() const;
  public:
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 1;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .valhalla.LatLng ll = 3;
  bool has_ll() const;
  void clear_ll();
  static const int kLlFieldNumber = 3;
  const ::valhalla::LatLng& ll() const;
  ::valhalla::LatLng* mutable_ll();
  ::valhalla::LatLng* release_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);

  HasOnestopIdCase has_onestop_id_case() const;
  HasNameCase has_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitEgressInfo)
 private:
  inline void set_has_onestop_id();
  inline void set_has_name();

  inline bool has_has_onestop_id() const;
  void clear_has_onestop_id();
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  void clear_has_name();
  inline void clear_has_has_name();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* ll_;
  union HasOnestopIdUnion {
    HasOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  } has_onestop_id_;
  union HasNameUnion {
    HasNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
  } has_name_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TransitEgressInfo* default_instance_;
};
// -------------------------------------------------------------------

class TransitStationInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitStationInfo) */ {
 public:
  TransitStationInfo();
  virtual ~TransitStationInfo();

  TransitStationInfo(const TransitStationInfo& from);

  inline TransitStationInfo& operator=(const TransitStationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransitStationInfo& default_instance();

  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 2,
    HAS_NAME_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransitStationInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransitStationInfo* other);

  // implements Message ----------------------------------------------

  inline TransitStationInfo* New() const { return New(NULL); }

  TransitStationInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransitStationInfo& from);
  void MergeFrom(const TransitStationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitStationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string onestop_id = 1;
  private:
  bool has_onestop_id() const;
  public:
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 1;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional string name = 2;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .valhalla.LatLng ll = 3;
  bool has_ll() const;
  void clear_ll();
  static const int kLlFieldNumber = 3;
  const ::valhalla::LatLng& ll() const;
  ::valhalla::LatLng* mutable_ll();
  ::valhalla::LatLng* release_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);

  HasOnestopIdCase has_onestop_id_case() const;
  HasNameCase has_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitStationInfo)
 private:
  inline void set_has_onestop_id();
  inline void set_has_name();

  inline bool has_has_onestop_id() const;
  void clear_has_onestop_id();
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  void clear_has_name();
  inline void clear_has_has_name();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* ll_;
  union HasOnestopIdUnion {
    HasOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  } has_onestop_id_;
  union HasNameUnion {
    HasNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
  } has_name_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TransitStationInfo* default_instance_;
};
// -------------------------------------------------------------------

class BikeShareStationInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.BikeShareStationInfo) */ {
 public:
  BikeShareStationInfo();
  virtual ~BikeShareStationInfo();

  BikeShareStationInfo(const BikeShareStationInfo& from);

  inline BikeShareStationInfo& operator=(const BikeShareStationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const BikeShareStationInfo& default_instance();

  enum HasNameCase {
    kName = 1,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasRefCase {
    kRef = 2,
    HAS_REF_NOT_SET = 0,
  };

  enum HasCapacityCase {
    kCapacity = 3,
    HAS_CAPACITY_NOT_SET = 0,
  };

  enum HasNetworkCase {
    kNetwork = 4,
    HAS_NETWORK_NOT_SET = 0,
  };

  enum HasOperatorCase {
    kOperator = 5,
    HAS_OPERATOR__NOT_SET = 0,
  };

  enum HasRentCostCase {
    kRentCost = 6,
    HAS_RENT_COST_NOT_SET = 0,
  };

  enum HasReturnCostCase {
    kReturnCost = 7,
    HAS_RETURN_COST_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BikeShareStationInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BikeShareStationInfo* other);

  // implements Message ----------------------------------------------

  inline BikeShareStationInfo* New() const { return New(NULL); }

  BikeShareStationInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BikeShareStationInfo& from);
  void MergeFrom(const BikeShareStationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BikeShareStationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ref = 2;
  private:
  bool has_ref() const;
  public:
  void clear_ref();
  static const int kRefFieldNumber = 2;
  const ::std::string& ref() const;
  void set_ref(const ::std::string& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  ::std::string* mutable_ref();
  ::std::string* release_ref();
  void set_allocated_ref(::std::string* ref);

  // optional uint32 capacity = 3;
  private:
  bool has_capacity() const;
  public:
  void clear_capacity();
  static const int kCapacityFieldNumber = 3;
  ::google::protobuf::uint32 capacity() const;
  void set_capacity(::google::protobuf::uint32 value);

  // optional string network = 4;
  private:
  bool has_network() const;
  public:
  void clear_network();
  static const int kNetworkFieldNumber = 4;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string operator = 5;
  private:
  bool has_operator_() const;
  public:
  void clear_operator_();
  static const int kOperatorFieldNumber = 5;
  const ::std::string& operator_() const;
  void set_operator_(const ::std::string& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  ::std::string* mutable_operator_();
  ::std::string* release_operator_();
  void set_allocated_operator_(::std::string* operator_);

  // optional float rent_cost = 6;
  private:
  bool has_rent_cost() const;
  public:
  void clear_rent_cost();
  static const int kRentCostFieldNumber = 6;
  float rent_cost() const;
  void set_rent_cost(float value);

  // optional float return_cost = 7;
  private:
  bool has_return_cost() const;
  public:
  void clear_return_cost();
  static const int kReturnCostFieldNumber = 7;
  float return_cost() const;
  void set_return_cost(float value);

  HasNameCase has_name_case() const;
  HasRefCase has_ref_case() const;
  HasCapacityCase has_capacity_case() const;
  HasNetworkCase has_network_case() const;
  HasOperatorCase has_operator__case() const;
  HasRentCostCase has_rent_cost_case() const;
  HasReturnCostCase has_return_cost_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.BikeShareStationInfo)
 private:
  inline void set_has_name();
  inline void set_has_ref();
  inline void set_has_capacity();
  inline void set_has_network();
  inline void set_has_operator_();
  inline void set_has_rent_cost();
  inline void set_has_return_cost();

  inline bool has_has_name() const;
  void clear_has_name();
  inline void clear_has_has_name();

  inline bool has_has_ref() const;
  void clear_has_ref();
  inline void clear_has_has_ref();

  inline bool has_has_capacity() const;
  void clear_has_capacity();
  inline void clear_has_has_capacity();

  inline bool has_has_network() const;
  void clear_has_network();
  inline void clear_has_has_network();

  inline bool has_has_operator_() const;
  void clear_has_operator_();
  inline void clear_has_has_operator_();

  inline bool has_has_rent_cost() const;
  void clear_has_rent_cost();
  inline void clear_has_has_rent_cost();

  inline bool has_has_return_cost() const;
  void clear_has_return_cost();
  inline void clear_has_has_return_cost();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasNameUnion {
    HasNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
  } has_name_;
  union HasRefUnion {
    HasRefUnion() {}
    ::google::protobuf::internal::ArenaStringPtr ref_;
  } has_ref_;
  union HasCapacityUnion {
    HasCapacityUnion() {}
    ::google::protobuf::uint32 capacity_;
  } has_capacity_;
  union HasNetworkUnion {
    HasNetworkUnion() {}
    ::google::protobuf::internal::ArenaStringPtr network_;
  } has_network_;
  union HasOperatorUnion {
    HasOperatorUnion() {}
    ::google::protobuf::internal::ArenaStringPtr operator__;
  } has_operator__;
  union HasRentCostUnion {
    HasRentCostUnion() {}
    float rent_cost_;
  } has_rent_cost_;
  union HasReturnCostUnion {
    HasReturnCostUnion() {}
    float return_cost_;
  } has_return_cost_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[7];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static BikeShareStationInfo* default_instance_;
};
// -------------------------------------------------------------------

class TransitPlatformInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitPlatformInfo) */ {
 public:
  TransitPlatformInfo();
  virtual ~TransitPlatformInfo();

  TransitPlatformInfo(const TransitPlatformInfo& from);

  inline TransitPlatformInfo& operator=(const TransitPlatformInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransitPlatformInfo& default_instance();

  enum HasTypeCase {
    kType = 1,
    HAS_TYPE_NOT_SET = 0,
  };

  enum HasOnestopIdCase {
    kOnestopId = 2,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 3,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasArrivalDateTimeCase {
    kArrivalDateTime = 4,
    HAS_ARRIVAL_DATE_TIME_NOT_SET = 0,
  };

  enum HasDepartureDateTimeCase {
    kDepartureDateTime = 5,
    HAS_DEPARTURE_DATE_TIME_NOT_SET = 0,
  };

  enum HasAssumedScheduleCase {
    kAssumedSchedule = 6,
    HAS_ASSUMED_SCHEDULE_NOT_SET = 0,
  };

  enum HasStationOnestopIdCase {
    kStationOnestopId = 8,
    HAS_STATION_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasStationNameCase {
    kStationName = 9,
    HAS_STATION_NAME_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransitPlatformInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransitPlatformInfo* other);

  // implements Message ----------------------------------------------

  inline TransitPlatformInfo* New() const { return New(NULL); }

  TransitPlatformInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransitPlatformInfo& from);
  void MergeFrom(const TransitPlatformInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitPlatformInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef TransitPlatformInfo_Type Type;
  static const Type kStop =
    TransitPlatformInfo_Type_kStop;
  static const Type kStation =
    TransitPlatformInfo_Type_kStation;
  static inline bool Type_IsValid(int value) {
    return TransitPlatformInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TransitPlatformInfo_Type_Type_MIN;
  static const Type Type_MAX =
    TransitPlatformInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TransitPlatformInfo_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .valhalla.TransitPlatformInfo.Type type = 1;
  private:
  bool has_type() const;
  public:
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::valhalla::TransitPlatformInfo_Type type() const;
  void set_type(::valhalla::TransitPlatformInfo_Type value);

  // optional string onestop_id = 2;
  private:
  bool has_onestop_id() const;
  public:
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 2;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional string name = 3;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string arrival_date_time = 4;
  private:
  bool has_arrival_date_time() const;
  public:
  void clear_arrival_date_time();
  static const int kArrivalDateTimeFieldNumber = 4;
  const ::std::string& arrival_date_time() const;
  void set_arrival_date_time(const ::std::string& value);
  void set_arrival_date_time(const char* value);
  void set_arrival_date_time(const char* value, size_t size);
  ::std::string* mutable_arrival_date_time();
  ::std::string* release_arrival_date_time();
  void set_allocated_arrival_date_time(::std::string* arrival_date_time);

  // optional string departure_date_time = 5;
  private:
  bool has_departure_date_time() const;
  public:
  void clear_departure_date_time();
  static const int kDepartureDateTimeFieldNumber = 5;
  const ::std::string& departure_date_time() const;
  void set_departure_date_time(const ::std::string& value);
  void set_departure_date_time(const char* value);
  void set_departure_date_time(const char* value, size_t size);
  ::std::string* mutable_departure_date_time();
  ::std::string* release_departure_date_time();
  void set_allocated_departure_date_time(::std::string* departure_date_time);

  // optional bool assumed_schedule = 6;
  private:
  bool has_assumed_schedule() const;
  public:
  void clear_assumed_schedule();
  static const int kAssumedScheduleFieldNumber = 6;
  bool assumed_schedule() const;
  void set_assumed_schedule(bool value);

  // optional .valhalla.LatLng ll = 7;
  bool has_ll() const;
  void clear_ll();
  static const int kLlFieldNumber = 7;
  const ::valhalla::LatLng& ll() const;
  ::valhalla::LatLng* mutable_ll();
  ::valhalla::LatLng* release_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);

  // optional string station_onestop_id = 8;
  private:
  bool has_station_onestop_id() const;
  public:
  void clear_station_onestop_id();
  static const int kStationOnestopIdFieldNumber = 8;
  const ::std::string& station_onestop_id() const;
  void set_station_onestop_id(const ::std::string& value);
  void set_station_onestop_id(const char* value);
  void set_station_onestop_id(const char* value, size_t size);
  ::std::string* mutable_station_onestop_id();
  ::std::string* release_station_onestop_id();
  void set_allocated_station_onestop_id(::std::string* station_onestop_id);

  // optional string station_name = 9;
  private:
  bool has_station_name() const;
  public:
  void clear_station_name();
  static const int kStationNameFieldNumber = 9;
  const ::std::string& station_name() const;
  void set_station_name(const ::std::string& value);
  void set_station_name(const char* value);
  void set_station_name(const char* value, size_t size);
  ::std::string* mutable_station_name();
  ::std::string* release_station_name();
  void set_allocated_station_name(::std::string* station_name);

  HasTypeCase has_type_case() const;
  HasOnestopIdCase has_onestop_id_case() const;
  HasNameCase has_name_case() const;
  HasArrivalDateTimeCase has_arrival_date_time_case() const;
  HasDepartureDateTimeCase has_departure_date_time_case() const;
  HasAssumedScheduleCase has_assumed_schedule_case() const;
  HasStationOnestopIdCase has_station_onestop_id_case() const;
  HasStationNameCase has_station_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitPlatformInfo)
 private:
  inline void set_has_type();
  inline void set_has_onestop_id();
  inline void set_has_name();
  inline void set_has_arrival_date_time();
  inline void set_has_departure_date_time();
  inline void set_has_assumed_schedule();
  inline void set_has_station_onestop_id();
  inline void set_has_station_name();

  inline bool has_has_type() const;
  void clear_has_type();
  inline void clear_has_has_type();

  inline bool has_has_onestop_id() const;
  void clear_has_onestop_id();
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  void clear_has_name();
  inline void clear_has_has_name();

  inline bool has_has_arrival_date_time() const;
  void clear_has_arrival_date_time();
  inline void clear_has_has_arrival_date_time();

  inline bool has_has_departure_date_time() const;
  void clear_has_departure_date_time();
  inline void clear_has_has_departure_date_time();

  inline bool has_has_assumed_schedule() const;
  void clear_has_assumed_schedule();
  inline void clear_has_has_assumed_schedule();

  inline bool has_has_station_onestop_id() const;
  void clear_has_station_onestop_id();
  inline void clear_has_has_station_onestop_id();

  inline bool has_has_station_name() const;
  void clear_has_station_name();
  inline void clear_has_has_station_name();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::LatLng* ll_;
  union HasTypeUnion {
    HasTypeUnion() {}
    int type_;
  } has_type_;
  union HasOnestopIdUnion {
    HasOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  } has_onestop_id_;
  union HasNameUnion {
    HasNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
  } has_name_;
  union HasArrivalDateTimeUnion {
    HasArrivalDateTimeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr arrival_date_time_;
  } has_arrival_date_time_;
  union HasDepartureDateTimeUnion {
    HasDepartureDateTimeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr departure_date_time_;
  } has_departure_date_time_;
  union HasAssumedScheduleUnion {
    HasAssumedScheduleUnion() {}
    bool assumed_schedule_;
  } has_assumed_schedule_;
  union HasStationOnestopIdUnion {
    HasStationOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr station_onestop_id_;
  } has_station_onestop_id_;
  union HasStationNameUnion {
    HasStationNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr station_name_;
  } has_station_name_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[8];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TransitPlatformInfo* default_instance_;
};
// -------------------------------------------------------------------

class TransitRouteInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitRouteInfo) */ {
 public:
  TransitRouteInfo();
  virtual ~TransitRouteInfo();

  TransitRouteInfo(const TransitRouteInfo& from);

  inline TransitRouteInfo& operator=(const TransitRouteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransitRouteInfo& default_instance();

  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasBlockIdCase {
    kBlockId = 2,
    HAS_BLOCK_ID_NOT_SET = 0,
  };

  enum HasTripIdCase {
    kTripId = 3,
    HAS_TRIP_ID_NOT_SET = 0,
  };

  enum HasShortNameCase {
    kShortName = 4,
    HAS_SHORT_NAME_NOT_SET = 0,
  };

  enum HasLongNameCase {
    kLongName = 5,
    HAS_LONG_NAME_NOT_SET = 0,
  };

  enum HasHeadsignCase {
    kHeadsign = 6,
    HAS_HEADSIGN_NOT_SET = 0,
  };

  enum HasColorCase {
    kColor = 7,
    HAS_COLOR_NOT_SET = 0,
  };

  enum HasTextColorCase {
    kTextColor = 8,
    HAS_TEXT_COLOR_NOT_SET = 0,
  };

  enum HasDescriptionCase {
    kDescription = 9,
    HAS_DESCRIPTION_NOT_SET = 0,
  };

  enum HasOperatorOnestopIdCase {
    kOperatorOnestopId = 10,
    HAS_OPERATOR_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasOperatorNameCase {
    kOperatorName = 11,
    HAS_OPERATOR_NAME_NOT_SET = 0,
  };

  enum HasOperatorUrlCase {
    kOperatorUrl = 12,
    HAS_OPERATOR_URL_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransitRouteInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransitRouteInfo* other);

  // implements Message ----------------------------------------------

  inline TransitRouteInfo* New() const { return New(NULL); }

  TransitRouteInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransitRouteInfo& from);
  void MergeFrom(const TransitRouteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitRouteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string onestop_id = 1;
  private:
  bool has_onestop_id() const;
  public:
  void clear_onestop_id();
  static const int kOnestopIdFieldNumber = 1;
  const ::std::string& onestop_id() const;
  void set_onestop_id(const ::std::string& value);
  void set_onestop_id(const char* value);
  void set_onestop_id(const char* value, size_t size);
  ::std::string* mutable_onestop_id();
  ::std::string* release_onestop_id();
  void set_allocated_onestop_id(::std::string* onestop_id);

  // optional uint32 block_id = 2;
  private:
  bool has_block_id() const;
  public:
  void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  ::google::protobuf::uint32 block_id() const;
  void set_block_id(::google::protobuf::uint32 value);

  // optional uint32 trip_id = 3;
  private:
  bool has_trip_id() const;
  public:
  void clear_trip_id();
  static const int kTripIdFieldNumber = 3;
  ::google::protobuf::uint32 trip_id() const;
  void set_trip_id(::google::protobuf::uint32 value);

  // optional string short_name = 4;
  private:
  bool has_short_name() const;
  public:
  void clear_short_name();
  static const int kShortNameFieldNumber = 4;
  const ::std::string& short_name() const;
  void set_short_name(const ::std::string& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  ::std::string* mutable_short_name();
  ::std::string* release_short_name();
  void set_allocated_short_name(::std::string* short_name);

  // optional string long_name = 5;
  private:
  bool has_long_name() const;
  public:
  void clear_long_name();
  static const int kLongNameFieldNumber = 5;
  const ::std::string& long_name() const;
  void set_long_name(const ::std::string& value);
  void set_long_name(const char* value);
  void set_long_name(const char* value, size_t size);
  ::std::string* mutable_long_name();
  ::std::string* release_long_name();
  void set_allocated_long_name(::std::string* long_name);

  // optional string headsign = 6;
  private:
  bool has_headsign() const;
  public:
  void clear_headsign();
  static const int kHeadsignFieldNumber = 6;
  const ::std::string& headsign() const;
  void set_headsign(const ::std::string& value);
  void set_headsign(const char* value);
  void set_headsign(const char* value, size_t size);
  ::std::string* mutable_headsign();
  ::std::string* release_headsign();
  void set_allocated_headsign(::std::string* headsign);

  // optional uint32 color = 7;
  private:
  bool has_color() const;
  public:
  void clear_color();
  static const int kColorFieldNumber = 7;
  ::google::protobuf::uint32 color() const;
  void set_color(::google::protobuf::uint32 value);

  // optional uint32 text_color = 8;
  private:
  bool has_text_color() const;
  public:
  void clear_text_color();
  static const int kTextColorFieldNumber = 8;
  ::google::protobuf::uint32 text_color() const;
  void set_text_color(::google::protobuf::uint32 value);

  // optional string description = 9;
  private:
  bool has_description() const;
  public:
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string operator_onestop_id = 10;
  private:
  bool has_operator_onestop_id() const;
  public:
  void clear_operator_onestop_id();
  static const int kOperatorOnestopIdFieldNumber = 10;
  const ::std::string& operator_onestop_id() const;
  void set_operator_onestop_id(const ::std::string& value);
  void set_operator_onestop_id(const char* value);
  void set_operator_onestop_id(const char* value, size_t size);
  ::std::string* mutable_operator_onestop_id();
  ::std::string* release_operator_onestop_id();
  void set_allocated_operator_onestop_id(::std::string* operator_onestop_id);

  // optional string operator_name = 11;
  private:
  bool has_operator_name() const;
  public:
  void clear_operator_name();
  static const int kOperatorNameFieldNumber = 11;
  const ::std::string& operator_name() const;
  void set_operator_name(const ::std::string& value);
  void set_operator_name(const char* value);
  void set_operator_name(const char* value, size_t size);
  ::std::string* mutable_operator_name();
  ::std::string* release_operator_name();
  void set_allocated_operator_name(::std::string* operator_name);

  // optional string operator_url = 12;
  private:
  bool has_operator_url() const;
  public:
  void clear_operator_url();
  static const int kOperatorUrlFieldNumber = 12;
  const ::std::string& operator_url() const;
  void set_operator_url(const ::std::string& value);
  void set_operator_url(const char* value);
  void set_operator_url(const char* value, size_t size);
  ::std::string* mutable_operator_url();
  ::std::string* release_operator_url();
  void set_allocated_operator_url(::std::string* operator_url);

  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  int transit_stops_size() const;
  void clear_transit_stops();
  static const int kTransitStopsFieldNumber = 13;
  const ::valhalla::TransitPlatformInfo& transit_stops(int index) const;
  ::valhalla::TransitPlatformInfo* mutable_transit_stops(int index);
  ::valhalla::TransitPlatformInfo* add_transit_stops();
  ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >*
      mutable_transit_stops();
  const ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >&
      transit_stops() const;

  HasOnestopIdCase has_onestop_id_case() const;
  HasBlockIdCase has_block_id_case() const;
  HasTripIdCase has_trip_id_case() const;
  HasShortNameCase has_short_name_case() const;
  HasLongNameCase has_long_name_case() const;
  HasHeadsignCase has_headsign_case() const;
  HasColorCase has_color_case() const;
  HasTextColorCase has_text_color_case() const;
  HasDescriptionCase has_description_case() const;
  HasOperatorOnestopIdCase has_operator_onestop_id_case() const;
  HasOperatorNameCase has_operator_name_case() const;
  HasOperatorUrlCase has_operator_url_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitRouteInfo)
 private:
  inline void set_has_onestop_id();
  inline void set_has_block_id();
  inline void set_has_trip_id();
  inline void set_has_short_name();
  inline void set_has_long_name();
  inline void set_has_headsign();
  inline void set_has_color();
  inline void set_has_text_color();
  inline void set_has_description();
  inline void set_has_operator_onestop_id();
  inline void set_has_operator_name();
  inline void set_has_operator_url();

  inline bool has_has_onestop_id() const;
  void clear_has_onestop_id();
  inline void clear_has_has_onestop_id();

  inline bool has_has_block_id() const;
  void clear_has_block_id();
  inline void clear_has_has_block_id();

  inline bool has_has_trip_id() const;
  void clear_has_trip_id();
  inline void clear_has_has_trip_id();

  inline bool has_has_short_name() const;
  void clear_has_short_name();
  inline void clear_has_has_short_name();

  inline bool has_has_long_name() const;
  void clear_has_long_name();
  inline void clear_has_has_long_name();

  inline bool has_has_headsign() const;
  void clear_has_headsign();
  inline void clear_has_has_headsign();

  inline bool has_has_color() const;
  void clear_has_color();
  inline void clear_has_has_color();

  inline bool has_has_text_color() const;
  void clear_has_text_color();
  inline void clear_has_has_text_color();

  inline bool has_has_description() const;
  void clear_has_description();
  inline void clear_has_has_description();

  inline bool has_has_operator_onestop_id() const;
  void clear_has_operator_onestop_id();
  inline void clear_has_has_operator_onestop_id();

  inline bool has_has_operator_name() const;
  void clear_has_operator_name();
  inline void clear_has_has_operator_name();

  inline bool has_has_operator_url() const;
  void clear_has_operator_url();
  inline void clear_has_has_operator_url();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo > transit_stops_;
  union HasOnestopIdUnion {
    HasOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr onestop_id_;
  } has_onestop_id_;
  union HasBlockIdUnion {
    HasBlockIdUnion() {}
    ::google::protobuf::uint32 block_id_;
  } has_block_id_;
  union HasTripIdUnion {
    HasTripIdUnion() {}
    ::google::protobuf::uint32 trip_id_;
  } has_trip_id_;
  union HasShortNameUnion {
    HasShortNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr short_name_;
  } has_short_name_;
  union HasLongNameUnion {
    HasLongNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr long_name_;
  } has_long_name_;
  union HasHeadsignUnion {
    HasHeadsignUnion() {}
    ::google::protobuf::internal::ArenaStringPtr headsign_;
  } has_headsign_;
  union HasColorUnion {
    HasColorUnion() {}
    ::google::protobuf::uint32 color_;
  } has_color_;
  union HasTextColorUnion {
    HasTextColorUnion() {}
    ::google::protobuf::uint32 text_color_;
  } has_text_color_;
  union HasDescriptionUnion {
    HasDescriptionUnion() {}
    ::google::protobuf::internal::ArenaStringPtr description_;
  } has_description_;
  union HasOperatorOnestopIdUnion {
    HasOperatorOnestopIdUnion() {}
    ::google::protobuf::internal::ArenaStringPtr operator_onestop_id_;
  } has_operator_onestop_id_;
  union HasOperatorNameUnion {
    HasOperatorNameUnion() {}
    ::google::protobuf::internal::ArenaStringPtr operator_name_;
  } has_operator_name_;
  union HasOperatorUrlUnion {
    HasOperatorUrlUnion() {}
    ::google::protobuf::internal::ArenaStringPtr operator_url_;
  } has_operator_url_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[12];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TransitRouteInfo* default_instance_;
};
// -------------------------------------------------------------------

class Pronunciation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Pronunciation) */ {
 public:
  Pronunciation();
  virtual ~Pronunciation();

  Pronunciation(const Pronunciation& from);

  inline Pronunciation& operator=(const Pronunciation& from) {
    CopyFrom(from);
    return *this;
  }

  static const Pronunciation& default_instance();

  enum HasAlphabetCase {
    kAlphabet = 1,
    HAS_ALPHABET_NOT_SET = 0,
  };

  enum HasValueCase {
    kValue = 2,
    HAS_VALUE_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Pronunciation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Pronunciation* other);

  // implements Message ----------------------------------------------

  inline Pronunciation* New() const { return New(NULL); }

  Pronunciation* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Pronunciation& from);
  void MergeFrom(const Pronunciation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pronunciation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Pronunciation_Alphabet Alphabet;
  static const Alphabet kIpa =
    Pronunciation_Alphabet_kIpa;
  static const Alphabet kXKatakana =
    Pronunciation_Alphabet_kXKatakana;
  static const Alphabet kXJeita =
    Pronunciation_Alphabet_kXJeita;
  static const Alphabet kNtSampa =
    Pronunciation_Alphabet_kNtSampa;
  static inline bool Alphabet_IsValid(int value) {
    return Pronunciation_Alphabet_IsValid(value);
  }
  static const Alphabet Alphabet_MIN =
    Pronunciation_Alphabet_Alphabet_MIN;
  static const Alphabet Alphabet_MAX =
    Pronunciation_Alphabet_Alphabet_MAX;
  static const int Alphabet_ARRAYSIZE =
    Pronunciation_Alphabet_Alphabet_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .valhalla.Pronunciation.Alphabet alphabet = 1;
  private:
  bool has_alphabet() const;
  public:
  void clear_alphabet();
  static const int kAlphabetFieldNumber = 1;
  ::valhalla::Pronunciation_Alphabet alphabet() const;
  void set_alphabet(::valhalla::Pronunciation_Alphabet value);

  // optional string value = 2;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  HasAlphabetCase has_alphabet_case() const;
  HasValueCase has_value_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Pronunciation)
 private:
  inline void set_has_alphabet();
  inline void set_has_value();

  inline bool has_has_alphabet() const;
  void clear_has_alphabet();
  inline void clear_has_has_alphabet();

  inline bool has_has_value() const;
  void clear_has_value();
  inline void clear_has_has_value();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasAlphabetUnion {
    HasAlphabetUnion() {}
    int alphabet_;
  } has_alphabet_;
  union HasValueUnion {
    HasValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
  } has_value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static Pronunciation* default_instance_;
};
// -------------------------------------------------------------------

class StreetName : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.StreetName) */ {
 public:
  StreetName();
  virtual ~StreetName();

  StreetName(const StreetName& from);

  inline StreetName& operator=(const StreetName& from) {
    CopyFrom(from);
    return *this;
  }

  static const StreetName& default_instance();

  enum HasValueCase {
    kValue = 1,
    HAS_VALUE_NOT_SET = 0,
  };

  enum HasIsRouteNumberCase {
    kIsRouteNumber = 2,
    HAS_IS_ROUTE_NUMBER_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StreetName* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StreetName* other);

  // implements Message ----------------------------------------------

  inline StreetName* New() const { return New(NULL); }

  StreetName* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StreetName& from);
  void MergeFrom(const StreetName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional bool is_route_number = 2;
  private:
  bool has_is_route_number() const;
  public:
  void clear_is_route_number();
  static const int kIsRouteNumberFieldNumber = 2;
  bool is_route_number() const;
  void set_is_route_number(bool value);

  // optional .valhalla.Pronunciation pronunciation = 3;
  bool has_pronunciation() const;
  void clear_pronunciation();
  static const int kPronunciationFieldNumber = 3;
  const ::valhalla::Pronunciation& pronunciation() const;
  ::valhalla::Pronunciation* mutable_pronunciation();
  ::valhalla::Pronunciation* release_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation);

  HasValueCase has_value_case() const;
  HasIsRouteNumberCase has_is_route_number_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.StreetName)
 private:
  inline void set_has_value();
  inline void set_has_is_route_number();

  inline bool has_has_value() const;
  void clear_has_value();
  inline void clear_has_has_value();

  inline bool has_has_is_route_number() const;
  void clear_has_is_route_number();
  inline void clear_has_has_is_route_number();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::valhalla::Pronunciation* pronunciation_;
  union HasValueUnion {
    HasValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
  } has_value_;
  union HasIsRouteNumberUnion {
    HasIsRouteNumberUnion() {}
    bool is_route_number_;
  } has_is_route_number_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static StreetName* default_instance_;
};
// -------------------------------------------------------------------

class TurnLane : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TurnLane) */ {
 public:
  TurnLane();
  virtual ~TurnLane();

  TurnLane(const TurnLane& from);

  inline TurnLane& operator=(const TurnLane& from) {
    CopyFrom(from);
    return *this;
  }

  static const TurnLane& default_instance();

  enum HasDirectionsMaskCase {
    kDirectionsMask = 1,
    HAS_DIRECTIONS_MASK_NOT_SET = 0,
  };

  enum HasStateCase {
    kState = 2,
    HAS_STATE_NOT_SET = 0,
  };

  enum HasActiveDirectionCase {
    kActiveDirection = 3,
    HAS_ACTIVE_DIRECTION_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TurnLane* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TurnLane* other);

  // implements Message ----------------------------------------------

  inline TurnLane* New() const { return New(NULL); }

  TurnLane* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TurnLane& from);
  void MergeFrom(const TurnLane& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TurnLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef TurnLane_State State;
  static const State kInvalid =
    TurnLane_State_kInvalid;
  static const State kValid =
    TurnLane_State_kValid;
  static const State kActive =
    TurnLane_State_kActive;
  static inline bool State_IsValid(int value) {
    return TurnLane_State_IsValid(value);
  }
  static const State State_MIN =
    TurnLane_State_State_MIN;
  static const State State_MAX =
    TurnLane_State_State_MAX;
  static const int State_ARRAYSIZE =
    TurnLane_State_State_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 directions_mask = 1;
  private:
  bool has_directions_mask() const;
  public:
  void clear_directions_mask();
  static const int kDirectionsMaskFieldNumber = 1;
  ::google::protobuf::uint32 directions_mask() const;
  void set_directions_mask(::google::protobuf::uint32 value);

  // optional .valhalla.TurnLane.State state = 2;
  private:
  bool has_state() const;
  public:
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::valhalla::TurnLane_State state() const;
  void set_state(::valhalla::TurnLane_State value);

  // optional uint32 active_direction = 3;
  private:
  bool has_active_direction() const;
  public:
  void clear_active_direction();
  static const int kActiveDirectionFieldNumber = 3;
  ::google::protobuf::uint32 active_direction() const;
  void set_active_direction(::google::protobuf::uint32 value);

  HasDirectionsMaskCase has_directions_mask_case() const;
  HasStateCase has_state_case() const;
  HasActiveDirectionCase has_active_direction_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TurnLane)
 private:
  inline void set_has_directions_mask();
  inline void set_has_state();
  inline void set_has_active_direction();

  inline bool has_has_directions_mask() const;
  void clear_has_directions_mask();
  inline void clear_has_has_directions_mask();

  inline bool has_has_state() const;
  void clear_has_state();
  inline void clear_has_has_state();

  inline bool has_has_active_direction() const;
  void clear_has_active_direction();
  inline void clear_has_has_active_direction();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasDirectionsMaskUnion {
    HasDirectionsMaskUnion() {}
    ::google::protobuf::uint32 directions_mask_;
  } has_directions_mask_;
  union HasStateUnion {
    HasStateUnion() {}
    int state_;
  } has_state_;
  union HasActiveDirectionUnion {
    HasActiveDirectionUnion() {}
    ::google::protobuf::uint32 active_direction_;
  } has_active_direction_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[3];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TurnLane* default_instance_;
};
// -------------------------------------------------------------------

class TaggedValue : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TaggedValue) */ {
 public:
  TaggedValue();
  virtual ~TaggedValue();

  TaggedValue(const TaggedValue& from);

  inline TaggedValue& operator=(const TaggedValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const TaggedValue& default_instance();

  enum HasValueCase {
    kValue = 1,
    HAS_VALUE_NOT_SET = 0,
  };

  enum HasTypeCase {
    kType = 2,
    HAS_TYPE_NOT_SET = 0,
  };

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TaggedValue* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TaggedValue* other);

  // implements Message ----------------------------------------------

  inline TaggedValue* New() const { return New(NULL); }

  TaggedValue* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TaggedValue& from);
  void MergeFrom(const TaggedValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaggedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef TaggedValue_Type Type;
  static const Type kNone =
    TaggedValue_Type_kNone;
  static const Type kLayer =
    TaggedValue_Type_kLayer;
  static const Type kPronunciation =
    TaggedValue_Type_kPronunciation;
  static const Type kBssInfo =
    TaggedValue_Type_kBssInfo;
  static const Type kTunnel =
    TaggedValue_Type_kTunnel;
  static const Type kBridge =
    TaggedValue_Type_kBridge;
  static inline bool Type_IsValid(int value) {
    return TaggedValue_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TaggedValue_Type_Type_MIN;
  static const Type Type_MAX =
    TaggedValue_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TaggedValue_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional .valhalla.TaggedValue.Type type = 2;
  private:
  bool has_type() const;
  public:
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::valhalla::TaggedValue_Type type() const;
  void set_type(::valhalla::TaggedValue_Type value);

  HasValueCase has_value_case() const;
  HasTypeCase has_type_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TaggedValue)
 private:
  inline void set_has_value();
  inline void set_has_type();

  inline bool has_has_value() const;
  void clear_has_value();
  inline void clear_has_has_value();

  inline bool has_has_type() const;
  void clear_has_type();
  inline void clear_has_has_type();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  union HasValueUnion {
    HasValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
  } has_value_;
  union HasTypeUnion {
    HasTypeUnion() {}
    int type_;
  } has_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_tripcommon_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_tripcommon_2eproto();
  #endif
  friend void protobuf_AssignDesc_tripcommon_2eproto();
  friend void protobuf_ShutdownFile_tripcommon_2eproto();

  void InitAsDefaultInstance();
  static TaggedValue* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LatLng

// optional double lat = 1;
inline bool LatLng::has_lat() const {
  return has_lat_case() == kLat;
}
inline void LatLng::set_has_lat() {
  _oneof_case_[0] = kLat;
}
inline void LatLng::clear_lat() {
  if (has_lat()) {
    has_lat_.lat_ = 0;
    clear_has_has_lat();
  }
}
inline double LatLng::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lat)
  if (has_lat()) {
    return has_lat_.lat_;
  }
  return 0;
}
inline void LatLng::set_lat(double value) {
  if (!has_lat()) {
    clear_has_lat();
    set_has_lat();
  }
  has_lat_.lat_ = value;
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lat)
}

// optional double lng = 2;
inline bool LatLng::has_lng() const {
  return has_lng_case() == kLng;
}
inline void LatLng::set_has_lng() {
  _oneof_case_[1] = kLng;
}
inline void LatLng::clear_lng() {
  if (has_lng()) {
    has_lng_.lng_ = 0;
    clear_has_has_lng();
  }
}
inline double LatLng::lng() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lng)
  if (has_lng()) {
    return has_lng_.lng_;
  }
  return 0;
}
inline void LatLng::set_lng(double value) {
  if (!has_lng()) {
    clear_has_lng();
    set_has_lng();
  }
  has_lng_.lng_ = value;
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lng)
}

inline bool LatLng::has_has_lat() const {
  return has_lat_case() != HAS_LAT_NOT_SET;
}
inline void LatLng::clear_has_has_lat() {
  _oneof_case_[0] = HAS_LAT_NOT_SET;
}
inline bool LatLng::has_has_lng() const {
  return has_lng_case() != HAS_LNG_NOT_SET;
}
inline void LatLng::clear_has_has_lng() {
  _oneof_case_[1] = HAS_LNG_NOT_SET;
}
inline LatLng::HasLatCase LatLng::has_lat_case() const {
  return LatLng::HasLatCase(_oneof_case_[0]);
}
inline LatLng::HasLngCase LatLng::has_lng_case() const {
  return LatLng::HasLngCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BoundingBox

// optional .valhalla.LatLng min_ll = 1;
inline bool BoundingBox::has_min_ll() const {
  return !_is_default_instance_ && min_ll_ != NULL;
}
inline void BoundingBox::clear_min_ll() {
  if (GetArenaNoVirtual() == NULL && min_ll_ != NULL) delete min_ll_;
  min_ll_ = NULL;
}
inline const ::valhalla::LatLng& BoundingBox::min_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.min_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return min_ll_ != NULL ? *min_ll_ : *default_instance().min_ll_;
#else
  return min_ll_ != NULL ? *min_ll_ : *default_instance_->min_ll_;
#endif
}
inline ::valhalla::LatLng* BoundingBox::mutable_min_ll() {
  
  if (min_ll_ == NULL) {
    min_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.min_ll)
  return min_ll_;
}
inline ::valhalla::LatLng* BoundingBox::release_min_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.min_ll)
  
  ::valhalla::LatLng* temp = min_ll_;
  min_ll_ = NULL;
  return temp;
}
inline void BoundingBox::set_allocated_min_ll(::valhalla::LatLng* min_ll) {
  delete min_ll_;
  min_ll_ = min_ll;
  if (min_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.min_ll)
}

// optional .valhalla.LatLng max_ll = 2;
inline bool BoundingBox::has_max_ll() const {
  return !_is_default_instance_ && max_ll_ != NULL;
}
inline void BoundingBox::clear_max_ll() {
  if (GetArenaNoVirtual() == NULL && max_ll_ != NULL) delete max_ll_;
  max_ll_ = NULL;
}
inline const ::valhalla::LatLng& BoundingBox::max_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.max_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return max_ll_ != NULL ? *max_ll_ : *default_instance().max_ll_;
#else
  return max_ll_ != NULL ? *max_ll_ : *default_instance_->max_ll_;
#endif
}
inline ::valhalla::LatLng* BoundingBox::mutable_max_ll() {
  
  if (max_ll_ == NULL) {
    max_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.max_ll)
  return max_ll_;
}
inline ::valhalla::LatLng* BoundingBox::release_max_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.max_ll)
  
  ::valhalla::LatLng* temp = max_ll_;
  max_ll_ = NULL;
  return temp;
}
inline void BoundingBox::set_allocated_max_ll(::valhalla::LatLng* max_ll) {
  delete max_ll_;
  max_ll_ = max_ll;
  if (max_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.max_ll)
}

// -------------------------------------------------------------------

// Location_PathEdge

// optional uint64 graph_id = 1;
inline bool Location_PathEdge::has_graph_id() const {
  return has_graph_id_case() == kGraphId;
}
inline void Location_PathEdge::set_has_graph_id() {
  _oneof_case_[0] = kGraphId;
}
inline void Location_PathEdge::clear_graph_id() {
  if (has_graph_id()) {
    has_graph_id_.graph_id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_graph_id();
  }
}
inline ::google::protobuf::uint64 Location_PathEdge::graph_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.graph_id)
  if (has_graph_id()) {
    return has_graph_id_.graph_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Location_PathEdge::set_graph_id(::google::protobuf::uint64 value) {
  if (!has_graph_id()) {
    clear_has_graph_id();
    set_has_graph_id();
  }
  has_graph_id_.graph_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.graph_id)
}

// optional double percent_along = 2;
inline bool Location_PathEdge::has_percent_along() const {
  return has_percent_along_case() == kPercentAlong;
}
inline void Location_PathEdge::set_has_percent_along() {
  _oneof_case_[1] = kPercentAlong;
}
inline void Location_PathEdge::clear_percent_along() {
  if (has_percent_along()) {
    has_percent_along_.percent_along_ = 0;
    clear_has_has_percent_along();
  }
}
inline double Location_PathEdge::percent_along() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.percent_along)
  if (has_percent_along()) {
    return has_percent_along_.percent_along_;
  }
  return 0;
}
inline void Location_PathEdge::set_percent_along(double value) {
  if (!has_percent_along()) {
    clear_has_percent_along();
    set_has_percent_along();
  }
  has_percent_along_.percent_along_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.percent_along)
}

// optional .valhalla.LatLng ll = 3;
inline bool Location_PathEdge::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
inline void Location_PathEdge::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
inline const ::valhalla::LatLng& Location_PathEdge::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
inline ::valhalla::LatLng* Location_PathEdge::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.ll)
  return ll_;
}
inline ::valhalla::LatLng* Location_PathEdge::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.PathEdge.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
inline void Location_PathEdge::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.PathEdge.ll)
}

// optional .valhalla.Location.SideOfStreet side_of_street = 4;
inline bool Location_PathEdge::has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
inline void Location_PathEdge::set_has_side_of_street() {
  _oneof_case_[2] = kSideOfStreet;
}
inline void Location_PathEdge::clear_side_of_street() {
  if (has_side_of_street()) {
    has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
inline ::valhalla::Location_SideOfStreet Location_PathEdge::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.side_of_street)
  if (has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
inline void Location_PathEdge::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  has_side_of_street_.side_of_street_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.side_of_street)
}

// optional double distance = 5;
inline bool Location_PathEdge::has_distance() const {
  return has_distance_case() == kDistance;
}
inline void Location_PathEdge::set_has_distance() {
  _oneof_case_[3] = kDistance;
}
inline void Location_PathEdge::clear_distance() {
  if (has_distance()) {
    has_distance_.distance_ = 0;
    clear_has_has_distance();
  }
}
inline double Location_PathEdge::distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.distance)
  if (has_distance()) {
    return has_distance_.distance_;
  }
  return 0;
}
inline void Location_PathEdge::set_distance(double value) {
  if (!has_distance()) {
    clear_has_distance();
    set_has_distance();
  }
  has_distance_.distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.distance)
}

// optional int32 minimum_reachability = 6;
inline bool Location_PathEdge::has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
inline void Location_PathEdge::set_has_minimum_reachability() {
  _oneof_case_[4] = kMinimumReachability;
}
inline void Location_PathEdge::clear_minimum_reachability() {
  if (has_minimum_reachability()) {
    has_minimum_reachability_.minimum_reachability_ = 0;
    clear_has_has_minimum_reachability();
  }
}
inline ::google::protobuf::int32 Location_PathEdge::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.minimum_reachability)
  if (has_minimum_reachability()) {
    return has_minimum_reachability_.minimum_reachability_;
  }
  return 0;
}
inline void Location_PathEdge::set_minimum_reachability(::google::protobuf::int32 value) {
  if (!has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  has_minimum_reachability_.minimum_reachability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.minimum_reachability)
}

// optional bool begin_node = 7;
inline bool Location_PathEdge::has_begin_node() const {
  return has_begin_node_case() == kBeginNode;
}
inline void Location_PathEdge::set_has_begin_node() {
  _oneof_case_[5] = kBeginNode;
}
inline void Location_PathEdge::clear_begin_node() {
  if (has_begin_node()) {
    has_begin_node_.begin_node_ = false;
    clear_has_has_begin_node();
  }
}
inline bool Location_PathEdge::begin_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.begin_node)
  if (has_begin_node()) {
    return has_begin_node_.begin_node_;
  }
  return false;
}
inline void Location_PathEdge::set_begin_node(bool value) {
  if (!has_begin_node()) {
    clear_has_begin_node();
    set_has_begin_node();
  }
  has_begin_node_.begin_node_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.begin_node)
}

// optional bool end_node = 8;
inline bool Location_PathEdge::has_end_node() const {
  return has_end_node_case() == kEndNode;
}
inline void Location_PathEdge::set_has_end_node() {
  _oneof_case_[6] = kEndNode;
}
inline void Location_PathEdge::clear_end_node() {
  if (has_end_node()) {
    has_end_node_.end_node_ = false;
    clear_has_has_end_node();
  }
}
inline bool Location_PathEdge::end_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.end_node)
  if (has_end_node()) {
    return has_end_node_.end_node_;
  }
  return false;
}
inline void Location_PathEdge::set_end_node(bool value) {
  if (!has_end_node()) {
    clear_has_end_node();
    set_has_end_node();
  }
  has_end_node_.end_node_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.end_node)
}

// repeated string names = 10;
inline int Location_PathEdge::names_size() const {
  return names_.size();
}
inline void Location_PathEdge::clear_names() {
  names_.Clear();
}
inline const ::std::string& Location_PathEdge::names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.names)
  return names_.Get(index);
}
inline ::std::string* Location_PathEdge::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.names)
  return names_.Mutable(index);
}
inline void Location_PathEdge::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.names)
  names_.Mutable(index)->assign(value);
}
inline void Location_PathEdge::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.PathEdge.names)
}
inline ::std::string* Location_PathEdge::add_names() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Location.PathEdge.names)
  return names_.Add();
}
inline void Location_PathEdge::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Location.PathEdge.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Location_PathEdge::names() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.PathEdge.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Location_PathEdge::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.PathEdge.names)
  return &names_;
}

// optional int32 outbound_reach = 11;
inline bool Location_PathEdge::has_outbound_reach() const {
  return has_outbound_reach_case() == kOutboundReach;
}
inline void Location_PathEdge::set_has_outbound_reach() {
  _oneof_case_[7] = kOutboundReach;
}
inline void Location_PathEdge::clear_outbound_reach() {
  if (has_outbound_reach()) {
    has_outbound_reach_.outbound_reach_ = 0;
    clear_has_has_outbound_reach();
  }
}
inline ::google::protobuf::int32 Location_PathEdge::outbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.outbound_reach)
  if (has_outbound_reach()) {
    return has_outbound_reach_.outbound_reach_;
  }
  return 0;
}
inline void Location_PathEdge::set_outbound_reach(::google::protobuf::int32 value) {
  if (!has_outbound_reach()) {
    clear_has_outbound_reach();
    set_has_outbound_reach();
  }
  has_outbound_reach_.outbound_reach_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.outbound_reach)
}

// optional int32 inbound_reach = 12;
inline bool Location_PathEdge::has_inbound_reach() const {
  return has_inbound_reach_case() == kInboundReach;
}
inline void Location_PathEdge::set_has_inbound_reach() {
  _oneof_case_[8] = kInboundReach;
}
inline void Location_PathEdge::clear_inbound_reach() {
  if (has_inbound_reach()) {
    has_inbound_reach_.inbound_reach_ = 0;
    clear_has_has_inbound_reach();
  }
}
inline ::google::protobuf::int32 Location_PathEdge::inbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.inbound_reach)
  if (has_inbound_reach()) {
    return has_inbound_reach_.inbound_reach_;
  }
  return 0;
}
inline void Location_PathEdge::set_inbound_reach(::google::protobuf::int32 value) {
  if (!has_inbound_reach()) {
    clear_has_inbound_reach();
    set_has_inbound_reach();
  }
  has_inbound_reach_.inbound_reach_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.inbound_reach)
}

// optional float heading = 13;
inline bool Location_PathEdge::has_heading() const {
  return has_heading_case() == kHeading;
}
inline void Location_PathEdge::set_has_heading() {
  _oneof_case_[9] = kHeading;
}
inline void Location_PathEdge::clear_heading() {
  if (has_heading()) {
    has_heading_.heading_ = 0;
    clear_has_has_heading();
  }
}
inline float Location_PathEdge::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.heading)
  if (has_heading()) {
    return has_heading_.heading_;
  }
  return 0;
}
inline void Location_PathEdge::set_heading(float value) {
  if (!has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  has_heading_.heading_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.heading)
}

inline bool Location_PathEdge::has_has_graph_id() const {
  return has_graph_id_case() != HAS_GRAPH_ID_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_graph_id() {
  _oneof_case_[0] = HAS_GRAPH_ID_NOT_SET;
}
inline bool Location_PathEdge::has_has_percent_along() const {
  return has_percent_along_case() != HAS_PERCENT_ALONG_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_percent_along() {
  _oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}
inline bool Location_PathEdge::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_side_of_street() {
  _oneof_case_[2] = HAS_SIDE_OF_STREET_NOT_SET;
}
inline bool Location_PathEdge::has_has_distance() const {
  return has_distance_case() != HAS_DISTANCE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_distance() {
  _oneof_case_[3] = HAS_DISTANCE_NOT_SET;
}
inline bool Location_PathEdge::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_minimum_reachability() {
  _oneof_case_[4] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline bool Location_PathEdge::has_has_begin_node() const {
  return has_begin_node_case() != HAS_BEGIN_NODE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_begin_node() {
  _oneof_case_[5] = HAS_BEGIN_NODE_NOT_SET;
}
inline bool Location_PathEdge::has_has_end_node() const {
  return has_end_node_case() != HAS_END_NODE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_end_node() {
  _oneof_case_[6] = HAS_END_NODE_NOT_SET;
}
inline bool Location_PathEdge::has_has_outbound_reach() const {
  return has_outbound_reach_case() != HAS_OUTBOUND_REACH_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_outbound_reach() {
  _oneof_case_[7] = HAS_OUTBOUND_REACH_NOT_SET;
}
inline bool Location_PathEdge::has_has_inbound_reach() const {
  return has_inbound_reach_case() != HAS_INBOUND_REACH_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_inbound_reach() {
  _oneof_case_[8] = HAS_INBOUND_REACH_NOT_SET;
}
inline bool Location_PathEdge::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_heading() {
  _oneof_case_[9] = HAS_HEADING_NOT_SET;
}
inline Location_PathEdge::HasGraphIdCase Location_PathEdge::has_graph_id_case() const {
  return Location_PathEdge::HasGraphIdCase(_oneof_case_[0]);
}
inline Location_PathEdge::HasPercentAlongCase Location_PathEdge::has_percent_along_case() const {
  return Location_PathEdge::HasPercentAlongCase(_oneof_case_[1]);
}
inline Location_PathEdge::HasSideOfStreetCase Location_PathEdge::has_side_of_street_case() const {
  return Location_PathEdge::HasSideOfStreetCase(_oneof_case_[2]);
}
inline Location_PathEdge::HasDistanceCase Location_PathEdge::has_distance_case() const {
  return Location_PathEdge::HasDistanceCase(_oneof_case_[3]);
}
inline Location_PathEdge::HasMinimumReachabilityCase Location_PathEdge::has_minimum_reachability_case() const {
  return Location_PathEdge::HasMinimumReachabilityCase(_oneof_case_[4]);
}
inline Location_PathEdge::HasBeginNodeCase Location_PathEdge::has_begin_node_case() const {
  return Location_PathEdge::HasBeginNodeCase(_oneof_case_[5]);
}
inline Location_PathEdge::HasEndNodeCase Location_PathEdge::has_end_node_case() const {
  return Location_PathEdge::HasEndNodeCase(_oneof_case_[6]);
}
inline Location_PathEdge::HasOutboundReachCase Location_PathEdge::has_outbound_reach_case() const {
  return Location_PathEdge::HasOutboundReachCase(_oneof_case_[7]);
}
inline Location_PathEdge::HasInboundReachCase Location_PathEdge::has_inbound_reach_case() const {
  return Location_PathEdge::HasInboundReachCase(_oneof_case_[8]);
}
inline Location_PathEdge::HasHeadingCase Location_PathEdge::has_heading_case() const {
  return Location_PathEdge::HasHeadingCase(_oneof_case_[9]);
}
// -------------------------------------------------------------------

// Location_SearchFilter

// optional .valhalla.RoadClass min_road_class = 1;
inline bool Location_SearchFilter::has_min_road_class() const {
  return has_min_road_class_case() == kMinRoadClass;
}
inline void Location_SearchFilter::set_has_min_road_class() {
  _oneof_case_[0] = kMinRoadClass;
}
inline void Location_SearchFilter::clear_min_road_class() {
  if (has_min_road_class()) {
    has_min_road_class_.min_road_class_ = 0;
    clear_has_has_min_road_class();
  }
}
inline ::valhalla::RoadClass Location_SearchFilter::min_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.min_road_class)
  if (has_min_road_class()) {
    return static_cast< ::valhalla::RoadClass >(has_min_road_class_.min_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
inline void Location_SearchFilter::set_min_road_class(::valhalla::RoadClass value) {
  if (!has_min_road_class()) {
    clear_has_min_road_class();
    set_has_min_road_class();
  }
  has_min_road_class_.min_road_class_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.min_road_class)
}

// optional .valhalla.RoadClass max_road_class = 2;
inline bool Location_SearchFilter::has_max_road_class() const {
  return has_max_road_class_case() == kMaxRoadClass;
}
inline void Location_SearchFilter::set_has_max_road_class() {
  _oneof_case_[1] = kMaxRoadClass;
}
inline void Location_SearchFilter::clear_max_road_class() {
  if (has_max_road_class()) {
    has_max_road_class_.max_road_class_ = 0;
    clear_has_has_max_road_class();
  }
}
inline ::valhalla::RoadClass Location_SearchFilter::max_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.max_road_class)
  if (has_max_road_class()) {
    return static_cast< ::valhalla::RoadClass >(has_max_road_class_.max_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
inline void Location_SearchFilter::set_max_road_class(::valhalla::RoadClass value) {
  if (!has_max_road_class()) {
    clear_has_max_road_class();
    set_has_max_road_class();
  }
  has_max_road_class_.max_road_class_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.max_road_class)
}

// optional bool exclude_tunnel = 3;
inline bool Location_SearchFilter::has_exclude_tunnel() const {
  return has_exclude_tunnel_case() == kExcludeTunnel;
}
inline void Location_SearchFilter::set_has_exclude_tunnel() {
  _oneof_case_[2] = kExcludeTunnel;
}
inline void Location_SearchFilter::clear_exclude_tunnel() {
  if (has_exclude_tunnel()) {
    has_exclude_tunnel_.exclude_tunnel_ = false;
    clear_has_has_exclude_tunnel();
  }
}
inline bool Location_SearchFilter::exclude_tunnel() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_tunnel)
  if (has_exclude_tunnel()) {
    return has_exclude_tunnel_.exclude_tunnel_;
  }
  return false;
}
inline void Location_SearchFilter::set_exclude_tunnel(bool value) {
  if (!has_exclude_tunnel()) {
    clear_has_exclude_tunnel();
    set_has_exclude_tunnel();
  }
  has_exclude_tunnel_.exclude_tunnel_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_tunnel)
}

// optional bool exclude_bridge = 4;
inline bool Location_SearchFilter::has_exclude_bridge() const {
  return has_exclude_bridge_case() == kExcludeBridge;
}
inline void Location_SearchFilter::set_has_exclude_bridge() {
  _oneof_case_[3] = kExcludeBridge;
}
inline void Location_SearchFilter::clear_exclude_bridge() {
  if (has_exclude_bridge()) {
    has_exclude_bridge_.exclude_bridge_ = false;
    clear_has_has_exclude_bridge();
  }
}
inline bool Location_SearchFilter::exclude_bridge() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_bridge)
  if (has_exclude_bridge()) {
    return has_exclude_bridge_.exclude_bridge_;
  }
  return false;
}
inline void Location_SearchFilter::set_exclude_bridge(bool value) {
  if (!has_exclude_bridge()) {
    clear_has_exclude_bridge();
    set_has_exclude_bridge();
  }
  has_exclude_bridge_.exclude_bridge_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_bridge)
}

// optional bool exclude_ramp = 5;
inline bool Location_SearchFilter::has_exclude_ramp() const {
  return has_exclude_ramp_case() == kExcludeRamp;
}
inline void Location_SearchFilter::set_has_exclude_ramp() {
  _oneof_case_[4] = kExcludeRamp;
}
inline void Location_SearchFilter::clear_exclude_ramp() {
  if (has_exclude_ramp()) {
    has_exclude_ramp_.exclude_ramp_ = false;
    clear_has_has_exclude_ramp();
  }
}
inline bool Location_SearchFilter::exclude_ramp() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_ramp)
  if (has_exclude_ramp()) {
    return has_exclude_ramp_.exclude_ramp_;
  }
  return false;
}
inline void Location_SearchFilter::set_exclude_ramp(bool value) {
  if (!has_exclude_ramp()) {
    clear_has_exclude_ramp();
    set_has_exclude_ramp();
  }
  has_exclude_ramp_.exclude_ramp_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_ramp)
}

// optional bool exclude_closures = 6;
inline bool Location_SearchFilter::has_exclude_closures() const {
  return has_exclude_closures_case() == kExcludeClosures;
}
inline void Location_SearchFilter::set_has_exclude_closures() {
  _oneof_case_[5] = kExcludeClosures;
}
inline void Location_SearchFilter::clear_exclude_closures() {
  if (has_exclude_closures()) {
    has_exclude_closures_.exclude_closures_ = false;
    clear_has_has_exclude_closures();
  }
}
inline bool Location_SearchFilter::exclude_closures() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_closures)
  if (has_exclude_closures()) {
    return has_exclude_closures_.exclude_closures_;
  }
  return false;
}
inline void Location_SearchFilter::set_exclude_closures(bool value) {
  if (!has_exclude_closures()) {
    clear_has_exclude_closures();
    set_has_exclude_closures();
  }
  has_exclude_closures_.exclude_closures_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_closures)
}

inline bool Location_SearchFilter::has_has_min_road_class() const {
  return has_min_road_class_case() != HAS_MIN_ROAD_CLASS_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_min_road_class() {
  _oneof_case_[0] = HAS_MIN_ROAD_CLASS_NOT_SET;
}
inline bool Location_SearchFilter::has_has_max_road_class() const {
  return has_max_road_class_case() != HAS_MAX_ROAD_CLASS_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_max_road_class() {
  _oneof_case_[1] = HAS_MAX_ROAD_CLASS_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_tunnel() const {
  return has_exclude_tunnel_case() != HAS_EXCLUDE_TUNNEL_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_tunnel() {
  _oneof_case_[2] = HAS_EXCLUDE_TUNNEL_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_bridge() const {
  return has_exclude_bridge_case() != HAS_EXCLUDE_BRIDGE_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_bridge() {
  _oneof_case_[3] = HAS_EXCLUDE_BRIDGE_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_ramp() const {
  return has_exclude_ramp_case() != HAS_EXCLUDE_RAMP_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_ramp() {
  _oneof_case_[4] = HAS_EXCLUDE_RAMP_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_closures() const {
  return has_exclude_closures_case() != HAS_EXCLUDE_CLOSURES_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_closures() {
  _oneof_case_[5] = HAS_EXCLUDE_CLOSURES_NOT_SET;
}
inline Location_SearchFilter::HasMinRoadClassCase Location_SearchFilter::has_min_road_class_case() const {
  return Location_SearchFilter::HasMinRoadClassCase(_oneof_case_[0]);
}
inline Location_SearchFilter::HasMaxRoadClassCase Location_SearchFilter::has_max_road_class_case() const {
  return Location_SearchFilter::HasMaxRoadClassCase(_oneof_case_[1]);
}
inline Location_SearchFilter::HasExcludeTunnelCase Location_SearchFilter::has_exclude_tunnel_case() const {
  return Location_SearchFilter::HasExcludeTunnelCase(_oneof_case_[2]);
}
inline Location_SearchFilter::HasExcludeBridgeCase Location_SearchFilter::has_exclude_bridge_case() const {
  return Location_SearchFilter::HasExcludeBridgeCase(_oneof_case_[3]);
}
inline Location_SearchFilter::HasExcludeRampCase Location_SearchFilter::has_exclude_ramp_case() const {
  return Location_SearchFilter::HasExcludeRampCase(_oneof_case_[4]);
}
inline Location_SearchFilter::HasExcludeClosuresCase Location_SearchFilter::has_exclude_closures_case() const {
  return Location_SearchFilter::HasExcludeClosuresCase(_oneof_case_[5]);
}
// -------------------------------------------------------------------

// Location

// optional .valhalla.LatLng ll = 1;
inline bool Location::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
inline void Location::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
inline const ::valhalla::LatLng& Location::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
inline ::valhalla::LatLng* Location::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.ll)
  return ll_;
}
inline ::valhalla::LatLng* Location::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
inline void Location::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.ll)
}

// optional .valhalla.Location.Type type = 2;
inline bool Location::has_type() const {
  return has_type_case() == kType;
}
inline void Location::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void Location::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::Location_Type Location::type() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.type)
  if (has_type()) {
    return static_cast< ::valhalla::Location_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::Location_Type >(0);
}
inline void Location::set_type(::valhalla::Location_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.type)
}

// optional uint32 heading = 3;
inline bool Location::has_heading() const {
  return has_heading_case() == kHeading;
}
inline void Location::set_has_heading() {
  _oneof_case_[1] = kHeading;
}
inline void Location::clear_heading() {
  if (has_heading()) {
    has_heading_.heading_ = 0u;
    clear_has_has_heading();
  }
}
inline ::google::protobuf::uint32 Location::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading)
  if (has_heading()) {
    return has_heading_.heading_;
  }
  return 0u;
}
inline void Location::set_heading(::google::protobuf::uint32 value) {
  if (!has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  has_heading_.heading_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.heading)
}

// optional string name = 4;
inline bool Location::has_name() const {
  return has_name_case() == kName;
}
inline void Location::set_has_name() {
  _oneof_case_[2] = kName;
}
inline void Location::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
inline const ::std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.name)
}
inline void Location::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.name)
}
inline void Location::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.name)
}
inline ::std::string* Location::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.Location.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.name)
}

// optional string street = 5;
inline bool Location::has_street() const {
  return has_street_case() == kStreet;
}
inline void Location::set_has_street() {
  _oneof_case_[3] = kStreet;
}
inline void Location::clear_street() {
  if (has_street()) {
    has_street_.street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_street();
  }
}
inline const ::std::string& Location::street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street)
  if (has_street()) {
    return has_street_.street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_street(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.street)
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.street)
}
inline void Location::set_street(const char* value) {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.street)
}
inline void Location::set_street(const char* value, size_t size) {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_street_.street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.street)
}
inline ::std::string* Location::mutable_street() {
  if (!has_street()) {
    clear_has_street();
    set_has_street();
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.street)
  return has_street_.street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_street() {
  // @@protoc_insertion_point(field_release:valhalla.Location.street)
  if (has_street()) {
    clear_has_has_street();
    return has_street_.street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_street(::std::string* street) {
  if (!has_street()) {
    has_street_.street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_street();
  if (street != NULL) {
    set_has_street();
    has_street_.street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        street);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.street)
}

// optional string city = 6;
inline bool Location::has_city() const {
  return has_city_case() == kCity;
}
inline void Location::set_has_city() {
  _oneof_case_[4] = kCity;
}
inline void Location::clear_city() {
  if (has_city()) {
    has_city_.city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_city();
  }
}
inline const ::std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.city)
  if (has_city()) {
    return has_city_.city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_city(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.city)
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.city)
}
inline void Location::set_city(const char* value) {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.city)
}
inline void Location::set_city(const char* value, size_t size) {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_city_.city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.city)
}
inline ::std::string* Location::mutable_city() {
  if (!has_city()) {
    clear_has_city();
    set_has_city();
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.city)
  return has_city_.city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_city() {
  // @@protoc_insertion_point(field_release:valhalla.Location.city)
  if (has_city()) {
    clear_has_has_city();
    return has_city_.city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_city(::std::string* city) {
  if (!has_city()) {
    has_city_.city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_city();
  if (city != NULL) {
    set_has_city();
    has_city_.city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        city);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.city)
}

// optional string state = 7;
inline bool Location::has_state() const {
  return has_state_case() == kState;
}
inline void Location::set_has_state() {
  _oneof_case_[5] = kState;
}
inline void Location::clear_state() {
  if (has_state()) {
    has_state_.state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_state();
  }
}
inline const ::std::string& Location::state() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.state)
  if (has_state()) {
    return has_state_.state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_state(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.state)
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.state)
}
inline void Location::set_state(const char* value) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.state)
}
inline void Location::set_state(const char* value, size_t size) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_state_.state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.state)
}
inline ::std::string* Location::mutable_state() {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.state)
  return has_state_.state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_state() {
  // @@protoc_insertion_point(field_release:valhalla.Location.state)
  if (has_state()) {
    clear_has_has_state();
    return has_state_.state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_state(::std::string* state) {
  if (!has_state()) {
    has_state_.state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_state();
  if (state != NULL) {
    set_has_state();
    has_state_.state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        state);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.state)
}

// optional string postal_code = 8;
inline bool Location::has_postal_code() const {
  return has_postal_code_case() == kPostalCode;
}
inline void Location::set_has_postal_code() {
  _oneof_case_[6] = kPostalCode;
}
inline void Location::clear_postal_code() {
  if (has_postal_code()) {
    has_postal_code_.postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_postal_code();
  }
}
inline const ::std::string& Location::postal_code() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.postal_code)
  if (has_postal_code()) {
    return has_postal_code_.postal_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_postal_code(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.postal_code)
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.postal_code)
}
inline void Location::set_postal_code(const char* value) {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.postal_code)
}
inline void Location::set_postal_code(const char* value, size_t size) {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_postal_code_.postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.postal_code)
}
inline ::std::string* Location::mutable_postal_code() {
  if (!has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.postal_code)
  return has_postal_code_.postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_postal_code() {
  // @@protoc_insertion_point(field_release:valhalla.Location.postal_code)
  if (has_postal_code()) {
    clear_has_has_postal_code();
    return has_postal_code_.postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_postal_code(::std::string* postal_code) {
  if (!has_postal_code()) {
    has_postal_code_.postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_postal_code();
  if (postal_code != NULL) {
    set_has_postal_code();
    has_postal_code_.postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        postal_code);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.postal_code)
}

// optional string country = 9;
inline bool Location::has_country() const {
  return has_country_case() == kCountry;
}
inline void Location::set_has_country() {
  _oneof_case_[7] = kCountry;
}
inline void Location::clear_country() {
  if (has_country()) {
    has_country_.country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_country();
  }
}
inline const ::std::string& Location::country() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.country)
  if (has_country()) {
    return has_country_.country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_country(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.country)
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.country)
}
inline void Location::set_country(const char* value) {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.country)
}
inline void Location::set_country(const char* value, size_t size) {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_country_.country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.country)
}
inline ::std::string* Location::mutable_country() {
  if (!has_country()) {
    clear_has_country();
    set_has_country();
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.country)
  return has_country_.country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_country() {
  // @@protoc_insertion_point(field_release:valhalla.Location.country)
  if (has_country()) {
    clear_has_has_country();
    return has_country_.country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_country(::std::string* country) {
  if (!has_country()) {
    has_country_.country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_country();
  if (country != NULL) {
    set_has_country();
    has_country_.country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        country);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.country)
}

// optional string phone = 10;
inline bool Location::has_phone() const {
  return has_phone_case() == kPhone;
}
inline void Location::set_has_phone() {
  _oneof_case_[8] = kPhone;
}
inline void Location::clear_phone() {
  if (has_phone()) {
    has_phone_.phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_phone();
  }
}
inline const ::std::string& Location::phone() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.phone)
  if (has_phone()) {
    return has_phone_.phone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_phone(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.phone)
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.phone)
}
inline void Location::set_phone(const char* value) {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.phone)
}
inline void Location::set_phone(const char* value, size_t size) {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_phone_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.phone)
}
inline ::std::string* Location::mutable_phone() {
  if (!has_phone()) {
    clear_has_phone();
    set_has_phone();
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.phone)
  return has_phone_.phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_phone() {
  // @@protoc_insertion_point(field_release:valhalla.Location.phone)
  if (has_phone()) {
    clear_has_has_phone();
    return has_phone_.phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_phone(::std::string* phone) {
  if (!has_phone()) {
    has_phone_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_phone();
  if (phone != NULL) {
    set_has_phone();
    has_phone_.phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        phone);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.phone)
}

// optional string url = 11;
inline bool Location::has_url() const {
  return has_url_case() == kUrl;
}
inline void Location::set_has_url() {
  _oneof_case_[9] = kUrl;
}
inline void Location::clear_url() {
  if (has_url()) {
    has_url_.url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_url();
  }
}
inline const ::std::string& Location::url() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.url)
  if (has_url()) {
    return has_url_.url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.url)
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.url)
}
inline void Location::set_url(const char* value) {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.url)
}
inline void Location::set_url(const char* value, size_t size) {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_url_.url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.url)
}
inline ::std::string* Location::mutable_url() {
  if (!has_url()) {
    clear_has_url();
    set_has_url();
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.url)
  return has_url_.url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_url() {
  // @@protoc_insertion_point(field_release:valhalla.Location.url)
  if (has_url()) {
    clear_has_has_url();
    return has_url_.url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_url(::std::string* url) {
  if (!has_url()) {
    has_url_.url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_url();
  if (url != NULL) {
    set_has_url();
    has_url_.url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        url);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.url)
}

// optional string date_time = 12;
inline bool Location::has_date_time() const {
  return has_date_time_case() == kDateTime;
}
inline void Location::set_has_date_time() {
  _oneof_case_[10] = kDateTime;
}
inline void Location::clear_date_time() {
  if (has_date_time()) {
    has_date_time_.date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_date_time();
  }
}
inline const ::std::string& Location::date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.date_time)
  if (has_date_time()) {
    return has_date_time_.date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Location::set_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Location.date_time)
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Location.date_time)
}
inline void Location::set_date_time(const char* value) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Location.date_time)
}
inline void Location::set_date_time(const char* value, size_t size) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.date_time)
}
inline ::std::string* Location::mutable_date_time() {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.date_time)
  return has_date_time_.date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Location::release_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.Location.date_time)
  if (has_date_time()) {
    clear_has_has_date_time();
    return has_date_time_.date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Location::set_allocated_date_time(::std::string* date_time) {
  if (!has_date_time()) {
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_date_time();
  if (date_time != NULL) {
    set_has_date_time();
    has_date_time_.date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.date_time)
}

// optional .valhalla.Location.SideOfStreet side_of_street = 13;
inline bool Location::has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
inline void Location::set_has_side_of_street() {
  _oneof_case_[11] = kSideOfStreet;
}
inline void Location::clear_side_of_street() {
  if (has_side_of_street()) {
    has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
inline ::valhalla::Location_SideOfStreet Location::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.side_of_street)
  if (has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
inline void Location::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  has_side_of_street_.side_of_street_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.side_of_street)
}

// optional uint32 heading_tolerance = 14;
inline bool Location::has_heading_tolerance() const {
  return has_heading_tolerance_case() == kHeadingTolerance;
}
inline void Location::set_has_heading_tolerance() {
  _oneof_case_[12] = kHeadingTolerance;
}
inline void Location::clear_heading_tolerance() {
  if (has_heading_tolerance()) {
    has_heading_tolerance_.heading_tolerance_ = 0u;
    clear_has_has_heading_tolerance();
  }
}
inline ::google::protobuf::uint32 Location::heading_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading_tolerance)
  if (has_heading_tolerance()) {
    return has_heading_tolerance_.heading_tolerance_;
  }
  return 0u;
}
inline void Location::set_heading_tolerance(::google::protobuf::uint32 value) {
  if (!has_heading_tolerance()) {
    clear_has_heading_tolerance();
    set_has_heading_tolerance();
  }
  has_heading_tolerance_.heading_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.heading_tolerance)
}

// optional uint32 node_snap_tolerance = 15;
inline bool Location::has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() == kNodeSnapTolerance;
}
inline void Location::set_has_node_snap_tolerance() {
  _oneof_case_[13] = kNodeSnapTolerance;
}
inline void Location::clear_node_snap_tolerance() {
  if (has_node_snap_tolerance()) {
    has_node_snap_tolerance_.node_snap_tolerance_ = 0u;
    clear_has_has_node_snap_tolerance();
  }
}
inline ::google::protobuf::uint32 Location::node_snap_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.node_snap_tolerance)
  if (has_node_snap_tolerance()) {
    return has_node_snap_tolerance_.node_snap_tolerance_;
  }
  return 0u;
}
inline void Location::set_node_snap_tolerance(::google::protobuf::uint32 value) {
  if (!has_node_snap_tolerance()) {
    clear_has_node_snap_tolerance();
    set_has_node_snap_tolerance();
  }
  has_node_snap_tolerance_.node_snap_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.node_snap_tolerance)
}

// optional uint64 way_id = 16;
inline bool Location::has_way_id() const {
  return has_way_id_case() == kWayId;
}
inline void Location::set_has_way_id() {
  _oneof_case_[14] = kWayId;
}
inline void Location::clear_way_id() {
  if (has_way_id()) {
    has_way_id_.way_id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_way_id();
  }
}
inline ::google::protobuf::uint64 Location::way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.way_id)
  if (has_way_id()) {
    return has_way_id_.way_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Location::set_way_id(::google::protobuf::uint64 value) {
  if (!has_way_id()) {
    clear_has_way_id();
    set_has_way_id();
  }
  has_way_id_.way_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.way_id)
}

// optional uint32 minimum_reachability = 17;
inline bool Location::has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
inline void Location::set_has_minimum_reachability() {
  _oneof_case_[15] = kMinimumReachability;
}
inline void Location::clear_minimum_reachability() {
  if (has_minimum_reachability()) {
    has_minimum_reachability_.minimum_reachability_ = 0u;
    clear_has_has_minimum_reachability();
  }
}
inline ::google::protobuf::uint32 Location::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.minimum_reachability)
  if (has_minimum_reachability()) {
    return has_minimum_reachability_.minimum_reachability_;
  }
  return 0u;
}
inline void Location::set_minimum_reachability(::google::protobuf::uint32 value) {
  if (!has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  has_minimum_reachability_.minimum_reachability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.minimum_reachability)
}

// optional uint32 radius = 18;
inline bool Location::has_radius() const {
  return has_radius_case() == kRadius;
}
inline void Location::set_has_radius() {
  _oneof_case_[16] = kRadius;
}
inline void Location::clear_radius() {
  if (has_radius()) {
    has_radius_.radius_ = 0u;
    clear_has_has_radius();
  }
}
inline ::google::protobuf::uint32 Location::radius() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.radius)
  if (has_radius()) {
    return has_radius_.radius_;
  }
  return 0u;
}
inline void Location::set_radius(::google::protobuf::uint32 value) {
  if (!has_radius()) {
    clear_has_radius();
    set_has_radius();
  }
  has_radius_.radius_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.radius)
}

// optional uint32 accuracy = 19;
inline bool Location::has_accuracy() const {
  return has_accuracy_case() == kAccuracy;
}
inline void Location::set_has_accuracy() {
  _oneof_case_[17] = kAccuracy;
}
inline void Location::clear_accuracy() {
  if (has_accuracy()) {
    has_accuracy_.accuracy_ = 0u;
    clear_has_has_accuracy();
  }
}
inline ::google::protobuf::uint32 Location::accuracy() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.accuracy)
  if (has_accuracy()) {
    return has_accuracy_.accuracy_;
  }
  return 0u;
}
inline void Location::set_accuracy(::google::protobuf::uint32 value) {
  if (!has_accuracy()) {
    clear_has_accuracy();
    set_has_accuracy();
  }
  has_accuracy_.accuracy_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.accuracy)
}

// optional double time = 20;
inline bool Location::has_time() const {
  return has_time_case() == kTime;
}
inline void Location::set_has_time() {
  _oneof_case_[18] = kTime;
}
inline void Location::clear_time() {
  if (has_time()) {
    has_time_.time_ = 0;
    clear_has_has_time();
  }
}
inline double Location::time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.time)
  if (has_time()) {
    return has_time_.time_;
  }
  return 0;
}
inline void Location::set_time(double value) {
  if (!has_time()) {
    clear_has_time();
    set_has_time();
  }
  has_time_.time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.time)
}

// optional bool skip_ranking_candidates = 21;
inline bool Location::has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() == kSkipRankingCandidates;
}
inline void Location::set_has_skip_ranking_candidates() {
  _oneof_case_[19] = kSkipRankingCandidates;
}
inline void Location::clear_skip_ranking_candidates() {
  if (has_skip_ranking_candidates()) {
    has_skip_ranking_candidates_.skip_ranking_candidates_ = false;
    clear_has_has_skip_ranking_candidates();
  }
}
inline bool Location::skip_ranking_candidates() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.skip_ranking_candidates)
  if (has_skip_ranking_candidates()) {
    return has_skip_ranking_candidates_.skip_ranking_candidates_;
  }
  return false;
}
inline void Location::set_skip_ranking_candidates(bool value) {
  if (!has_skip_ranking_candidates()) {
    clear_has_skip_ranking_candidates();
    set_has_skip_ranking_candidates();
  }
  has_skip_ranking_candidates_.skip_ranking_candidates_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.skip_ranking_candidates)
}

// repeated .valhalla.Location.PathEdge path_edges = 22;
inline int Location::path_edges_size() const {
  return path_edges_.size();
}
inline void Location::clear_path_edges() {
  path_edges_.Clear();
}
inline const ::valhalla::Location_PathEdge& Location::path_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.path_edges)
  return path_edges_.Get(index);
}
inline ::valhalla::Location_PathEdge* Location::mutable_path_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.path_edges)
  return path_edges_.Mutable(index);
}
inline ::valhalla::Location_PathEdge* Location::add_path_edges() {
  // @@protoc_insertion_point(field_add:valhalla.Location.path_edges)
  return path_edges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_path_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.path_edges)
  return &path_edges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::path_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.path_edges)
  return path_edges_;
}

// repeated .valhalla.Location.PathEdge filtered_edges = 23;
inline int Location::filtered_edges_size() const {
  return filtered_edges_.size();
}
inline void Location::clear_filtered_edges() {
  filtered_edges_.Clear();
}
inline const ::valhalla::Location_PathEdge& Location::filtered_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.filtered_edges)
  return filtered_edges_.Get(index);
}
inline ::valhalla::Location_PathEdge* Location::mutable_filtered_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.filtered_edges)
  return filtered_edges_.Mutable(index);
}
inline ::valhalla::Location_PathEdge* Location::add_filtered_edges() {
  // @@protoc_insertion_point(field_add:valhalla.Location.filtered_edges)
  return filtered_edges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_filtered_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.filtered_edges)
  return &filtered_edges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::filtered_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.filtered_edges)
  return filtered_edges_;
}

// optional uint32 original_index = 24;
inline bool Location::has_original_index() const {
  return has_original_index_case() == kOriginalIndex;
}
inline void Location::set_has_original_index() {
  _oneof_case_[20] = kOriginalIndex;
}
inline void Location::clear_original_index() {
  if (has_original_index()) {
    has_original_index_.original_index_ = 0u;
    clear_has_has_original_index();
  }
}
inline ::google::protobuf::uint32 Location::original_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.original_index)
  if (has_original_index()) {
    return has_original_index_.original_index_;
  }
  return 0u;
}
inline void Location::set_original_index(::google::protobuf::uint32 value) {
  if (!has_original_index()) {
    clear_has_original_index();
    set_has_original_index();
  }
  has_original_index_.original_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.original_index)
}

// optional .valhalla.LatLng projected_ll = 25;
inline bool Location::has_projected_ll() const {
  return !_is_default_instance_ && projected_ll_ != NULL;
}
inline void Location::clear_projected_ll() {
  if (GetArenaNoVirtual() == NULL && projected_ll_ != NULL) delete projected_ll_;
  projected_ll_ = NULL;
}
inline const ::valhalla::LatLng& Location::projected_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.projected_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return projected_ll_ != NULL ? *projected_ll_ : *default_instance().projected_ll_;
#else
  return projected_ll_ != NULL ? *projected_ll_ : *default_instance_->projected_ll_;
#endif
}
inline ::valhalla::LatLng* Location::mutable_projected_ll() {
  
  if (projected_ll_ == NULL) {
    projected_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.projected_ll)
  return projected_ll_;
}
inline ::valhalla::LatLng* Location::release_projected_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.projected_ll)
  
  ::valhalla::LatLng* temp = projected_ll_;
  projected_ll_ = NULL;
  return temp;
}
inline void Location::set_allocated_projected_ll(::valhalla::LatLng* projected_ll) {
  delete projected_ll_;
  projected_ll_ = projected_ll;
  if (projected_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.projected_ll)
}

// optional uint32 leg_shape_index = 35;
inline bool Location::has_leg_shape_index() const {
  return has_leg_shape_index_case() == kLegShapeIndex;
}
inline void Location::set_has_leg_shape_index() {
  _oneof_case_[21] = kLegShapeIndex;
}
inline void Location::clear_leg_shape_index() {
  if (has_leg_shape_index()) {
    has_leg_shape_index_.leg_shape_index_ = 0u;
    clear_has_has_leg_shape_index();
  }
}
inline ::google::protobuf::uint32 Location::leg_shape_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.leg_shape_index)
  if (has_leg_shape_index()) {
    return has_leg_shape_index_.leg_shape_index_;
  }
  return 0u;
}
inline void Location::set_leg_shape_index(::google::protobuf::uint32 value) {
  if (!has_leg_shape_index()) {
    clear_has_leg_shape_index();
    set_has_leg_shape_index();
  }
  has_leg_shape_index_.leg_shape_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.leg_shape_index)
}

// optional double distance_from_leg_origin = 36;
inline bool Location::has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() == kDistanceFromLegOrigin;
}
inline void Location::set_has_distance_from_leg_origin() {
  _oneof_case_[22] = kDistanceFromLegOrigin;
}
inline void Location::clear_distance_from_leg_origin() {
  if (has_distance_from_leg_origin()) {
    has_distance_from_leg_origin_.distance_from_leg_origin_ = 0;
    clear_has_has_distance_from_leg_origin();
  }
}
inline double Location::distance_from_leg_origin() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.distance_from_leg_origin)
  if (has_distance_from_leg_origin()) {
    return has_distance_from_leg_origin_.distance_from_leg_origin_;
  }
  return 0;
}
inline void Location::set_distance_from_leg_origin(double value) {
  if (!has_distance_from_leg_origin()) {
    clear_has_distance_from_leg_origin();
    set_has_distance_from_leg_origin();
  }
  has_distance_from_leg_origin_.distance_from_leg_origin_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.distance_from_leg_origin)
}

// optional .valhalla.Location.PreferredSide preferred_side = 26;
inline bool Location::has_preferred_side() const {
  return has_preferred_side_case() == kPreferredSide;
}
inline void Location::set_has_preferred_side() {
  _oneof_case_[23] = kPreferredSide;
}
inline void Location::clear_preferred_side() {
  if (has_preferred_side()) {
    has_preferred_side_.preferred_side_ = 0;
    clear_has_has_preferred_side();
  }
}
inline ::valhalla::Location_PreferredSide Location::preferred_side() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_side)
  if (has_preferred_side()) {
    return static_cast< ::valhalla::Location_PreferredSide >(has_preferred_side_.preferred_side_);
  }
  return static_cast< ::valhalla::Location_PreferredSide >(0);
}
inline void Location::set_preferred_side(::valhalla::Location_PreferredSide value) {
  if (!has_preferred_side()) {
    clear_has_preferred_side();
    set_has_preferred_side();
  }
  has_preferred_side_.preferred_side_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_side)
}

// optional .valhalla.LatLng display_ll = 27;
inline bool Location::has_display_ll() const {
  return !_is_default_instance_ && display_ll_ != NULL;
}
inline void Location::clear_display_ll() {
  if (GetArenaNoVirtual() == NULL && display_ll_ != NULL) delete display_ll_;
  display_ll_ = NULL;
}
inline const ::valhalla::LatLng& Location::display_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.display_ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return display_ll_ != NULL ? *display_ll_ : *default_instance().display_ll_;
#else
  return display_ll_ != NULL ? *display_ll_ : *default_instance_->display_ll_;
#endif
}
inline ::valhalla::LatLng* Location::mutable_display_ll() {
  
  if (display_ll_ == NULL) {
    display_ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.display_ll)
  return display_ll_;
}
inline ::valhalla::LatLng* Location::release_display_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.display_ll)
  
  ::valhalla::LatLng* temp = display_ll_;
  display_ll_ = NULL;
  return temp;
}
inline void Location::set_allocated_display_ll(::valhalla::LatLng* display_ll) {
  delete display_ll_;
  display_ll_ = display_ll;
  if (display_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.display_ll)
}

// optional uint32 search_cutoff = 28;
inline bool Location::has_search_cutoff() const {
  return has_search_cutoff_case() == kSearchCutoff;
}
inline void Location::set_has_search_cutoff() {
  _oneof_case_[24] = kSearchCutoff;
}
inline void Location::clear_search_cutoff() {
  if (has_search_cutoff()) {
    has_search_cutoff_.search_cutoff_ = 0u;
    clear_has_has_search_cutoff();
  }
}
inline ::google::protobuf::uint32 Location::search_cutoff() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_cutoff)
  if (has_search_cutoff()) {
    return has_search_cutoff_.search_cutoff_;
  }
  return 0u;
}
inline void Location::set_search_cutoff(::google::protobuf::uint32 value) {
  if (!has_search_cutoff()) {
    clear_has_search_cutoff();
    set_has_search_cutoff();
  }
  has_search_cutoff_.search_cutoff_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.search_cutoff)
}

// optional uint32 street_side_tolerance = 29;
inline bool Location::has_street_side_tolerance() const {
  return has_street_side_tolerance_case() == kStreetSideTolerance;
}
inline void Location::set_has_street_side_tolerance() {
  _oneof_case_[25] = kStreetSideTolerance;
}
inline void Location::clear_street_side_tolerance() {
  if (has_street_side_tolerance()) {
    has_street_side_tolerance_.street_side_tolerance_ = 0u;
    clear_has_has_street_side_tolerance();
  }
}
inline ::google::protobuf::uint32 Location::street_side_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_tolerance)
  if (has_street_side_tolerance()) {
    return has_street_side_tolerance_.street_side_tolerance_;
  }
  return 0u;
}
inline void Location::set_street_side_tolerance(::google::protobuf::uint32 value) {
  if (!has_street_side_tolerance()) {
    clear_has_street_side_tolerance();
    set_has_street_side_tolerance();
  }
  has_street_side_tolerance_.street_side_tolerance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_tolerance)
}

// optional uint32 route_index = 30;
inline bool Location::has_route_index() const {
  return has_route_index_case() == kRouteIndex;
}
inline void Location::set_has_route_index() {
  _oneof_case_[26] = kRouteIndex;
}
inline void Location::clear_route_index() {
  if (has_route_index()) {
    has_route_index_.route_index_ = 0u;
    clear_has_has_route_index();
  }
}
inline ::google::protobuf::uint32 Location::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.route_index)
  if (has_route_index()) {
    return has_route_index_.route_index_;
  }
  return 0u;
}
inline void Location::set_route_index(::google::protobuf::uint32 value) {
  if (!has_route_index()) {
    clear_has_route_index();
    set_has_route_index();
  }
  has_route_index_.route_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.route_index)
}

// optional uint32 waypoint_index = 31;
inline bool Location::has_waypoint_index() const {
  return has_waypoint_index_case() == kWaypointIndex;
}
inline void Location::set_has_waypoint_index() {
  _oneof_case_[27] = kWaypointIndex;
}
inline void Location::clear_waypoint_index() {
  if (has_waypoint_index()) {
    has_waypoint_index_.waypoint_index_ = 0u;
    clear_has_has_waypoint_index();
  }
}
inline ::google::protobuf::uint32 Location::waypoint_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.waypoint_index)
  if (has_waypoint_index()) {
    return has_waypoint_index_.waypoint_index_;
  }
  return 0u;
}
inline void Location::set_waypoint_index(::google::protobuf::uint32 value) {
  if (!has_waypoint_index()) {
    clear_has_waypoint_index();
    set_has_waypoint_index();
  }
  has_waypoint_index_.waypoint_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.waypoint_index)
}

// optional .valhalla.Location.SearchFilter search_filter = 32;
inline bool Location::has_search_filter() const {
  return !_is_default_instance_ && search_filter_ != NULL;
}
inline void Location::clear_search_filter() {
  if (GetArenaNoVirtual() == NULL && search_filter_ != NULL) delete search_filter_;
  search_filter_ = NULL;
}
inline const ::valhalla::Location_SearchFilter& Location::search_filter() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_filter)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_filter_ != NULL ? *search_filter_ : *default_instance().search_filter_;
#else
  return search_filter_ != NULL ? *search_filter_ : *default_instance_->search_filter_;
#endif
}
inline ::valhalla::Location_SearchFilter* Location::mutable_search_filter() {
  
  if (search_filter_ == NULL) {
    search_filter_ = new ::valhalla::Location_SearchFilter;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Location.search_filter)
  return search_filter_;
}
inline ::valhalla::Location_SearchFilter* Location::release_search_filter() {
  // @@protoc_insertion_point(field_release:valhalla.Location.search_filter)
  
  ::valhalla::Location_SearchFilter* temp = search_filter_;
  search_filter_ = NULL;
  return temp;
}
inline void Location::set_allocated_search_filter(::valhalla::Location_SearchFilter* search_filter) {
  delete search_filter_;
  search_filter_ = search_filter;
  if (search_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.search_filter)
}

// optional uint32 street_side_max_distance = 33;
inline bool Location::has_street_side_max_distance() const {
  return has_street_side_max_distance_case() == kStreetSideMaxDistance;
}
inline void Location::set_has_street_side_max_distance() {
  _oneof_case_[28] = kStreetSideMaxDistance;
}
inline void Location::clear_street_side_max_distance() {
  if (has_street_side_max_distance()) {
    has_street_side_max_distance_.street_side_max_distance_ = 0u;
    clear_has_has_street_side_max_distance();
  }
}
inline ::google::protobuf::uint32 Location::street_side_max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_max_distance)
  if (has_street_side_max_distance()) {
    return has_street_side_max_distance_.street_side_max_distance_;
  }
  return 0u;
}
inline void Location::set_street_side_max_distance(::google::protobuf::uint32 value) {
  if (!has_street_side_max_distance()) {
    clear_has_street_side_max_distance();
    set_has_street_side_max_distance();
  }
  has_street_side_max_distance_.street_side_max_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_max_distance)
}

// optional int32 preferred_layer = 34;
inline bool Location::has_preferred_layer() const {
  return has_preferred_layer_case() == kPreferredLayer;
}
inline void Location::set_has_preferred_layer() {
  _oneof_case_[29] = kPreferredLayer;
}
inline void Location::clear_preferred_layer() {
  if (has_preferred_layer()) {
    has_preferred_layer_.preferred_layer_ = 0;
    clear_has_has_preferred_layer();
  }
}
inline ::google::protobuf::int32 Location::preferred_layer() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_layer)
  if (has_preferred_layer()) {
    return has_preferred_layer_.preferred_layer_;
  }
  return 0;
}
inline void Location::set_preferred_layer(::google::protobuf::int32 value) {
  if (!has_preferred_layer()) {
    clear_has_preferred_layer();
    set_has_preferred_layer();
  }
  has_preferred_layer_.preferred_layer_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_layer)
}

inline bool Location::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void Location::clear_has_has_type() {
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}
inline bool Location::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
inline void Location::clear_has_has_heading() {
  _oneof_case_[1] = HAS_HEADING_NOT_SET;
}
inline bool Location::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void Location::clear_has_has_name() {
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}
inline bool Location::has_has_street() const {
  return has_street_case() != HAS_STREET_NOT_SET;
}
inline void Location::clear_has_has_street() {
  _oneof_case_[3] = HAS_STREET_NOT_SET;
}
inline bool Location::has_has_city() const {
  return has_city_case() != HAS_CITY_NOT_SET;
}
inline void Location::clear_has_has_city() {
  _oneof_case_[4] = HAS_CITY_NOT_SET;
}
inline bool Location::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
inline void Location::clear_has_has_state() {
  _oneof_case_[5] = HAS_STATE_NOT_SET;
}
inline bool Location::has_has_postal_code() const {
  return has_postal_code_case() != HAS_POSTAL_CODE_NOT_SET;
}
inline void Location::clear_has_has_postal_code() {
  _oneof_case_[6] = HAS_POSTAL_CODE_NOT_SET;
}
inline bool Location::has_has_country() const {
  return has_country_case() != HAS_COUNTRY_NOT_SET;
}
inline void Location::clear_has_has_country() {
  _oneof_case_[7] = HAS_COUNTRY_NOT_SET;
}
inline bool Location::has_has_phone() const {
  return has_phone_case() != HAS_PHONE_NOT_SET;
}
inline void Location::clear_has_has_phone() {
  _oneof_case_[8] = HAS_PHONE_NOT_SET;
}
inline bool Location::has_has_url() const {
  return has_url_case() != HAS_URL_NOT_SET;
}
inline void Location::clear_has_has_url() {
  _oneof_case_[9] = HAS_URL_NOT_SET;
}
inline bool Location::has_has_date_time() const {
  return has_date_time_case() != HAS_DATE_TIME_NOT_SET;
}
inline void Location::clear_has_has_date_time() {
  _oneof_case_[10] = HAS_DATE_TIME_NOT_SET;
}
inline bool Location::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
inline void Location::clear_has_has_side_of_street() {
  _oneof_case_[11] = HAS_SIDE_OF_STREET_NOT_SET;
}
inline bool Location::has_has_heading_tolerance() const {
  return has_heading_tolerance_case() != HAS_HEADING_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_heading_tolerance() {
  _oneof_case_[12] = HAS_HEADING_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() != HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_node_snap_tolerance() {
  _oneof_case_[13] = HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_way_id() const {
  return has_way_id_case() != HAS_WAY_ID_NOT_SET;
}
inline void Location::clear_has_has_way_id() {
  _oneof_case_[14] = HAS_WAY_ID_NOT_SET;
}
inline bool Location::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline void Location::clear_has_has_minimum_reachability() {
  _oneof_case_[15] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline bool Location::has_has_radius() const {
  return has_radius_case() != HAS_RADIUS_NOT_SET;
}
inline void Location::clear_has_has_radius() {
  _oneof_case_[16] = HAS_RADIUS_NOT_SET;
}
inline bool Location::has_has_accuracy() const {
  return has_accuracy_case() != HAS_ACCURACY_NOT_SET;
}
inline void Location::clear_has_has_accuracy() {
  _oneof_case_[17] = HAS_ACCURACY_NOT_SET;
}
inline bool Location::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
inline void Location::clear_has_has_time() {
  _oneof_case_[18] = HAS_TIME_NOT_SET;
}
inline bool Location::has_has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() != HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
inline void Location::clear_has_has_skip_ranking_candidates() {
  _oneof_case_[19] = HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
inline bool Location::has_has_original_index() const {
  return has_original_index_case() != HAS_ORIGINAL_INDEX_NOT_SET;
}
inline void Location::clear_has_has_original_index() {
  _oneof_case_[20] = HAS_ORIGINAL_INDEX_NOT_SET;
}
inline bool Location::has_has_leg_shape_index() const {
  return has_leg_shape_index_case() != HAS_LEG_SHAPE_INDEX_NOT_SET;
}
inline void Location::clear_has_has_leg_shape_index() {
  _oneof_case_[21] = HAS_LEG_SHAPE_INDEX_NOT_SET;
}
inline bool Location::has_has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() != HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
inline void Location::clear_has_has_distance_from_leg_origin() {
  _oneof_case_[22] = HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
inline bool Location::has_has_preferred_side() const {
  return has_preferred_side_case() != HAS_PREFERRED_SIDE_NOT_SET;
}
inline void Location::clear_has_has_preferred_side() {
  _oneof_case_[23] = HAS_PREFERRED_SIDE_NOT_SET;
}
inline bool Location::has_has_search_cutoff() const {
  return has_search_cutoff_case() != HAS_SEARCH_CUTOFF_NOT_SET;
}
inline void Location::clear_has_has_search_cutoff() {
  _oneof_case_[24] = HAS_SEARCH_CUTOFF_NOT_SET;
}
inline bool Location::has_has_street_side_tolerance() const {
  return has_street_side_tolerance_case() != HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_street_side_tolerance() {
  _oneof_case_[25] = HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_route_index() const {
  return has_route_index_case() != HAS_ROUTE_INDEX_NOT_SET;
}
inline void Location::clear_has_has_route_index() {
  _oneof_case_[26] = HAS_ROUTE_INDEX_NOT_SET;
}
inline bool Location::has_has_waypoint_index() const {
  return has_waypoint_index_case() != HAS_WAYPOINT_INDEX_NOT_SET;
}
inline void Location::clear_has_has_waypoint_index() {
  _oneof_case_[27] = HAS_WAYPOINT_INDEX_NOT_SET;
}
inline bool Location::has_has_street_side_max_distance() const {
  return has_street_side_max_distance_case() != HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
inline void Location::clear_has_has_street_side_max_distance() {
  _oneof_case_[28] = HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
inline bool Location::has_has_preferred_layer() const {
  return has_preferred_layer_case() != HAS_PREFERRED_LAYER_NOT_SET;
}
inline void Location::clear_has_has_preferred_layer() {
  _oneof_case_[29] = HAS_PREFERRED_LAYER_NOT_SET;
}
inline Location::HasTypeCase Location::has_type_case() const {
  return Location::HasTypeCase(_oneof_case_[0]);
}
inline Location::HasHeadingCase Location::has_heading_case() const {
  return Location::HasHeadingCase(_oneof_case_[1]);
}
inline Location::HasNameCase Location::has_name_case() const {
  return Location::HasNameCase(_oneof_case_[2]);
}
inline Location::HasStreetCase Location::has_street_case() const {
  return Location::HasStreetCase(_oneof_case_[3]);
}
inline Location::HasCityCase Location::has_city_case() const {
  return Location::HasCityCase(_oneof_case_[4]);
}
inline Location::HasStateCase Location::has_state_case() const {
  return Location::HasStateCase(_oneof_case_[5]);
}
inline Location::HasPostalCodeCase Location::has_postal_code_case() const {
  return Location::HasPostalCodeCase(_oneof_case_[6]);
}
inline Location::HasCountryCase Location::has_country_case() const {
  return Location::HasCountryCase(_oneof_case_[7]);
}
inline Location::HasPhoneCase Location::has_phone_case() const {
  return Location::HasPhoneCase(_oneof_case_[8]);
}
inline Location::HasUrlCase Location::has_url_case() const {
  return Location::HasUrlCase(_oneof_case_[9]);
}
inline Location::HasDateTimeCase Location::has_date_time_case() const {
  return Location::HasDateTimeCase(_oneof_case_[10]);
}
inline Location::HasSideOfStreetCase Location::has_side_of_street_case() const {
  return Location::HasSideOfStreetCase(_oneof_case_[11]);
}
inline Location::HasHeadingToleranceCase Location::has_heading_tolerance_case() const {
  return Location::HasHeadingToleranceCase(_oneof_case_[12]);
}
inline Location::HasNodeSnapToleranceCase Location::has_node_snap_tolerance_case() const {
  return Location::HasNodeSnapToleranceCase(_oneof_case_[13]);
}
inline Location::HasWayIdCase Location::has_way_id_case() const {
  return Location::HasWayIdCase(_oneof_case_[14]);
}
inline Location::HasMinimumReachabilityCase Location::has_minimum_reachability_case() const {
  return Location::HasMinimumReachabilityCase(_oneof_case_[15]);
}
inline Location::HasRadiusCase Location::has_radius_case() const {
  return Location::HasRadiusCase(_oneof_case_[16]);
}
inline Location::HasAccuracyCase Location::has_accuracy_case() const {
  return Location::HasAccuracyCase(_oneof_case_[17]);
}
inline Location::HasTimeCase Location::has_time_case() const {
  return Location::HasTimeCase(_oneof_case_[18]);
}
inline Location::HasSkipRankingCandidatesCase Location::has_skip_ranking_candidates_case() const {
  return Location::HasSkipRankingCandidatesCase(_oneof_case_[19]);
}
inline Location::HasOriginalIndexCase Location::has_original_index_case() const {
  return Location::HasOriginalIndexCase(_oneof_case_[20]);
}
inline Location::HasLegShapeIndexCase Location::has_leg_shape_index_case() const {
  return Location::HasLegShapeIndexCase(_oneof_case_[21]);
}
inline Location::HasDistanceFromLegOriginCase Location::has_distance_from_leg_origin_case() const {
  return Location::HasDistanceFromLegOriginCase(_oneof_case_[22]);
}
inline Location::HasPreferredSideCase Location::has_preferred_side_case() const {
  return Location::HasPreferredSideCase(_oneof_case_[23]);
}
inline Location::HasSearchCutoffCase Location::has_search_cutoff_case() const {
  return Location::HasSearchCutoffCase(_oneof_case_[24]);
}
inline Location::HasStreetSideToleranceCase Location::has_street_side_tolerance_case() const {
  return Location::HasStreetSideToleranceCase(_oneof_case_[25]);
}
inline Location::HasRouteIndexCase Location::has_route_index_case() const {
  return Location::HasRouteIndexCase(_oneof_case_[26]);
}
inline Location::HasWaypointIndexCase Location::has_waypoint_index_case() const {
  return Location::HasWaypointIndexCase(_oneof_case_[27]);
}
inline Location::HasStreetSideMaxDistanceCase Location::has_street_side_max_distance_case() const {
  return Location::HasStreetSideMaxDistanceCase(_oneof_case_[28]);
}
inline Location::HasPreferredLayerCase Location::has_preferred_layer_case() const {
  return Location::HasPreferredLayerCase(_oneof_case_[29]);
}
// -------------------------------------------------------------------

// TransitEgressInfo

// optional string onestop_id = 1;
inline bool TransitEgressInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline void TransitEgressInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
inline void TransitEgressInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
inline const ::std::string& TransitEgressInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitEgressInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.onestop_id)
}
inline void TransitEgressInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitEgressInfo.onestop_id)
}
inline void TransitEgressInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitEgressInfo.onestop_id)
}
inline ::std::string* TransitEgressInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitEgressInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitEgressInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.onestop_id)
}

// optional string name = 2;
inline bool TransitEgressInfo::has_name() const {
  return has_name_case() == kName;
}
inline void TransitEgressInfo::set_has_name() {
  _oneof_case_[1] = kName;
}
inline void TransitEgressInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
inline const ::std::string& TransitEgressInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitEgressInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.name)
}
inline void TransitEgressInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitEgressInfo.name)
}
inline void TransitEgressInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitEgressInfo.name)
}
inline ::std::string* TransitEgressInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitEgressInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitEgressInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.name)
}

// optional .valhalla.LatLng ll = 3;
inline bool TransitEgressInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
inline void TransitEgressInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
inline const ::valhalla::LatLng& TransitEgressInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
inline ::valhalla::LatLng* TransitEgressInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.ll)
  return ll_;
}
inline ::valhalla::LatLng* TransitEgressInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
inline void TransitEgressInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.ll)
}

inline bool TransitEgressInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitEgressInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitEgressInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitEgressInfo::clear_has_has_name() {
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}
inline TransitEgressInfo::HasOnestopIdCase TransitEgressInfo::has_onestop_id_case() const {
  return TransitEgressInfo::HasOnestopIdCase(_oneof_case_[0]);
}
inline TransitEgressInfo::HasNameCase TransitEgressInfo::has_name_case() const {
  return TransitEgressInfo::HasNameCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TransitStationInfo

// optional string onestop_id = 1;
inline bool TransitStationInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline void TransitStationInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
inline void TransitStationInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
inline const ::std::string& TransitStationInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitStationInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.onestop_id)
}
inline void TransitStationInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitStationInfo.onestop_id)
}
inline void TransitStationInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitStationInfo.onestop_id)
}
inline ::std::string* TransitStationInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitStationInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitStationInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.onestop_id)
}

// optional string name = 2;
inline bool TransitStationInfo::has_name() const {
  return has_name_case() == kName;
}
inline void TransitStationInfo::set_has_name() {
  _oneof_case_[1] = kName;
}
inline void TransitStationInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
inline const ::std::string& TransitStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitStationInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.name)
}
inline void TransitStationInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitStationInfo.name)
}
inline void TransitStationInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitStationInfo.name)
}
inline ::std::string* TransitStationInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitStationInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.name)
}

// optional .valhalla.LatLng ll = 3;
inline bool TransitStationInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
inline void TransitStationInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
inline const ::valhalla::LatLng& TransitStationInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
inline ::valhalla::LatLng* TransitStationInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.ll)
  return ll_;
}
inline ::valhalla::LatLng* TransitStationInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
inline void TransitStationInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.ll)
}

inline bool TransitStationInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitStationInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitStationInfo::clear_has_has_name() {
  _oneof_case_[1] = HAS_NAME_NOT_SET;
}
inline TransitStationInfo::HasOnestopIdCase TransitStationInfo::has_onestop_id_case() const {
  return TransitStationInfo::HasOnestopIdCase(_oneof_case_[0]);
}
inline TransitStationInfo::HasNameCase TransitStationInfo::has_name_case() const {
  return TransitStationInfo::HasNameCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BikeShareStationInfo

// optional string name = 1;
inline bool BikeShareStationInfo::has_name() const {
  return has_name_case() == kName;
}
inline void BikeShareStationInfo::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void BikeShareStationInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
inline const ::std::string& BikeShareStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.name)
}
inline void BikeShareStationInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.name)
}
inline void BikeShareStationInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.name)
}
inline ::std::string* BikeShareStationInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BikeShareStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BikeShareStationInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.name)
}

// optional string ref = 2;
inline bool BikeShareStationInfo::has_ref() const {
  return has_ref_case() == kRef;
}
inline void BikeShareStationInfo::set_has_ref() {
  _oneof_case_[1] = kRef;
}
inline void BikeShareStationInfo::clear_ref() {
  if (has_ref()) {
    has_ref_.ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_ref();
  }
}
inline const ::std::string& BikeShareStationInfo::ref() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.ref)
  if (has_ref()) {
    return has_ref_.ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::set_ref(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.ref)
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.ref)
}
inline void BikeShareStationInfo::set_ref(const char* value) {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.ref)
}
inline void BikeShareStationInfo::set_ref(const char* value, size_t size) {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_ref_.ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.ref)
}
inline ::std::string* BikeShareStationInfo::mutable_ref() {
  if (!has_ref()) {
    clear_has_ref();
    set_has_ref();
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.ref)
  return has_ref_.ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BikeShareStationInfo::release_ref() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.ref)
  if (has_ref()) {
    clear_has_has_ref();
    return has_ref_.ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BikeShareStationInfo::set_allocated_ref(::std::string* ref) {
  if (!has_ref()) {
    has_ref_.ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_ref();
  if (ref != NULL) {
    set_has_ref();
    has_ref_.ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        ref);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.ref)
}

// optional uint32 capacity = 3;
inline bool BikeShareStationInfo::has_capacity() const {
  return has_capacity_case() == kCapacity;
}
inline void BikeShareStationInfo::set_has_capacity() {
  _oneof_case_[2] = kCapacity;
}
inline void BikeShareStationInfo::clear_capacity() {
  if (has_capacity()) {
    has_capacity_.capacity_ = 0u;
    clear_has_has_capacity();
  }
}
inline ::google::protobuf::uint32 BikeShareStationInfo::capacity() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.capacity)
  if (has_capacity()) {
    return has_capacity_.capacity_;
  }
  return 0u;
}
inline void BikeShareStationInfo::set_capacity(::google::protobuf::uint32 value) {
  if (!has_capacity()) {
    clear_has_capacity();
    set_has_capacity();
  }
  has_capacity_.capacity_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.capacity)
}

// optional string network = 4;
inline bool BikeShareStationInfo::has_network() const {
  return has_network_case() == kNetwork;
}
inline void BikeShareStationInfo::set_has_network() {
  _oneof_case_[3] = kNetwork;
}
inline void BikeShareStationInfo::clear_network() {
  if (has_network()) {
    has_network_.network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_network();
  }
}
inline const ::std::string& BikeShareStationInfo::network() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.network)
  if (has_network()) {
    return has_network_.network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::set_network(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.network)
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.network)
}
inline void BikeShareStationInfo::set_network(const char* value) {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.network)
}
inline void BikeShareStationInfo::set_network(const char* value, size_t size) {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_network_.network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.network)
}
inline ::std::string* BikeShareStationInfo::mutable_network() {
  if (!has_network()) {
    clear_has_network();
    set_has_network();
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.network)
  return has_network_.network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BikeShareStationInfo::release_network() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.network)
  if (has_network()) {
    clear_has_has_network();
    return has_network_.network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BikeShareStationInfo::set_allocated_network(::std::string* network) {
  if (!has_network()) {
    has_network_.network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_network();
  if (network != NULL) {
    set_has_network();
    has_network_.network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        network);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.network)
}

// optional string operator = 5;
inline bool BikeShareStationInfo::has_operator_() const {
  return has_operator__case() == kOperator;
}
inline void BikeShareStationInfo::set_has_operator_() {
  _oneof_case_[4] = kOperator;
}
inline void BikeShareStationInfo::clear_operator_() {
  if (has_operator_()) {
    has_operator__.operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_();
  }
}
inline const ::std::string& BikeShareStationInfo::operator_() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.operator)
  if (has_operator_()) {
    return has_operator__.operator__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::set_operator_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.operator)
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.operator)
}
inline void BikeShareStationInfo::set_operator_(const char* value) {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.BikeShareStationInfo.operator)
}
inline void BikeShareStationInfo::set_operator_(const char* value, size_t size) {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator__.operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.BikeShareStationInfo.operator)
}
inline ::std::string* BikeShareStationInfo::mutable_operator_() {
  if (!has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.operator)
  return has_operator__.operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BikeShareStationInfo::release_operator_() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.operator)
  if (has_operator_()) {
    clear_has_has_operator_();
    return has_operator__.operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void BikeShareStationInfo::set_allocated_operator_(::std::string* operator_) {
  if (!has_operator_()) {
    has_operator__.operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_();
  if (operator_ != NULL) {
    set_has_operator_();
    has_operator__.operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.operator)
}

// optional float rent_cost = 6;
inline bool BikeShareStationInfo::has_rent_cost() const {
  return has_rent_cost_case() == kRentCost;
}
inline void BikeShareStationInfo::set_has_rent_cost() {
  _oneof_case_[5] = kRentCost;
}
inline void BikeShareStationInfo::clear_rent_cost() {
  if (has_rent_cost()) {
    has_rent_cost_.rent_cost_ = 0;
    clear_has_has_rent_cost();
  }
}
inline float BikeShareStationInfo::rent_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.rent_cost)
  if (has_rent_cost()) {
    return has_rent_cost_.rent_cost_;
  }
  return 0;
}
inline void BikeShareStationInfo::set_rent_cost(float value) {
  if (!has_rent_cost()) {
    clear_has_rent_cost();
    set_has_rent_cost();
  }
  has_rent_cost_.rent_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.rent_cost)
}

// optional float return_cost = 7;
inline bool BikeShareStationInfo::has_return_cost() const {
  return has_return_cost_case() == kReturnCost;
}
inline void BikeShareStationInfo::set_has_return_cost() {
  _oneof_case_[6] = kReturnCost;
}
inline void BikeShareStationInfo::clear_return_cost() {
  if (has_return_cost()) {
    has_return_cost_.return_cost_ = 0;
    clear_has_has_return_cost();
  }
}
inline float BikeShareStationInfo::return_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.return_cost)
  if (has_return_cost()) {
    return has_return_cost_.return_cost_;
  }
  return 0;
}
inline void BikeShareStationInfo::set_return_cost(float value) {
  if (!has_return_cost()) {
    clear_has_return_cost();
    set_has_return_cost();
  }
  has_return_cost_.return_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.return_cost)
}

inline bool BikeShareStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_name() {
  _oneof_case_[0] = HAS_NAME_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_ref() const {
  return has_ref_case() != HAS_REF_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_ref() {
  _oneof_case_[1] = HAS_REF_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_capacity() const {
  return has_capacity_case() != HAS_CAPACITY_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_capacity() {
  _oneof_case_[2] = HAS_CAPACITY_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_network() const {
  return has_network_case() != HAS_NETWORK_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_network() {
  _oneof_case_[3] = HAS_NETWORK_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_operator_() const {
  return has_operator__case() != HAS_OPERATOR__NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_operator_() {
  _oneof_case_[4] = HAS_OPERATOR__NOT_SET;
}
inline bool BikeShareStationInfo::has_has_rent_cost() const {
  return has_rent_cost_case() != HAS_RENT_COST_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_rent_cost() {
  _oneof_case_[5] = HAS_RENT_COST_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_return_cost() const {
  return has_return_cost_case() != HAS_RETURN_COST_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_return_cost() {
  _oneof_case_[6] = HAS_RETURN_COST_NOT_SET;
}
inline BikeShareStationInfo::HasNameCase BikeShareStationInfo::has_name_case() const {
  return BikeShareStationInfo::HasNameCase(_oneof_case_[0]);
}
inline BikeShareStationInfo::HasRefCase BikeShareStationInfo::has_ref_case() const {
  return BikeShareStationInfo::HasRefCase(_oneof_case_[1]);
}
inline BikeShareStationInfo::HasCapacityCase BikeShareStationInfo::has_capacity_case() const {
  return BikeShareStationInfo::HasCapacityCase(_oneof_case_[2]);
}
inline BikeShareStationInfo::HasNetworkCase BikeShareStationInfo::has_network_case() const {
  return BikeShareStationInfo::HasNetworkCase(_oneof_case_[3]);
}
inline BikeShareStationInfo::HasOperatorCase BikeShareStationInfo::has_operator__case() const {
  return BikeShareStationInfo::HasOperatorCase(_oneof_case_[4]);
}
inline BikeShareStationInfo::HasRentCostCase BikeShareStationInfo::has_rent_cost_case() const {
  return BikeShareStationInfo::HasRentCostCase(_oneof_case_[5]);
}
inline BikeShareStationInfo::HasReturnCostCase BikeShareStationInfo::has_return_cost_case() const {
  return BikeShareStationInfo::HasReturnCostCase(_oneof_case_[6]);
}
// -------------------------------------------------------------------

// TransitPlatformInfo

// optional .valhalla.TransitPlatformInfo.Type type = 1;
inline bool TransitPlatformInfo::has_type() const {
  return has_type_case() == kType;
}
inline void TransitPlatformInfo::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void TransitPlatformInfo::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::TransitPlatformInfo_Type TransitPlatformInfo::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.type)
  if (has_type()) {
    return static_cast< ::valhalla::TransitPlatformInfo_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::TransitPlatformInfo_Type >(0);
}
inline void TransitPlatformInfo::set_type(::valhalla::TransitPlatformInfo_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.type)
}

// optional string onestop_id = 2;
inline bool TransitPlatformInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline void TransitPlatformInfo::set_has_onestop_id() {
  _oneof_case_[1] = kOnestopId;
}
inline void TransitPlatformInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
inline const ::std::string& TransitPlatformInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.onestop_id)
}
inline void TransitPlatformInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.onestop_id)
}
inline void TransitPlatformInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.onestop_id)
}
inline ::std::string* TransitPlatformInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.onestop_id)
}

// optional string name = 3;
inline bool TransitPlatformInfo::has_name() const {
  return has_name_case() == kName;
}
inline void TransitPlatformInfo::set_has_name() {
  _oneof_case_[2] = kName;
}
inline void TransitPlatformInfo::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
inline const ::std::string& TransitPlatformInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.name)
}
inline void TransitPlatformInfo::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.name)
}
inline void TransitPlatformInfo::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.name)
}
inline ::std::string* TransitPlatformInfo::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.name)
}

// optional string arrival_date_time = 4;
inline bool TransitPlatformInfo::has_arrival_date_time() const {
  return has_arrival_date_time_case() == kArrivalDateTime;
}
inline void TransitPlatformInfo::set_has_arrival_date_time() {
  _oneof_case_[3] = kArrivalDateTime;
}
inline void TransitPlatformInfo::clear_arrival_date_time() {
  if (has_arrival_date_time()) {
    has_arrival_date_time_.arrival_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_arrival_date_time();
  }
}
inline const ::std::string& TransitPlatformInfo::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.arrival_date_time)
  if (has_arrival_date_time()) {
    return has_arrival_date_time_.arrival_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_arrival_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.arrival_date_time)
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.arrival_date_time)
}
inline void TransitPlatformInfo::set_arrival_date_time(const char* value) {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.arrival_date_time)
}
inline void TransitPlatformInfo::set_arrival_date_time(const char* value, size_t size) {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_arrival_date_time_.arrival_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.arrival_date_time)
}
inline ::std::string* TransitPlatformInfo::mutable_arrival_date_time() {
  if (!has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.arrival_date_time)
  return has_arrival_date_time_.arrival_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_arrival_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.arrival_date_time)
  if (has_arrival_date_time()) {
    clear_has_has_arrival_date_time();
    return has_arrival_date_time_.arrival_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_arrival_date_time(::std::string* arrival_date_time) {
  if (!has_arrival_date_time()) {
    has_arrival_date_time_.arrival_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_arrival_date_time();
  if (arrival_date_time != NULL) {
    set_has_arrival_date_time();
    has_arrival_date_time_.arrival_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        arrival_date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.arrival_date_time)
}

// optional string departure_date_time = 5;
inline bool TransitPlatformInfo::has_departure_date_time() const {
  return has_departure_date_time_case() == kDepartureDateTime;
}
inline void TransitPlatformInfo::set_has_departure_date_time() {
  _oneof_case_[4] = kDepartureDateTime;
}
inline void TransitPlatformInfo::clear_departure_date_time() {
  if (has_departure_date_time()) {
    has_departure_date_time_.departure_date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_departure_date_time();
  }
}
inline const ::std::string& TransitPlatformInfo::departure_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.departure_date_time)
  if (has_departure_date_time()) {
    return has_departure_date_time_.departure_date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_departure_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.departure_date_time)
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.departure_date_time)
}
inline void TransitPlatformInfo::set_departure_date_time(const char* value) {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.departure_date_time)
}
inline void TransitPlatformInfo::set_departure_date_time(const char* value, size_t size) {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_departure_date_time_.departure_date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.departure_date_time)
}
inline ::std::string* TransitPlatformInfo::mutable_departure_date_time() {
  if (!has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.departure_date_time)
  return has_departure_date_time_.departure_date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_departure_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.departure_date_time)
  if (has_departure_date_time()) {
    clear_has_has_departure_date_time();
    return has_departure_date_time_.departure_date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_departure_date_time(::std::string* departure_date_time) {
  if (!has_departure_date_time()) {
    has_departure_date_time_.departure_date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_departure_date_time();
  if (departure_date_time != NULL) {
    set_has_departure_date_time();
    has_departure_date_time_.departure_date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        departure_date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.departure_date_time)
}

// optional bool assumed_schedule = 6;
inline bool TransitPlatformInfo::has_assumed_schedule() const {
  return has_assumed_schedule_case() == kAssumedSchedule;
}
inline void TransitPlatformInfo::set_has_assumed_schedule() {
  _oneof_case_[5] = kAssumedSchedule;
}
inline void TransitPlatformInfo::clear_assumed_schedule() {
  if (has_assumed_schedule()) {
    has_assumed_schedule_.assumed_schedule_ = false;
    clear_has_has_assumed_schedule();
  }
}
inline bool TransitPlatformInfo::assumed_schedule() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.assumed_schedule)
  if (has_assumed_schedule()) {
    return has_assumed_schedule_.assumed_schedule_;
  }
  return false;
}
inline void TransitPlatformInfo::set_assumed_schedule(bool value) {
  if (!has_assumed_schedule()) {
    clear_has_assumed_schedule();
    set_has_assumed_schedule();
  }
  has_assumed_schedule_.assumed_schedule_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.assumed_schedule)
}

// optional .valhalla.LatLng ll = 7;
inline bool TransitPlatformInfo::has_ll() const {
  return !_is_default_instance_ && ll_ != NULL;
}
inline void TransitPlatformInfo::clear_ll() {
  if (GetArenaNoVirtual() == NULL && ll_ != NULL) delete ll_;
  ll_ = NULL;
}
inline const ::valhalla::LatLng& TransitPlatformInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.ll)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ll_ != NULL ? *ll_ : *default_instance().ll_;
#else
  return ll_ != NULL ? *ll_ : *default_instance_->ll_;
#endif
}
inline ::valhalla::LatLng* TransitPlatformInfo::mutable_ll() {
  
  if (ll_ == NULL) {
    ll_ = new ::valhalla::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.ll)
  return ll_;
}
inline ::valhalla::LatLng* TransitPlatformInfo::release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.ll)
  
  ::valhalla::LatLng* temp = ll_;
  ll_ = NULL;
  return temp;
}
inline void TransitPlatformInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  delete ll_;
  ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.ll)
}

// optional string station_onestop_id = 8;
inline bool TransitPlatformInfo::has_station_onestop_id() const {
  return has_station_onestop_id_case() == kStationOnestopId;
}
inline void TransitPlatformInfo::set_has_station_onestop_id() {
  _oneof_case_[6] = kStationOnestopId;
}
inline void TransitPlatformInfo::clear_station_onestop_id() {
  if (has_station_onestop_id()) {
    has_station_onestop_id_.station_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_station_onestop_id();
  }
}
inline const ::std::string& TransitPlatformInfo::station_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_onestop_id)
  if (has_station_onestop_id()) {
    return has_station_onestop_id_.station_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_station_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_onestop_id)
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_onestop_id)
}
inline void TransitPlatformInfo::set_station_onestop_id(const char* value) {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.station_onestop_id)
}
inline void TransitPlatformInfo::set_station_onestop_id(const char* value, size_t size) {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_onestop_id_.station_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.station_onestop_id)
}
inline ::std::string* TransitPlatformInfo::mutable_station_onestop_id() {
  if (!has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_onestop_id)
  return has_station_onestop_id_.station_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_station_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_onestop_id)
  if (has_station_onestop_id()) {
    clear_has_has_station_onestop_id();
    return has_station_onestop_id_.station_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_station_onestop_id(::std::string* station_onestop_id) {
  if (!has_station_onestop_id()) {
    has_station_onestop_id_.station_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_station_onestop_id();
  if (station_onestop_id != NULL) {
    set_has_station_onestop_id();
    has_station_onestop_id_.station_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        station_onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_onestop_id)
}

// optional string station_name = 9;
inline bool TransitPlatformInfo::has_station_name() const {
  return has_station_name_case() == kStationName;
}
inline void TransitPlatformInfo::set_has_station_name() {
  _oneof_case_[7] = kStationName;
}
inline void TransitPlatformInfo::clear_station_name() {
  if (has_station_name()) {
    has_station_name_.station_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_station_name();
  }
}
inline const ::std::string& TransitPlatformInfo::station_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_name)
  if (has_station_name()) {
    return has_station_name_.station_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::set_station_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_name)
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_name)
}
inline void TransitPlatformInfo::set_station_name(const char* value) {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitPlatformInfo.station_name)
}
inline void TransitPlatformInfo::set_station_name(const char* value, size_t size) {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_station_name_.station_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitPlatformInfo.station_name)
}
inline ::std::string* TransitPlatformInfo::mutable_station_name() {
  if (!has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_name)
  return has_station_name_.station_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitPlatformInfo::release_station_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_name)
  if (has_station_name()) {
    clear_has_has_station_name();
    return has_station_name_.station_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitPlatformInfo::set_allocated_station_name(::std::string* station_name) {
  if (!has_station_name()) {
    has_station_name_.station_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_station_name();
  if (station_name != NULL) {
    set_has_station_name();
    has_station_name_.station_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        station_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_name)
}

inline bool TransitPlatformInfo::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_type() {
  _oneof_case_[0] = HAS_TYPE_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_onestop_id() {
  _oneof_case_[1] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_name() {
  _oneof_case_[2] = HAS_NAME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_arrival_date_time() const {
  return has_arrival_date_time_case() != HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_arrival_date_time() {
  _oneof_case_[3] = HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_departure_date_time() const {
  return has_departure_date_time_case() != HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_departure_date_time() {
  _oneof_case_[4] = HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_assumed_schedule() const {
  return has_assumed_schedule_case() != HAS_ASSUMED_SCHEDULE_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_assumed_schedule() {
  _oneof_case_[5] = HAS_ASSUMED_SCHEDULE_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_station_onestop_id() const {
  return has_station_onestop_id_case() != HAS_STATION_ONESTOP_ID_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_station_onestop_id() {
  _oneof_case_[6] = HAS_STATION_ONESTOP_ID_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_station_name() const {
  return has_station_name_case() != HAS_STATION_NAME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_station_name() {
  _oneof_case_[7] = HAS_STATION_NAME_NOT_SET;
}
inline TransitPlatformInfo::HasTypeCase TransitPlatformInfo::has_type_case() const {
  return TransitPlatformInfo::HasTypeCase(_oneof_case_[0]);
}
inline TransitPlatformInfo::HasOnestopIdCase TransitPlatformInfo::has_onestop_id_case() const {
  return TransitPlatformInfo::HasOnestopIdCase(_oneof_case_[1]);
}
inline TransitPlatformInfo::HasNameCase TransitPlatformInfo::has_name_case() const {
  return TransitPlatformInfo::HasNameCase(_oneof_case_[2]);
}
inline TransitPlatformInfo::HasArrivalDateTimeCase TransitPlatformInfo::has_arrival_date_time_case() const {
  return TransitPlatformInfo::HasArrivalDateTimeCase(_oneof_case_[3]);
}
inline TransitPlatformInfo::HasDepartureDateTimeCase TransitPlatformInfo::has_departure_date_time_case() const {
  return TransitPlatformInfo::HasDepartureDateTimeCase(_oneof_case_[4]);
}
inline TransitPlatformInfo::HasAssumedScheduleCase TransitPlatformInfo::has_assumed_schedule_case() const {
  return TransitPlatformInfo::HasAssumedScheduleCase(_oneof_case_[5]);
}
inline TransitPlatformInfo::HasStationOnestopIdCase TransitPlatformInfo::has_station_onestop_id_case() const {
  return TransitPlatformInfo::HasStationOnestopIdCase(_oneof_case_[6]);
}
inline TransitPlatformInfo::HasStationNameCase TransitPlatformInfo::has_station_name_case() const {
  return TransitPlatformInfo::HasStationNameCase(_oneof_case_[7]);
}
// -------------------------------------------------------------------

// TransitRouteInfo

// optional string onestop_id = 1;
inline bool TransitRouteInfo::has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline void TransitRouteInfo::set_has_onestop_id() {
  _oneof_case_[0] = kOnestopId;
}
inline void TransitRouteInfo::clear_onestop_id() {
  if (has_onestop_id()) {
    has_onestop_id_.onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_onestop_id();
  }
}
inline const ::std::string& TransitRouteInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.onestop_id)
  if (has_onestop_id()) {
    return has_onestop_id_.onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.onestop_id)
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.onestop_id)
}
inline void TransitRouteInfo::set_onestop_id(const char* value) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.onestop_id)
}
inline void TransitRouteInfo::set_onestop_id(const char* value, size_t size) {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_onestop_id_.onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.onestop_id)
}
inline ::std::string* TransitRouteInfo::mutable_onestop_id() {
  if (!has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.onestop_id)
  return has_onestop_id_.onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.onestop_id)
  if (has_onestop_id()) {
    clear_has_has_onestop_id();
    return has_onestop_id_.onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_onestop_id(::std::string* onestop_id) {
  if (!has_onestop_id()) {
    has_onestop_id_.onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_onestop_id();
  if (onestop_id != NULL) {
    set_has_onestop_id();
    has_onestop_id_.onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.onestop_id)
}

// optional uint32 block_id = 2;
inline bool TransitRouteInfo::has_block_id() const {
  return has_block_id_case() == kBlockId;
}
inline void TransitRouteInfo::set_has_block_id() {
  _oneof_case_[1] = kBlockId;
}
inline void TransitRouteInfo::clear_block_id() {
  if (has_block_id()) {
    has_block_id_.block_id_ = 0u;
    clear_has_has_block_id();
  }
}
inline ::google::protobuf::uint32 TransitRouteInfo::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.block_id)
  if (has_block_id()) {
    return has_block_id_.block_id_;
  }
  return 0u;
}
inline void TransitRouteInfo::set_block_id(::google::protobuf::uint32 value) {
  if (!has_block_id()) {
    clear_has_block_id();
    set_has_block_id();
  }
  has_block_id_.block_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.block_id)
}

// optional uint32 trip_id = 3;
inline bool TransitRouteInfo::has_trip_id() const {
  return has_trip_id_case() == kTripId;
}
inline void TransitRouteInfo::set_has_trip_id() {
  _oneof_case_[2] = kTripId;
}
inline void TransitRouteInfo::clear_trip_id() {
  if (has_trip_id()) {
    has_trip_id_.trip_id_ = 0u;
    clear_has_has_trip_id();
  }
}
inline ::google::protobuf::uint32 TransitRouteInfo::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.trip_id)
  if (has_trip_id()) {
    return has_trip_id_.trip_id_;
  }
  return 0u;
}
inline void TransitRouteInfo::set_trip_id(::google::protobuf::uint32 value) {
  if (!has_trip_id()) {
    clear_has_trip_id();
    set_has_trip_id();
  }
  has_trip_id_.trip_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.trip_id)
}

// optional string short_name = 4;
inline bool TransitRouteInfo::has_short_name() const {
  return has_short_name_case() == kShortName;
}
inline void TransitRouteInfo::set_has_short_name() {
  _oneof_case_[3] = kShortName;
}
inline void TransitRouteInfo::clear_short_name() {
  if (has_short_name()) {
    has_short_name_.short_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_short_name();
  }
}
inline const ::std::string& TransitRouteInfo::short_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.short_name)
  if (has_short_name()) {
    return has_short_name_.short_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_short_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.short_name)
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.short_name)
}
inline void TransitRouteInfo::set_short_name(const char* value) {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.short_name)
}
inline void TransitRouteInfo::set_short_name(const char* value, size_t size) {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_short_name_.short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.short_name)
}
inline ::std::string* TransitRouteInfo::mutable_short_name() {
  if (!has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.short_name)
  return has_short_name_.short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_short_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.short_name)
  if (has_short_name()) {
    clear_has_has_short_name();
    return has_short_name_.short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_short_name(::std::string* short_name) {
  if (!has_short_name()) {
    has_short_name_.short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_short_name();
  if (short_name != NULL) {
    set_has_short_name();
    has_short_name_.short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        short_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.short_name)
}

// optional string long_name = 5;
inline bool TransitRouteInfo::has_long_name() const {
  return has_long_name_case() == kLongName;
}
inline void TransitRouteInfo::set_has_long_name() {
  _oneof_case_[4] = kLongName;
}
inline void TransitRouteInfo::clear_long_name() {
  if (has_long_name()) {
    has_long_name_.long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_long_name();
  }
}
inline const ::std::string& TransitRouteInfo::long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.long_name)
  if (has_long_name()) {
    return has_long_name_.long_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_long_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.long_name)
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.long_name)
}
inline void TransitRouteInfo::set_long_name(const char* value) {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.long_name)
}
inline void TransitRouteInfo::set_long_name(const char* value, size_t size) {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_long_name_.long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.long_name)
}
inline ::std::string* TransitRouteInfo::mutable_long_name() {
  if (!has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.long_name)
  return has_long_name_.long_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.long_name)
  if (has_long_name()) {
    clear_has_has_long_name();
    return has_long_name_.long_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_long_name(::std::string* long_name) {
  if (!has_long_name()) {
    has_long_name_.long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_long_name();
  if (long_name != NULL) {
    set_has_long_name();
    has_long_name_.long_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        long_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.long_name)
}

// optional string headsign = 6;
inline bool TransitRouteInfo::has_headsign() const {
  return has_headsign_case() == kHeadsign;
}
inline void TransitRouteInfo::set_has_headsign() {
  _oneof_case_[5] = kHeadsign;
}
inline void TransitRouteInfo::clear_headsign() {
  if (has_headsign()) {
    has_headsign_.headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_headsign();
  }
}
inline const ::std::string& TransitRouteInfo::headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.headsign)
  if (has_headsign()) {
    return has_headsign_.headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_headsign(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.headsign)
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.headsign)
}
inline void TransitRouteInfo::set_headsign(const char* value) {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.headsign)
}
inline void TransitRouteInfo::set_headsign(const char* value, size_t size) {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_headsign_.headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.headsign)
}
inline ::std::string* TransitRouteInfo::mutable_headsign() {
  if (!has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.headsign)
  return has_headsign_.headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.headsign)
  if (has_headsign()) {
    clear_has_has_headsign();
    return has_headsign_.headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_headsign(::std::string* headsign) {
  if (!has_headsign()) {
    has_headsign_.headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_headsign();
  if (headsign != NULL) {
    set_has_headsign();
    has_headsign_.headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        headsign);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.headsign)
}

// optional uint32 color = 7;
inline bool TransitRouteInfo::has_color() const {
  return has_color_case() == kColor;
}
inline void TransitRouteInfo::set_has_color() {
  _oneof_case_[6] = kColor;
}
inline void TransitRouteInfo::clear_color() {
  if (has_color()) {
    has_color_.color_ = 0u;
    clear_has_has_color();
  }
}
inline ::google::protobuf::uint32 TransitRouteInfo::color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.color)
  if (has_color()) {
    return has_color_.color_;
  }
  return 0u;
}
inline void TransitRouteInfo::set_color(::google::protobuf::uint32 value) {
  if (!has_color()) {
    clear_has_color();
    set_has_color();
  }
  has_color_.color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.color)
}

// optional uint32 text_color = 8;
inline bool TransitRouteInfo::has_text_color() const {
  return has_text_color_case() == kTextColor;
}
inline void TransitRouteInfo::set_has_text_color() {
  _oneof_case_[7] = kTextColor;
}
inline void TransitRouteInfo::clear_text_color() {
  if (has_text_color()) {
    has_text_color_.text_color_ = 0u;
    clear_has_has_text_color();
  }
}
inline ::google::protobuf::uint32 TransitRouteInfo::text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.text_color)
  if (has_text_color()) {
    return has_text_color_.text_color_;
  }
  return 0u;
}
inline void TransitRouteInfo::set_text_color(::google::protobuf::uint32 value) {
  if (!has_text_color()) {
    clear_has_text_color();
    set_has_text_color();
  }
  has_text_color_.text_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.text_color)
}

// optional string description = 9;
inline bool TransitRouteInfo::has_description() const {
  return has_description_case() == kDescription;
}
inline void TransitRouteInfo::set_has_description() {
  _oneof_case_[8] = kDescription;
}
inline void TransitRouteInfo::clear_description() {
  if (has_description()) {
    has_description_.description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_description();
  }
}
inline const ::std::string& TransitRouteInfo::description() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.description)
  if (has_description()) {
    return has_description_.description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_description(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.description)
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.description)
}
inline void TransitRouteInfo::set_description(const char* value) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.description)
}
inline void TransitRouteInfo::set_description(const char* value, size_t size) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.description)
}
inline ::std::string* TransitRouteInfo::mutable_description() {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.description)
  return has_description_.description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.description)
  if (has_description()) {
    clear_has_has_description();
    return has_description_.description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_description(::std::string* description) {
  if (!has_description()) {
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_description();
  if (description != NULL) {
    set_has_description();
    has_description_.description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        description);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.description)
}

// optional string operator_onestop_id = 10;
inline bool TransitRouteInfo::has_operator_onestop_id() const {
  return has_operator_onestop_id_case() == kOperatorOnestopId;
}
inline void TransitRouteInfo::set_has_operator_onestop_id() {
  _oneof_case_[9] = kOperatorOnestopId;
}
inline void TransitRouteInfo::clear_operator_onestop_id() {
  if (has_operator_onestop_id()) {
    has_operator_onestop_id_.operator_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_onestop_id();
  }
}
inline const ::std::string& TransitRouteInfo::operator_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_onestop_id)
  if (has_operator_onestop_id()) {
    return has_operator_onestop_id_.operator_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_operator_onestop_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_onestop_id)
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_onestop_id)
}
inline void TransitRouteInfo::set_operator_onestop_id(const char* value) {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_onestop_id)
}
inline void TransitRouteInfo::set_operator_onestop_id(const char* value, size_t size) {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_onestop_id_.operator_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_onestop_id)
}
inline ::std::string* TransitRouteInfo::mutable_operator_onestop_id() {
  if (!has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_onestop_id)
  return has_operator_onestop_id_.operator_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_operator_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_onestop_id)
  if (has_operator_onestop_id()) {
    clear_has_has_operator_onestop_id();
    return has_operator_onestop_id_.operator_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_operator_onestop_id(::std::string* operator_onestop_id) {
  if (!has_operator_onestop_id()) {
    has_operator_onestop_id_.operator_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_onestop_id();
  if (operator_onestop_id != NULL) {
    set_has_operator_onestop_id();
    has_operator_onestop_id_.operator_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_onestop_id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_onestop_id)
}

// optional string operator_name = 11;
inline bool TransitRouteInfo::has_operator_name() const {
  return has_operator_name_case() == kOperatorName;
}
inline void TransitRouteInfo::set_has_operator_name() {
  _oneof_case_[10] = kOperatorName;
}
inline void TransitRouteInfo::clear_operator_name() {
  if (has_operator_name()) {
    has_operator_name_.operator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_name();
  }
}
inline const ::std::string& TransitRouteInfo::operator_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_name)
  if (has_operator_name()) {
    return has_operator_name_.operator_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_operator_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_name)
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_name)
}
inline void TransitRouteInfo::set_operator_name(const char* value) {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_name)
}
inline void TransitRouteInfo::set_operator_name(const char* value, size_t size) {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_name_.operator_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_name)
}
inline ::std::string* TransitRouteInfo::mutable_operator_name() {
  if (!has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_name)
  return has_operator_name_.operator_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_operator_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_name)
  if (has_operator_name()) {
    clear_has_has_operator_name();
    return has_operator_name_.operator_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_operator_name(::std::string* operator_name) {
  if (!has_operator_name()) {
    has_operator_name_.operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_name();
  if (operator_name != NULL) {
    set_has_operator_name();
    has_operator_name_.operator_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_name)
}

// optional string operator_url = 12;
inline bool TransitRouteInfo::has_operator_url() const {
  return has_operator_url_case() == kOperatorUrl;
}
inline void TransitRouteInfo::set_has_operator_url() {
  _oneof_case_[11] = kOperatorUrl;
}
inline void TransitRouteInfo::clear_operator_url() {
  if (has_operator_url()) {
    has_operator_url_.operator_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_operator_url();
  }
}
inline const ::std::string& TransitRouteInfo::operator_url() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_url)
  if (has_operator_url()) {
    return has_operator_url_.operator_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::set_operator_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_url)
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_url)
}
inline void TransitRouteInfo::set_operator_url(const char* value) {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TransitRouteInfo.operator_url)
}
inline void TransitRouteInfo::set_operator_url(const char* value, size_t size) {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_operator_url_.operator_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TransitRouteInfo.operator_url)
}
inline ::std::string* TransitRouteInfo::mutable_operator_url() {
  if (!has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_url)
  return has_operator_url_.operator_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransitRouteInfo::release_operator_url() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_url)
  if (has_operator_url()) {
    clear_has_has_operator_url();
    return has_operator_url_.operator_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TransitRouteInfo::set_allocated_operator_url(::std::string* operator_url) {
  if (!has_operator_url()) {
    has_operator_url_.operator_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_operator_url();
  if (operator_url != NULL) {
    set_has_operator_url();
    has_operator_url_.operator_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        operator_url);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_url)
}

// repeated .valhalla.TransitPlatformInfo transit_stops = 13;
inline int TransitRouteInfo::transit_stops_size() const {
  return transit_stops_.size();
}
inline void TransitRouteInfo::clear_transit_stops() {
  transit_stops_.Clear();
}
inline const ::valhalla::TransitPlatformInfo& TransitRouteInfo::transit_stops(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Get(index);
}
inline ::valhalla::TransitPlatformInfo* TransitRouteInfo::mutable_transit_stops(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Mutable(index);
}
inline ::valhalla::TransitPlatformInfo* TransitRouteInfo::add_transit_stops() {
  // @@protoc_insertion_point(field_add:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >*
TransitRouteInfo::mutable_transit_stops() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TransitRouteInfo.transit_stops)
  return &transit_stops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::valhalla::TransitPlatformInfo >&
TransitRouteInfo::transit_stops() const {
  // @@protoc_insertion_point(field_list:valhalla.TransitRouteInfo.transit_stops)
  return transit_stops_;
}

inline bool TransitRouteInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_onestop_id() {
  _oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_block_id() const {
  return has_block_id_case() != HAS_BLOCK_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_block_id() {
  _oneof_case_[1] = HAS_BLOCK_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_trip_id() const {
  return has_trip_id_case() != HAS_TRIP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_trip_id() {
  _oneof_case_[2] = HAS_TRIP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_short_name() const {
  return has_short_name_case() != HAS_SHORT_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_short_name() {
  _oneof_case_[3] = HAS_SHORT_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_long_name() const {
  return has_long_name_case() != HAS_LONG_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_long_name() {
  _oneof_case_[4] = HAS_LONG_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_headsign() const {
  return has_headsign_case() != HAS_HEADSIGN_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_headsign() {
  _oneof_case_[5] = HAS_HEADSIGN_NOT_SET;
}
inline bool TransitRouteInfo::has_has_color() const {
  return has_color_case() != HAS_COLOR_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_color() {
  _oneof_case_[6] = HAS_COLOR_NOT_SET;
}
inline bool TransitRouteInfo::has_has_text_color() const {
  return has_text_color_case() != HAS_TEXT_COLOR_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_text_color() {
  _oneof_case_[7] = HAS_TEXT_COLOR_NOT_SET;
}
inline bool TransitRouteInfo::has_has_description() const {
  return has_description_case() != HAS_DESCRIPTION_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_description() {
  _oneof_case_[8] = HAS_DESCRIPTION_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_onestop_id() const {
  return has_operator_onestop_id_case() != HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_onestop_id() {
  _oneof_case_[9] = HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_name() const {
  return has_operator_name_case() != HAS_OPERATOR_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_name() {
  _oneof_case_[10] = HAS_OPERATOR_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_url() const {
  return has_operator_url_case() != HAS_OPERATOR_URL_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_url() {
  _oneof_case_[11] = HAS_OPERATOR_URL_NOT_SET;
}
inline TransitRouteInfo::HasOnestopIdCase TransitRouteInfo::has_onestop_id_case() const {
  return TransitRouteInfo::HasOnestopIdCase(_oneof_case_[0]);
}
inline TransitRouteInfo::HasBlockIdCase TransitRouteInfo::has_block_id_case() const {
  return TransitRouteInfo::HasBlockIdCase(_oneof_case_[1]);
}
inline TransitRouteInfo::HasTripIdCase TransitRouteInfo::has_trip_id_case() const {
  return TransitRouteInfo::HasTripIdCase(_oneof_case_[2]);
}
inline TransitRouteInfo::HasShortNameCase TransitRouteInfo::has_short_name_case() const {
  return TransitRouteInfo::HasShortNameCase(_oneof_case_[3]);
}
inline TransitRouteInfo::HasLongNameCase TransitRouteInfo::has_long_name_case() const {
  return TransitRouteInfo::HasLongNameCase(_oneof_case_[4]);
}
inline TransitRouteInfo::HasHeadsignCase TransitRouteInfo::has_headsign_case() const {
  return TransitRouteInfo::HasHeadsignCase(_oneof_case_[5]);
}
inline TransitRouteInfo::HasColorCase TransitRouteInfo::has_color_case() const {
  return TransitRouteInfo::HasColorCase(_oneof_case_[6]);
}
inline TransitRouteInfo::HasTextColorCase TransitRouteInfo::has_text_color_case() const {
  return TransitRouteInfo::HasTextColorCase(_oneof_case_[7]);
}
inline TransitRouteInfo::HasDescriptionCase TransitRouteInfo::has_description_case() const {
  return TransitRouteInfo::HasDescriptionCase(_oneof_case_[8]);
}
inline TransitRouteInfo::HasOperatorOnestopIdCase TransitRouteInfo::has_operator_onestop_id_case() const {
  return TransitRouteInfo::HasOperatorOnestopIdCase(_oneof_case_[9]);
}
inline TransitRouteInfo::HasOperatorNameCase TransitRouteInfo::has_operator_name_case() const {
  return TransitRouteInfo::HasOperatorNameCase(_oneof_case_[10]);
}
inline TransitRouteInfo::HasOperatorUrlCase TransitRouteInfo::has_operator_url_case() const {
  return TransitRouteInfo::HasOperatorUrlCase(_oneof_case_[11]);
}
// -------------------------------------------------------------------

// Pronunciation

// optional .valhalla.Pronunciation.Alphabet alphabet = 1;
inline bool Pronunciation::has_alphabet() const {
  return has_alphabet_case() == kAlphabet;
}
inline void Pronunciation::set_has_alphabet() {
  _oneof_case_[0] = kAlphabet;
}
inline void Pronunciation::clear_alphabet() {
  if (has_alphabet()) {
    has_alphabet_.alphabet_ = 0;
    clear_has_has_alphabet();
  }
}
inline ::valhalla::Pronunciation_Alphabet Pronunciation::alphabet() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.alphabet)
  if (has_alphabet()) {
    return static_cast< ::valhalla::Pronunciation_Alphabet >(has_alphabet_.alphabet_);
  }
  return static_cast< ::valhalla::Pronunciation_Alphabet >(0);
}
inline void Pronunciation::set_alphabet(::valhalla::Pronunciation_Alphabet value) {
  if (!has_alphabet()) {
    clear_has_alphabet();
    set_has_alphabet();
  }
  has_alphabet_.alphabet_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.alphabet)
}

// optional string value = 2;
inline bool Pronunciation::has_value() const {
  return has_value_case() == kValue;
}
inline void Pronunciation::set_has_value() {
  _oneof_case_[1] = kValue;
}
inline void Pronunciation::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
inline const ::std::string& Pronunciation::value() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Pronunciation::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.value)
}
inline void Pronunciation::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Pronunciation.value)
}
inline void Pronunciation::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Pronunciation.value)
}
inline ::std::string* Pronunciation::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Pronunciation.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pronunciation::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.Pronunciation.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Pronunciation::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Pronunciation.value)
}

inline bool Pronunciation::has_has_alphabet() const {
  return has_alphabet_case() != HAS_ALPHABET_NOT_SET;
}
inline void Pronunciation::clear_has_has_alphabet() {
  _oneof_case_[0] = HAS_ALPHABET_NOT_SET;
}
inline bool Pronunciation::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void Pronunciation::clear_has_has_value() {
  _oneof_case_[1] = HAS_VALUE_NOT_SET;
}
inline Pronunciation::HasAlphabetCase Pronunciation::has_alphabet_case() const {
  return Pronunciation::HasAlphabetCase(_oneof_case_[0]);
}
inline Pronunciation::HasValueCase Pronunciation::has_value_case() const {
  return Pronunciation::HasValueCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// StreetName

// optional string value = 1;
inline bool StreetName::has_value() const {
  return has_value_case() == kValue;
}
inline void StreetName::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void StreetName::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
inline const ::std::string& StreetName::value() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void StreetName::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.StreetName.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.StreetName.value)
}
inline void StreetName::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.StreetName.value)
}
inline void StreetName::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.StreetName.value)
}
inline ::std::string* StreetName::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetName::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void StreetName::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.value)
}

// optional bool is_route_number = 2;
inline bool StreetName::has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
inline void StreetName::set_has_is_route_number() {
  _oneof_case_[1] = kIsRouteNumber;
}
inline void StreetName::clear_is_route_number() {
  if (has_is_route_number()) {
    has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
inline bool StreetName::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.is_route_number)
  if (has_is_route_number()) {
    return has_is_route_number_.is_route_number_;
  }
  return false;
}
inline void StreetName::set_is_route_number(bool value) {
  if (!has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  has_is_route_number_.is_route_number_ = value;
  // @@protoc_insertion_point(field_set:valhalla.StreetName.is_route_number)
}

// optional .valhalla.Pronunciation pronunciation = 3;
inline bool StreetName::has_pronunciation() const {
  return !_is_default_instance_ && pronunciation_ != NULL;
}
inline void StreetName::clear_pronunciation() {
  if (GetArenaNoVirtual() == NULL && pronunciation_ != NULL) delete pronunciation_;
  pronunciation_ = NULL;
}
inline const ::valhalla::Pronunciation& StreetName::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.pronunciation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance().pronunciation_;
#else
  return pronunciation_ != NULL ? *pronunciation_ : *default_instance_->pronunciation_;
#endif
}
inline ::valhalla::Pronunciation* StreetName::mutable_pronunciation() {
  
  if (pronunciation_ == NULL) {
    pronunciation_ = new ::valhalla::Pronunciation;
  }
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.pronunciation)
  return pronunciation_;
}
inline ::valhalla::Pronunciation* StreetName::release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.pronunciation)
  
  ::valhalla::Pronunciation* temp = pronunciation_;
  pronunciation_ = NULL;
  return temp;
}
inline void StreetName::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  delete pronunciation_;
  pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.pronunciation)
}

inline bool StreetName::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void StreetName::clear_has_has_value() {
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}
inline bool StreetName::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline void StreetName::clear_has_has_is_route_number() {
  _oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline StreetName::HasValueCase StreetName::has_value_case() const {
  return StreetName::HasValueCase(_oneof_case_[0]);
}
inline StreetName::HasIsRouteNumberCase StreetName::has_is_route_number_case() const {
  return StreetName::HasIsRouteNumberCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TurnLane

// optional uint32 directions_mask = 1;
inline bool TurnLane::has_directions_mask() const {
  return has_directions_mask_case() == kDirectionsMask;
}
inline void TurnLane::set_has_directions_mask() {
  _oneof_case_[0] = kDirectionsMask;
}
inline void TurnLane::clear_directions_mask() {
  if (has_directions_mask()) {
    has_directions_mask_.directions_mask_ = 0u;
    clear_has_has_directions_mask();
  }
}
inline ::google::protobuf::uint32 TurnLane::directions_mask() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.directions_mask)
  if (has_directions_mask()) {
    return has_directions_mask_.directions_mask_;
  }
  return 0u;
}
inline void TurnLane::set_directions_mask(::google::protobuf::uint32 value) {
  if (!has_directions_mask()) {
    clear_has_directions_mask();
    set_has_directions_mask();
  }
  has_directions_mask_.directions_mask_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.directions_mask)
}

// optional .valhalla.TurnLane.State state = 2;
inline bool TurnLane::has_state() const {
  return has_state_case() == kState;
}
inline void TurnLane::set_has_state() {
  _oneof_case_[1] = kState;
}
inline void TurnLane::clear_state() {
  if (has_state()) {
    has_state_.state_ = 0;
    clear_has_has_state();
  }
}
inline ::valhalla::TurnLane_State TurnLane::state() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.state)
  if (has_state()) {
    return static_cast< ::valhalla::TurnLane_State >(has_state_.state_);
  }
  return static_cast< ::valhalla::TurnLane_State >(0);
}
inline void TurnLane::set_state(::valhalla::TurnLane_State value) {
  if (!has_state()) {
    clear_has_state();
    set_has_state();
  }
  has_state_.state_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.state)
}

// optional uint32 active_direction = 3;
inline bool TurnLane::has_active_direction() const {
  return has_active_direction_case() == kActiveDirection;
}
inline void TurnLane::set_has_active_direction() {
  _oneof_case_[2] = kActiveDirection;
}
inline void TurnLane::clear_active_direction() {
  if (has_active_direction()) {
    has_active_direction_.active_direction_ = 0u;
    clear_has_has_active_direction();
  }
}
inline ::google::protobuf::uint32 TurnLane::active_direction() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.active_direction)
  if (has_active_direction()) {
    return has_active_direction_.active_direction_;
  }
  return 0u;
}
inline void TurnLane::set_active_direction(::google::protobuf::uint32 value) {
  if (!has_active_direction()) {
    clear_has_active_direction();
    set_has_active_direction();
  }
  has_active_direction_.active_direction_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.active_direction)
}

inline bool TurnLane::has_has_directions_mask() const {
  return has_directions_mask_case() != HAS_DIRECTIONS_MASK_NOT_SET;
}
inline void TurnLane::clear_has_has_directions_mask() {
  _oneof_case_[0] = HAS_DIRECTIONS_MASK_NOT_SET;
}
inline bool TurnLane::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
inline void TurnLane::clear_has_has_state() {
  _oneof_case_[1] = HAS_STATE_NOT_SET;
}
inline bool TurnLane::has_has_active_direction() const {
  return has_active_direction_case() != HAS_ACTIVE_DIRECTION_NOT_SET;
}
inline void TurnLane::clear_has_has_active_direction() {
  _oneof_case_[2] = HAS_ACTIVE_DIRECTION_NOT_SET;
}
inline TurnLane::HasDirectionsMaskCase TurnLane::has_directions_mask_case() const {
  return TurnLane::HasDirectionsMaskCase(_oneof_case_[0]);
}
inline TurnLane::HasStateCase TurnLane::has_state_case() const {
  return TurnLane::HasStateCase(_oneof_case_[1]);
}
inline TurnLane::HasActiveDirectionCase TurnLane::has_active_direction_case() const {
  return TurnLane::HasActiveDirectionCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// TaggedValue

// optional bytes value = 1;
inline bool TaggedValue::has_value() const {
  return has_value_case() == kValue;
}
inline void TaggedValue::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void TaggedValue::clear_value() {
  if (has_value()) {
    has_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_value();
  }
}
inline const ::std::string& TaggedValue::value() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.value)
  if (has_value()) {
    return has_value_.value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TaggedValue::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.value)
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.value)
}
inline void TaggedValue::set_value(const char* value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.TaggedValue.value)
}
inline void TaggedValue::set_value(const void* value, size_t size) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.TaggedValue.value)
}
inline ::std::string* TaggedValue::mutable_value() {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.TaggedValue.value)
  return has_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaggedValue::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.TaggedValue.value)
  if (has_value()) {
    clear_has_has_value();
    return has_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TaggedValue::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    has_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_value();
  if (value != NULL) {
    set_has_value();
    has_value_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TaggedValue.value)
}

// optional .valhalla.TaggedValue.Type type = 2;
inline bool TaggedValue::has_type() const {
  return has_type_case() == kType;
}
inline void TaggedValue::set_has_type() {
  _oneof_case_[1] = kType;
}
inline void TaggedValue::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::TaggedValue_Type TaggedValue::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.type)
  if (has_type()) {
    return static_cast< ::valhalla::TaggedValue_Type >(has_type_.type_);
  }
  return static_cast< ::valhalla::TaggedValue_Type >(0);
}
inline void TaggedValue::set_type(::valhalla::TaggedValue_Type value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.type)
}

inline bool TaggedValue::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void TaggedValue::clear_has_has_value() {
  _oneof_case_[0] = HAS_VALUE_NOT_SET;
}
inline bool TaggedValue::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void TaggedValue::clear_has_has_type() {
  _oneof_case_[1] = HAS_TYPE_NOT_SET;
}
inline TaggedValue::HasValueCase TaggedValue::has_value_case() const {
  return TaggedValue::HasValueCase(_oneof_case_[0]);
}
inline TaggedValue::HasTypeCase TaggedValue::has_type_case() const {
  return TaggedValue::HasTypeCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::valhalla::Location_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::Location_SideOfStreet> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::Location_PreferredSide> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::TransitPlatformInfo_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::Pronunciation_Alphabet> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::TurnLane_State> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::TaggedValue_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::RoadClass> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::TravelMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::VehicleType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::PedestrianType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::BicycleType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::valhalla::TransitType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tripcommon_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_info_2eproto() {
  delete Statistic::default_instance_;
  delete CodedDescription::default_instance_;
  delete Info::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_info_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_info_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_info_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Statistic::default_instance_ = new Statistic();
  CodedDescription::default_instance_ = new CodedDescription();
  Info::default_instance_ = new Info();
  Statistic::default_instance_->InitAsDefaultInstance();
  CodedDescription::default_instance_->InitAsDefaultInstance();
  Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_info_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_info_2eproto_once_);
void protobuf_AddDesc_info_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_info_2eproto_once_,
                 &protobuf_AddDesc_info_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_info_2eproto {
  StaticDescriptorInitializer_info_2eproto() {
    protobuf_AddDesc_info_2eproto();
  }
} static_descriptor_initializer_info_2eproto_;
#endif
bool StatisticType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistic::kKeyFieldNumber;
const int Statistic::kValueFieldNumber;
const int Statistic::kFrequencyFieldNumber;
const int Statistic::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistic::Statistic()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Statistic)
}

void Statistic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Statistic::Statistic(const Statistic& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Statistic)
}

void Statistic::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_key();
  clear_has_has_value();
  clear_has_has_frequency();
  clear_has_has_type();
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:valhalla.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
  if (has_has_key()) {
    clear_has_key();
  }
  if (has_has_value()) {
    clear_has_value();
  }
  if (has_has_frequency()) {
    clear_has_frequency();
  }
  if (has_has_type()) {
    clear_has_type();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Statistic& Statistic::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_info_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
#endif
  return *default_instance_;
}

Statistic* Statistic::default_instance_ = NULL;

Statistic* Statistic::New(::google::protobuf::Arena* arena) const {
  Statistic* n = new Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statistic::clear_has_key() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Statistic)
  switch(has_key_case()) {
    case kKey: {
      has_key_.key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_KEY_NOT_SET;
}

void Statistic::clear_has_value() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Statistic)
  switch(has_value_case()) {
    case kValue: {
      // No need to clear
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_VALUE_NOT_SET;
}

void Statistic::clear_has_frequency() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Statistic)
  switch(has_frequency_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case HAS_FREQUENCY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_FREQUENCY_NOT_SET;
}

void Statistic::clear_has_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Statistic)
  switch(has_type_case()) {
    case kType: {
      // No need to clear
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_TYPE_NOT_SET;
}


void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Statistic)
  clear_has_key();
  clear_has_value();
  clear_has_frequency();
  clear_has_type();
}

bool Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Statistic.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          clear_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_value_.value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (tag == 29) {
         parse_frequency:
          clear_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_frequency_.frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .valhalla.StatisticType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::valhalla::StatisticType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Statistic)
  return false;
#undef DO_
}

void Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Statistic)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Statistic.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional .valhalla.StatisticType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Statistic)
}

int Statistic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Statistic)
  int total_size = 0;

  switch (has_key_case()) {
    // optional string key = 1;
    case kKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
      break;
    }
    case HAS_KEY_NOT_SET: {
      break;
    }
  }
  switch (has_value_case()) {
    // optional double value = 2;
    case kValue: {
      total_size += 1 + 8;
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (has_frequency_case()) {
    // optional float frequency = 3;
    case kFrequency: {
      total_size += 1 + 4;
      break;
    }
    case HAS_FREQUENCY_NOT_SET: {
      break;
    }
  }
  switch (has_type_case()) {
    // optional .valhalla.StatisticType type = 4;
    case kType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Statistic*>(&from));
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Statistic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_key_case()) {
    case kKey: {
      set_key(from.key());
      break;
    }
    case HAS_KEY_NOT_SET: {
      break;
    }
  }
  switch (from.has_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case HAS_VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.has_frequency_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case HAS_FREQUENCY_NOT_SET: {
      break;
    }
  }
  switch (from.has_type_case()) {
    case kType: {
      set_type(from.type());
      break;
    }
    case HAS_TYPE_NOT_SET: {
      break;
    }
  }
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {

  return true;
}

void Statistic::Swap(Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistic::InternalSwap(Statistic* other) {
  std::swap(has_key_, other->has_key_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_value_, other->has_value_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_frequency_, other->has_frequency_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_type_, other->has_type_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Statistic::GetTypeName() const {
  return "valhalla.Statistic";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Statistic

// optional string key = 1;
bool Statistic::has_key() const {
  return has_key_case() == kKey;
}
void Statistic::set_has_key() {
  _oneof_case_[0] = kKey;
}
void Statistic::clear_key() {
  if (has_key()) {
    has_key_.key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_key();
  }
}
 const ::std::string& Statistic::key() const {
  // @@protoc_insertion_point(field_get:valhalla.Statistic.key)
  if (has_key()) {
    return has_key_.key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Statistic::set_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Statistic.key)
  if (!has_key()) {
    clear_has_key();
    set_has_key();
    has_key_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_key_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Statistic.key)
}
 void Statistic::set_key(const char* value) {
  if (!has_key()) {
    clear_has_key();
    set_has_key();
    has_key_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_key_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Statistic.key)
}
 void Statistic::set_key(const char* value, size_t size) {
  if (!has_key()) {
    clear_has_key();
    set_has_key();
    has_key_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_key_.key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Statistic.key)
}
 ::std::string* Statistic::mutable_key() {
  if (!has_key()) {
    clear_has_key();
    set_has_key();
    has_key_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Statistic.key)
  return has_key_.key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Statistic::release_key() {
  // @@protoc_insertion_point(field_release:valhalla.Statistic.key)
  if (has_key()) {
    clear_has_has_key();
    return has_key_.key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Statistic::set_allocated_key(::std::string* key) {
  if (!has_key()) {
    has_key_.key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_key();
  if (key != NULL) {
    set_has_key();
    has_key_.key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        key);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Statistic.key)
}

// optional double value = 2;
bool Statistic::has_value() const {
  return has_value_case() == kValue;
}
void Statistic::set_has_value() {
  _oneof_case_[1] = kValue;
}
void Statistic::clear_value() {
  if (has_value()) {
    has_value_.value_ = 0;
    clear_has_has_value();
  }
}
 double Statistic::value() const {
  // @@protoc_insertion_point(field_get:valhalla.Statistic.value)
  if (has_value()) {
    return has_value_.value_;
  }
  return 0;
}
 void Statistic::set_value(double value) {
  if (!has_value()) {
    clear_has_value();
    set_has_value();
  }
  has_value_.value_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Statistic.value)
}

// optional float frequency = 3;
bool Statistic::has_frequency() const {
  return has_frequency_case() == kFrequency;
}
void Statistic::set_has_frequency() {
  _oneof_case_[2] = kFrequency;
}
void Statistic::clear_frequency() {
  if (has_frequency()) {
    has_frequency_.frequency_ = 0;
    clear_has_has_frequency();
  }
}
 float Statistic::frequency() const {
  // @@protoc_insertion_point(field_get:valhalla.Statistic.frequency)
  if (has_frequency()) {
    return has_frequency_.frequency_;
  }
  return 0;
}
 void Statistic::set_frequency(float value) {
  if (!has_frequency()) {
    clear_has_frequency();
    set_has_frequency();
  }
  has_frequency_.frequency_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Statistic.frequency)
}

// optional .valhalla.StatisticType type = 4;
bool Statistic::has_type() const {
  return has_type_case() == kType;
}
void Statistic::set_has_type() {
  _oneof_case_[3] = kType;
}
void Statistic::clear_type() {
  if (has_type()) {
    has_type_.type_ = 0;
    clear_has_has_type();
  }
}
 ::valhalla::StatisticType Statistic::type() const {
  // @@protoc_insertion_point(field_get:valhalla.Statistic.type)
  if (has_type()) {
    return static_cast< ::valhalla::StatisticType >(has_type_.type_);
  }
  return static_cast< ::valhalla::StatisticType >(0);
}
 void Statistic::set_type(::valhalla::StatisticType value) {
  if (!has_type()) {
    clear_has_type();
    set_has_type();
  }
  has_type_.type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Statistic.type)
}

bool Statistic::has_has_key() const {
  return has_key_case() != HAS_KEY_NOT_SET;
}
void Statistic::clear_has_has_key() {
  _oneof_case_[0] = HAS_KEY_NOT_SET;
}
bool Statistic::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
void Statistic::clear_has_has_value() {
  _oneof_case_[1] = HAS_VALUE_NOT_SET;
}
bool Statistic::has_has_frequency() const {
  return has_frequency_case() != HAS_FREQUENCY_NOT_SET;
}
void Statistic::clear_has_has_frequency() {
  _oneof_case_[2] = HAS_FREQUENCY_NOT_SET;
}
bool Statistic::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
void Statistic::clear_has_has_type() {
  _oneof_case_[3] = HAS_TYPE_NOT_SET;
}
Statistic::HasKeyCase Statistic::has_key_case() const {
  return Statistic::HasKeyCase(_oneof_case_[0]);
}
Statistic::HasValueCase Statistic::has_value_case() const {
  return Statistic::HasValueCase(_oneof_case_[1]);
}
Statistic::HasFrequencyCase Statistic::has_frequency_case() const {
  return Statistic::HasFrequencyCase(_oneof_case_[2]);
}
Statistic::HasTypeCase Statistic::has_type_case() const {
  return Statistic::HasTypeCase(_oneof_case_[3]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodedDescription::kDescriptionFieldNumber;
const int CodedDescription::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodedDescription::CodedDescription()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.CodedDescription)
}

void CodedDescription::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CodedDescription::CodedDescription(const CodedDescription& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.CodedDescription)
}

void CodedDescription::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_description();
  clear_has_has_code();
}

CodedDescription::~CodedDescription() {
  // @@protoc_insertion_point(destructor:valhalla.CodedDescription)
  SharedDtor();
}

void CodedDescription::SharedDtor() {
  if (has_has_description()) {
    clear_has_description();
  }
  if (has_has_code()) {
    clear_has_code();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CodedDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CodedDescription& CodedDescription::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_info_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
#endif
  return *default_instance_;
}

CodedDescription* CodedDescription::default_instance_ = NULL;

CodedDescription* CodedDescription::New(::google::protobuf::Arena* arena) const {
  CodedDescription* n = new CodedDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodedDescription::clear_has_description() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CodedDescription)
  switch(has_description_case()) {
    case kDescription: {
      has_description_.description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_DESCRIPTION_NOT_SET;
}

void CodedDescription::clear_has_code() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CodedDescription)
  switch(has_code_case()) {
    case kCode: {
      // No need to clear
      break;
    }
    case HAS_CODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_CODE_NOT_SET;
}


void CodedDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.CodedDescription)
  clear_has_description();
  clear_has_code();
}

bool CodedDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.CodedDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CodedDescription.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          clear_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &has_code_.code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.CodedDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.CodedDescription)
  return false;
#undef DO_
}

void CodedDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.CodedDescription)
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CodedDescription.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // optional uint64 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.CodedDescription)
}

int CodedDescription::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.CodedDescription)
  int total_size = 0;

  switch (has_description_case()) {
    // optional string description = 1;
    case kDescription: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  switch (has_code_case()) {
    // optional uint64 code = 2;
    case kCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
      break;
    }
    case HAS_CODE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodedDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CodedDescription*>(&from));
}

void CodedDescription::MergeFrom(const CodedDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.CodedDescription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_description_case()) {
    case kDescription: {
      set_description(from.description());
      break;
    }
    case HAS_DESCRIPTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_code_case()) {
    case kCode: {
      set_code(from.code());
      break;
    }
    case HAS_CODE_NOT_SET: {
      break;
    }
  }
}

void CodedDescription::CopyFrom(const CodedDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.CodedDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodedDescription::IsInitialized() const {

  return true;
}

void CodedDescription::Swap(CodedDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodedDescription::InternalSwap(CodedDescription* other) {
  std::swap(has_description_, other->has_description_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_code_, other->has_code_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CodedDescription::GetTypeName() const {
  return "valhalla.CodedDescription";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodedDescription

// optional string description = 1;
bool CodedDescription::has_description() const {
  return has_description_case() == kDescription;
}
void CodedDescription::set_has_description() {
  _oneof_case_[0] = kDescription;
}
void CodedDescription::clear_description() {
  if (has_description()) {
    has_description_.description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_description();
  }
}
 const ::std::string& CodedDescription::description() const {
  // @@protoc_insertion_point(field_get:valhalla.CodedDescription.description)
  if (has_description()) {
    return has_description_.description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void CodedDescription::set_description(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CodedDescription.description)
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.CodedDescription.description)
}
 void CodedDescription::set_description(const char* value) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.CodedDescription.description)
}
 void CodedDescription::set_description(const char* value, size_t size) {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_description_.description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.CodedDescription.description)
}
 ::std::string* CodedDescription::mutable_description() {
  if (!has_description()) {
    clear_has_description();
    set_has_description();
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.CodedDescription.description)
  return has_description_.description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CodedDescription::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.CodedDescription.description)
  if (has_description()) {
    clear_has_has_description();
    return has_description_.description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void CodedDescription::set_allocated_description(::std::string* description) {
  if (!has_description()) {
    has_description_.description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_description();
  if (description != NULL) {
    set_has_description();
    has_description_.description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        description);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.CodedDescription.description)
}

// optional uint64 code = 2;
bool CodedDescription::has_code() const {
  return has_code_case() == kCode;
}
void CodedDescription::set_has_code() {
  _oneof_case_[1] = kCode;
}
void CodedDescription::clear_code() {
  if (has_code()) {
    has_code_.code_ = GOOGLE_ULONGLONG(0);
    clear_has_has_code();
  }
}
 ::google::protobuf::uint64 CodedDescription::code() const {
  // @@protoc_insertion_point(field_get:valhalla.CodedDescription.code)
  if (has_code()) {
    return has_code_.code_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void CodedDescription::set_code(::google::protobuf::uint64 value) {
  if (!has_code()) {
    clear_has_code();
    set_has_code();
  }
  has_code_.code_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CodedDescription.code)
}

bool CodedDescription::has_has_description() const {
  return has_description_case() != HAS_DESCRIPTION_NOT_SET;
}
void CodedDescription::clear_has_has_description() {
  _oneof_case_[0] = HAS_DESCRIPTION_NOT_SET;
}
bool CodedDescription::has_has_code() const {
  return has_code_case() != HAS_CODE_NOT_SET;
}
void CodedDescription::clear_has_has_code() {
  _oneof_case_[1] = HAS_CODE_NOT_SET;
}
CodedDescription::HasDescriptionCase CodedDescription::has_description_case() const {
  return CodedDescription::HasDescriptionCase(_oneof_case_[0]);
}
CodedDescription::HasCodeCase CodedDescription::has_code_case() const {
  return CodedDescription::HasCodeCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kStatisticsFieldNumber;
const int Info::kErrorsFieldNumber;
const int Info::kWarningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Info)
}

void Info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Info::Info(const Info& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Info)
}

void Info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:valhalla.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Info& Info::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_info_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
#endif
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New(::google::protobuf::Arena* arena) const {
  Info* n = new Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Info)
  statistics_.Clear();
  errors_.Clear();
  warnings_.Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.Statistic statistics = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_statistics;
        if (input->ExpectTag(18)) goto parse_loop_errors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.CodedDescription errors = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_errors;
        if (input->ExpectTag(26)) goto parse_loop_warnings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.CodedDescription warnings = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_warnings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_warnings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Info)
  // repeated .valhalla.Statistic statistics = 1;
  for (unsigned int i = 0, n = this->statistics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->statistics(i), output);
  }

  // repeated .valhalla.CodedDescription errors = 2;
  for (unsigned int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->errors(i), output);
  }

  // repeated .valhalla.CodedDescription warnings = 3;
  for (unsigned int i = 0, n = this->warnings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->warnings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Info)
}

int Info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Info)
  int total_size = 0;

  // repeated .valhalla.Statistic statistics = 1;
  total_size += 1 * this->statistics_size();
  for (int i = 0; i < this->statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statistics(i));
  }

  // repeated .valhalla.CodedDescription errors = 2;
  total_size += 1 * this->errors_size();
  for (int i = 0; i < this->errors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->errors(i));
  }

  // repeated .valhalla.CodedDescription warnings = 3;
  total_size += 1 * this->warnings_size();
  for (int i = 0; i < this->warnings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warnings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Info*>(&from));
}

void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  statistics_.MergeFrom(from.statistics_);
  errors_.MergeFrom(from.errors_);
  warnings_.MergeFrom(from.warnings_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  statistics_.UnsafeArenaSwap(&other->statistics_);
  errors_.UnsafeArenaSwap(&other->errors_);
  warnings_.UnsafeArenaSwap(&other->warnings_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Info::GetTypeName() const {
  return "valhalla.Info";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Info

// repeated .valhalla.Statistic statistics = 1;
int Info::statistics_size() const {
  return statistics_.size();
}
void Info::clear_statistics() {
  statistics_.Clear();
}
const ::valhalla::Statistic& Info::statistics(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Info.statistics)
  return statistics_.Get(index);
}
::valhalla::Statistic* Info::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Info.statistics)
  return statistics_.Mutable(index);
}
::valhalla::Statistic* Info::add_statistics() {
  // @@protoc_insertion_point(field_add:valhalla.Info.statistics)
  return statistics_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Statistic >*
Info::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Info.statistics)
  return &statistics_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Statistic >&
Info::statistics() const {
  // @@protoc_insertion_point(field_list:valhalla.Info.statistics)
  return statistics_;
}

// repeated .valhalla.CodedDescription errors = 2;
int Info::errors_size() const {
  return errors_.size();
}
void Info::clear_errors() {
  errors_.Clear();
}
const ::valhalla::CodedDescription& Info::errors(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Info.errors)
  return errors_.Get(index);
}
::valhalla::CodedDescription* Info::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Info.errors)
  return errors_.Mutable(index);
}
::valhalla::CodedDescription* Info::add_errors() {
  // @@protoc_insertion_point(field_add:valhalla.Info.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::CodedDescription >*
Info::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Info.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::CodedDescription >&
Info::errors() const {
  // @@protoc_insertion_point(field_list:valhalla.Info.errors)
  return errors_;
}

// repeated .valhalla.CodedDescription warnings = 3;
int Info::warnings_size() const {
  return warnings_.size();
}
void Info::clear_warnings() {
  warnings_.Clear();
}
const ::valhalla::CodedDescription& Info::warnings(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Info.warnings)
  return warnings_.Get(index);
}
::valhalla::CodedDescription* Info::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Info.warnings)
  return warnings_.Mutable(index);
}
::valhalla::CodedDescription* Info::add_warnings() {
  // @@protoc_insertion_point(field_add:valhalla.Info.warnings)
  return warnings_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::CodedDescription >*
Info::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Info.warnings)
  return &warnings_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::CodedDescription >&
Info::warnings() const {
  // @@protoc_insertion_point(field_list:valhalla.Info.warnings)
  return warnings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

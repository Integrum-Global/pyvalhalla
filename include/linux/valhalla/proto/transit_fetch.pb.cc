// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit_fetch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transit_fetch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {
namespace mjolnir {

void protobuf_ShutdownFile_transit_5ffetch_2eproto() {
  delete Transit_Fetch::default_instance_;
  delete Transit_Fetch_Stop::default_instance_;
  delete Transit_Fetch_StopPair::default_instance_;
  delete Transit_Fetch_Route::default_instance_;
  delete Transit_Fetch_Shape::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_transit_5ffetch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_transit_5ffetch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_transit_5ffetch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Transit_Fetch::default_instance_ = new Transit_Fetch();
  Transit_Fetch_Stop::default_instance_ = new Transit_Fetch_Stop();
  Transit_Fetch_StopPair::default_instance_ = new Transit_Fetch_StopPair();
  Transit_Fetch_Route::default_instance_ = new Transit_Fetch_Route();
  Transit_Fetch_Shape::default_instance_ = new Transit_Fetch_Shape();
  Transit_Fetch::default_instance_->InitAsDefaultInstance();
  Transit_Fetch_Stop::default_instance_->InitAsDefaultInstance();
  Transit_Fetch_StopPair::default_instance_->InitAsDefaultInstance();
  Transit_Fetch_Route::default_instance_->InitAsDefaultInstance();
  Transit_Fetch_Shape::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transit_5ffetch_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_transit_5ffetch_2eproto_once_);
void protobuf_AddDesc_transit_5ffetch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_transit_5ffetch_2eproto_once_,
                 &protobuf_AddDesc_transit_5ffetch_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transit_5ffetch_2eproto {
  StaticDescriptorInitializer_transit_5ffetch_2eproto() {
    protobuf_AddDesc_transit_5ffetch_2eproto();
  }
} static_descriptor_initializer_transit_5ffetch_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForTransit_Fetch(
    Transit_Fetch* ptr) {
  return ptr->mutable_unknown_fields();
}

bool Transit_Fetch_VehicleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Transit_Fetch_VehicleType Transit_Fetch::kTram;
const Transit_Fetch_VehicleType Transit_Fetch::kMetro;
const Transit_Fetch_VehicleType Transit_Fetch::kRail;
const Transit_Fetch_VehicleType Transit_Fetch::kBus;
const Transit_Fetch_VehicleType Transit_Fetch::kFerry;
const Transit_Fetch_VehicleType Transit_Fetch::kCableCar;
const Transit_Fetch_VehicleType Transit_Fetch::kGondola;
const Transit_Fetch_VehicleType Transit_Fetch::kFunicular;
const Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MIN;
const Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MAX;
const int Transit_Fetch::VehicleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
static ::std::string* MutableUnknownFieldsForTransit_Fetch_Stop(
    Transit_Fetch_Stop* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transit_Fetch_Stop::kLonFieldNumber;
const int Transit_Fetch_Stop::kLatFieldNumber;
const int Transit_Fetch_Stop::kGraphidFieldNumber;
const int Transit_Fetch_Stop::kNameFieldNumber;
const int Transit_Fetch_Stop::kOnestopIdFieldNumber;
const int Transit_Fetch_Stop::kOsmWayIdFieldNumber;
const int Transit_Fetch_Stop::kTimezoneFieldNumber;
const int Transit_Fetch_Stop::kWheelchairBoardingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transit_Fetch_Stop::Transit_Fetch_Stop()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}

void Transit_Fetch_Stop::InitAsDefaultInstance() {
}

Transit_Fetch_Stop::Transit_Fetch_Stop(const Transit_Fetch_Stop& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}

void Transit_Fetch_Stop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lon_ = 0;
  lat_ = 0;
  graphid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osm_way_id_ = GOOGLE_ULONGLONG(0);
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheelchair_boarding_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Fetch_Stop::~Transit_Fetch_Stop() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Stop)
  SharedDtor();
}

void Transit_Fetch_Stop::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Transit_Fetch_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transit_Fetch_Stop& Transit_Fetch_Stop::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_transit_5ffetch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_transit_5ffetch_2eproto();
#endif
  return *default_instance_;
}

Transit_Fetch_Stop* Transit_Fetch_Stop::default_instance_ = NULL;

Transit_Fetch_Stop* Transit_Fetch_Stop::New(::google::protobuf::Arena* arena) const {
  Transit_Fetch_Stop* n = new Transit_Fetch_Stop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transit_Fetch_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Stop)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Transit_Fetch_Stop, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transit_Fetch_Stop*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lon_, graphid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_onestop_id()) {
      onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    osm_way_id_ = GOOGLE_ULONGLONG(0);
    if (has_timezone()) {
      timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    wheelchair_boarding_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transit_Fetch_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTransit_Fetch_Stop, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:valhalla.mjolnir.Transit_Fetch.Stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lon = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lat;
        break;
      }

      // optional float lat = 2;
      case 2: {
        if (tag == 21) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_graphid;
        break;
      }

      // optional uint64 graphid = 3;
      case 3: {
        if (tag == 24) {
         parse_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &graphid_)));
          set_has_graphid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 5;
      case 5: {
        if (tag == 42) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_osm_way_id;
        break;
      }

      // optional uint64 osm_way_id = 6;
      case 6: {
        if (tag == 48) {
         parse_osm_way_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &osm_way_id_)));
          set_has_osm_way_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_timezone;
        break;
      }

      // optional string timezone = 8;
      case 8: {
        if (tag == 66) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wheelchair_boarding;
        break;
      }

      // optional bool wheelchair_boarding = 9;
      case 9: {
        if (tag == 72) {
         parse_wheelchair_boarding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_boarding_)));
          set_has_wheelchair_boarding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.mjolnir.Transit_Fetch.Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.mjolnir.Transit_Fetch.Stop)
  return false;
#undef DO_
}

void Transit_Fetch_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.mjolnir.Transit_Fetch.Stop)
  // optional float lon = 1;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lon(), output);
  }

  // optional float lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lat(), output);
  }

  // optional uint64 graphid = 3;
  if (has_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->graphid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string onestop_id = 5;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->onestop_id(), output);
  }

  // optional uint64 osm_way_id = 6;
  if (has_osm_way_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->osm_way_id(), output);
  }

  // optional string timezone = 8;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->timezone(), output);
  }

  // optional bool wheelchair_boarding = 9;
  if (has_wheelchair_boarding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->wheelchair_boarding(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:valhalla.mjolnir.Transit_Fetch.Stop)
}

int Transit_Fetch_Stop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Stop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float lon = 1;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float lat = 2;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional uint64 graphid = 3;
    if (has_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->graphid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string onestop_id = 5;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional uint64 osm_way_id = 6;
    if (has_osm_way_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->osm_way_id());
    }

    // optional string timezone = 8;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional bool wheelchair_boarding = 9;
    if (has_wheelchair_boarding()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Fetch_Stop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transit_Fetch_Stop*>(&from));
}

void Transit_Fetch_Stop::MergeFrom(const Transit_Fetch_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_graphid()) {
      set_graphid(from.graphid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_onestop_id()) {
      set_has_onestop_id();
      onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.onestop_id_);
    }
    if (from.has_osm_way_id()) {
      set_osm_way_id(from.osm_way_id());
    }
    if (from.has_timezone()) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (from.has_wheelchair_boarding()) {
      set_wheelchair_boarding(from.wheelchair_boarding());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transit_Fetch_Stop::CopyFrom(const Transit_Fetch_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Stop::IsInitialized() const {

  return true;
}

void Transit_Fetch_Stop::Swap(Transit_Fetch_Stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transit_Fetch_Stop::InternalSwap(Transit_Fetch_Stop* other) {
  std::swap(lon_, other->lon_);
  std::swap(lat_, other->lat_);
  std::swap(graphid_, other->graphid_);
  name_.Swap(&other->name_);
  onestop_id_.Swap(&other->onestop_id_);
  std::swap(osm_way_id_, other->osm_way_id_);
  timezone_.Swap(&other->timezone_);
  std::swap(wheelchair_boarding_, other->wheelchair_boarding_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transit_Fetch_Stop::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Stop";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForTransit_Fetch_StopPair(
    Transit_Fetch_StopPair* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transit_Fetch_StopPair::kBikesAllowedFieldNumber;
const int Transit_Fetch_StopPair::kBlockIdFieldNumber;
const int Transit_Fetch_StopPair::kDestinationArrivalTimeFieldNumber;
const int Transit_Fetch_StopPair::kDestinationGraphidFieldNumber;
const int Transit_Fetch_StopPair::kDestinationOnestopIdFieldNumber;
const int Transit_Fetch_StopPair::kOperatedByOnestopIdFieldNumber;
const int Transit_Fetch_StopPair::kOriginDepartureTimeFieldNumber;
const int Transit_Fetch_StopPair::kOriginGraphidFieldNumber;
const int Transit_Fetch_StopPair::kOriginOnestopIdFieldNumber;
const int Transit_Fetch_StopPair::kRouteIndexFieldNumber;
const int Transit_Fetch_StopPair::kServiceAddedDatesFieldNumber;
const int Transit_Fetch_StopPair::kServiceDaysOfWeekFieldNumber;
const int Transit_Fetch_StopPair::kServiceEndDateFieldNumber;
const int Transit_Fetch_StopPair::kServiceExceptDatesFieldNumber;
const int Transit_Fetch_StopPair::kServiceStartDateFieldNumber;
const int Transit_Fetch_StopPair::kTripHeadsignFieldNumber;
const int Transit_Fetch_StopPair::kTripIdFieldNumber;
const int Transit_Fetch_StopPair::kWheelchairAccessibleFieldNumber;
const int Transit_Fetch_StopPair::kShapeIdFieldNumber;
const int Transit_Fetch_StopPair::kOriginDistTraveledFieldNumber;
const int Transit_Fetch_StopPair::kDestinationDistTraveledFieldNumber;
const int Transit_Fetch_StopPair::kFrequencyEndTimeFieldNumber;
const int Transit_Fetch_StopPair::kFrequencyHeadwaySecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transit_Fetch_StopPair::Transit_Fetch_StopPair()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}

void Transit_Fetch_StopPair::InitAsDefaultInstance() {
}

Transit_Fetch_StopPair::Transit_Fetch_StopPair(const Transit_Fetch_StopPair& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}

void Transit_Fetch_StopPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bikes_allowed_ = false;
  block_id_ = 0u;
  destination_arrival_time_ = 0u;
  destination_graphid_ = GOOGLE_ULONGLONG(0);
  destination_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_departure_time_ = 0u;
  origin_graphid_ = GOOGLE_ULONGLONG(0);
  origin_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_index_ = 0u;
  service_end_date_ = 0u;
  service_start_date_ = 0u;
  trip_headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_id_ = 0u;
  wheelchair_accessible_ = false;
  shape_id_ = 0u;
  origin_dist_traveled_ = 0;
  destination_dist_traveled_ = 0;
  frequency_end_time_ = 0u;
  frequency_headway_seconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Fetch_StopPair::~Transit_Fetch_StopPair() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.StopPair)
  SharedDtor();
}

void Transit_Fetch_StopPair::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Transit_Fetch_StopPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transit_Fetch_StopPair& Transit_Fetch_StopPair::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_transit_5ffetch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_transit_5ffetch_2eproto();
#endif
  return *default_instance_;
}

Transit_Fetch_StopPair* Transit_Fetch_StopPair::default_instance_ = NULL;

Transit_Fetch_StopPair* Transit_Fetch_StopPair::New(::google::protobuf::Arena* arena) const {
  Transit_Fetch_StopPair* n = new Transit_Fetch_StopPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transit_Fetch_StopPair::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.StopPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Transit_Fetch_StopPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transit_Fetch_StopPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(block_id_, destination_graphid_);
    ZR_(origin_graphid_, bikes_allowed_);
    if (has_destination_onestop_id()) {
      destination_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operated_by_onestop_id()) {
      operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 54016u) {
    ZR_(route_index_, service_end_date_);
    if (has_origin_onestop_id()) {
      origin_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    service_start_date_ = 0u;
    if (has_trip_headsign()) {
      trip_headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ZR_(trip_id_, frequency_headway_seconds_);
    wheelchair_accessible_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  service_added_dates_.Clear();
  service_days_of_week_.Clear();
  service_except_dates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transit_Fetch_StopPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTransit_Fetch_StopPair, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bikes_allowed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bikes_allowed_)));
          set_has_bikes_allowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_block_id;
        break;
      }

      // optional uint32 block_id = 2;
      case 2: {
        if (tag == 16) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_destination_arrival_time;
        break;
      }

      // optional uint32 destination_arrival_time = 3;
      case 3: {
        if (tag == 24) {
         parse_destination_arrival_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_arrival_time_)));
          set_has_destination_arrival_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destination_graphid;
        break;
      }

      // optional uint64 destination_graphid = 4;
      case 4: {
        if (tag == 32) {
         parse_destination_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_graphid_)));
          set_has_destination_graphid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destination_onestop_id;
        break;
      }

      // optional string destination_onestop_id = 5;
      case 5: {
        if (tag == 42) {
         parse_destination_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_operated_by_onestop_id;
        break;
      }

      // optional string operated_by_onestop_id = 6;
      case 6: {
        if (tag == 50) {
         parse_operated_by_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_origin_departure_time;
        break;
      }

      // optional uint32 origin_departure_time = 7;
      case 7: {
        if (tag == 56) {
         parse_origin_departure_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_departure_time_)));
          set_has_origin_departure_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_origin_graphid;
        break;
      }

      // optional uint64 origin_graphid = 8;
      case 8: {
        if (tag == 64) {
         parse_origin_graphid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_graphid_)));
          set_has_origin_graphid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_origin_onestop_id;
        break;
      }

      // optional string origin_onestop_id = 9;
      case 9: {
        if (tag == 74) {
         parse_origin_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_route_index;
        break;
      }

      // optional uint32 route_index = 10;
      case 10: {
        if (tag == 80) {
         parse_route_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_index_)));
          set_has_route_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_service_added_dates;
        break;
      }

      // repeated uint32 service_added_dates = 11;
      case 11: {
        if (tag == 88) {
         parse_service_added_dates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_service_added_dates())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_added_dates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_service_added_dates;
        if (input->ExpectTag(96)) goto parse_service_days_of_week;
        break;
      }

      // repeated bool service_days_of_week = 12;
      case 12: {
        if (tag == 96) {
         parse_service_days_of_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 96, input, this->mutable_service_days_of_week())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_service_days_of_week())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_service_days_of_week;
        if (input->ExpectTag(104)) goto parse_service_end_date;
        break;
      }

      // optional uint32 service_end_date = 13;
      case 13: {
        if (tag == 104) {
         parse_service_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_end_date_)));
          set_has_service_end_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_service_except_dates;
        break;
      }

      // repeated uint32 service_except_dates = 14;
      case 14: {
        if (tag == 112) {
         parse_service_except_dates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_service_except_dates())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_service_except_dates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_service_except_dates;
        if (input->ExpectTag(120)) goto parse_service_start_date;
        break;
      }

      // optional uint32 service_start_date = 15;
      case 15: {
        if (tag == 120) {
         parse_service_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_start_date_)));
          set_has_service_start_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_trip_headsign;
        break;
      }

      // optional string trip_headsign = 16;
      case 16: {
        if (tag == 130) {
         parse_trip_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_headsign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_trip_id;
        break;
      }

      // optional uint32 trip_id = 17;
      case 17: {
        if (tag == 136) {
         parse_trip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trip_id_)));
          set_has_trip_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_wheelchair_accessible;
        break;
      }

      // optional bool wheelchair_accessible = 18;
      case 18: {
        if (tag == 144) {
         parse_wheelchair_accessible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_accessible_)));
          set_has_wheelchair_accessible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_shape_id;
        break;
      }

      // optional uint32 shape_id = 20;
      case 20: {
        if (tag == 160) {
         parse_shape_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_id_)));
          set_has_shape_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_origin_dist_traveled;
        break;
      }

      // optional float origin_dist_traveled = 21;
      case 21: {
        if (tag == 173) {
         parse_origin_dist_traveled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_dist_traveled_)));
          set_has_origin_dist_traveled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_destination_dist_traveled;
        break;
      }

      // optional float destination_dist_traveled = 22;
      case 22: {
        if (tag == 181) {
         parse_destination_dist_traveled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destination_dist_traveled_)));
          set_has_destination_dist_traveled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_frequency_end_time;
        break;
      }

      // optional uint32 frequency_end_time = 23;
      case 23: {
        if (tag == 184) {
         parse_frequency_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_end_time_)));
          set_has_frequency_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_frequency_headway_seconds;
        break;
      }

      // optional uint32 frequency_headway_seconds = 24;
      case 24: {
        if (tag == 192) {
         parse_frequency_headway_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_headway_seconds_)));
          set_has_frequency_headway_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.mjolnir.Transit_Fetch.StopPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.mjolnir.Transit_Fetch.StopPair)
  return false;
#undef DO_
}

void Transit_Fetch_StopPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  // optional bool bikes_allowed = 1;
  if (has_bikes_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bikes_allowed(), output);
  }

  // optional uint32 block_id = 2;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->block_id(), output);
  }

  // optional uint32 destination_arrival_time = 3;
  if (has_destination_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_arrival_time(), output);
  }

  // optional uint64 destination_graphid = 4;
  if (has_destination_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destination_graphid(), output);
  }

  // optional string destination_onestop_id = 5;
  if (has_destination_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->destination_onestop_id(), output);
  }

  // optional string operated_by_onestop_id = 6;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->operated_by_onestop_id(), output);
  }

  // optional uint32 origin_departure_time = 7;
  if (has_origin_departure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->origin_departure_time(), output);
  }

  // optional uint64 origin_graphid = 8;
  if (has_origin_graphid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->origin_graphid(), output);
  }

  // optional string origin_onestop_id = 9;
  if (has_origin_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->origin_onestop_id(), output);
  }

  // optional uint32 route_index = 10;
  if (has_route_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->route_index(), output);
  }

  // repeated uint32 service_added_dates = 11;
  for (int i = 0; i < this->service_added_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->service_added_dates(i), output);
  }

  // repeated bool service_days_of_week = 12;
  for (int i = 0; i < this->service_days_of_week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      12, this->service_days_of_week(i), output);
  }

  // optional uint32 service_end_date = 13;
  if (has_service_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->service_end_date(), output);
  }

  // repeated uint32 service_except_dates = 14;
  for (int i = 0; i < this->service_except_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->service_except_dates(i), output);
  }

  // optional uint32 service_start_date = 15;
  if (has_service_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->service_start_date(), output);
  }

  // optional string trip_headsign = 16;
  if (has_trip_headsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->trip_headsign(), output);
  }

  // optional uint32 trip_id = 17;
  if (has_trip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->trip_id(), output);
  }

  // optional bool wheelchair_accessible = 18;
  if (has_wheelchair_accessible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->wheelchair_accessible(), output);
  }

  // optional uint32 shape_id = 20;
  if (has_shape_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->shape_id(), output);
  }

  // optional float origin_dist_traveled = 21;
  if (has_origin_dist_traveled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->origin_dist_traveled(), output);
  }

  // optional float destination_dist_traveled = 22;
  if (has_destination_dist_traveled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->destination_dist_traveled(), output);
  }

  // optional uint32 frequency_end_time = 23;
  if (has_frequency_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->frequency_end_time(), output);
  }

  // optional uint32 frequency_headway_seconds = 24;
  if (has_frequency_headway_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->frequency_headway_seconds(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:valhalla.mjolnir.Transit_Fetch.StopPair)
}

int Transit_Fetch_StopPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool bikes_allowed = 1;
    if (has_bikes_allowed()) {
      total_size += 1 + 1;
    }

    // optional uint32 block_id = 2;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_id());
    }

    // optional uint32 destination_arrival_time = 3;
    if (has_destination_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_arrival_time());
    }

    // optional uint64 destination_graphid = 4;
    if (has_destination_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destination_graphid());
    }

    // optional string destination_onestop_id = 5;
    if (has_destination_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_onestop_id());
    }

    // optional string operated_by_onestop_id = 6;
    if (has_operated_by_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_onestop_id());
    }

    // optional uint32 origin_departure_time = 7;
    if (has_origin_departure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin_departure_time());
    }

    // optional uint64 origin_graphid = 8;
    if (has_origin_graphid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->origin_graphid());
    }

  }
  if (_has_bits_[8 / 32] & 54016u) {
    // optional string origin_onestop_id = 9;
    if (has_origin_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin_onestop_id());
    }

    // optional uint32 route_index = 10;
    if (has_route_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_index());
    }

    // optional uint32 service_end_date = 13;
    if (has_service_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_end_date());
    }

    // optional uint32 service_start_date = 15;
    if (has_service_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_start_date());
    }

    // optional string trip_headsign = 16;
    if (has_trip_headsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_headsign());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 trip_id = 17;
    if (has_trip_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trip_id());
    }

    // optional bool wheelchair_accessible = 18;
    if (has_wheelchair_accessible()) {
      total_size += 2 + 1;
    }

    // optional uint32 shape_id = 20;
    if (has_shape_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape_id());
    }

    // optional float origin_dist_traveled = 21;
    if (has_origin_dist_traveled()) {
      total_size += 2 + 4;
    }

    // optional float destination_dist_traveled = 22;
    if (has_destination_dist_traveled()) {
      total_size += 2 + 4;
    }

    // optional uint32 frequency_end_time = 23;
    if (has_frequency_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency_end_time());
    }

    // optional uint32 frequency_headway_seconds = 24;
    if (has_frequency_headway_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency_headway_seconds());
    }

  }
  // repeated uint32 service_added_dates = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_added_dates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_added_dates(i));
    }
    total_size += 1 * this->service_added_dates_size() + data_size;
  }

  // repeated bool service_days_of_week = 12;
  {
    int data_size = 0;
    data_size = 1 * this->service_days_of_week_size();
    total_size += 1 * this->service_days_of_week_size() + data_size;
  }

  // repeated uint32 service_except_dates = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->service_except_dates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->service_except_dates(i));
    }
    total_size += 1 * this->service_except_dates_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Fetch_StopPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transit_Fetch_StopPair*>(&from));
}

void Transit_Fetch_StopPair::MergeFrom(const Transit_Fetch_StopPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  service_added_dates_.MergeFrom(from.service_added_dates_);
  service_days_of_week_.MergeFrom(from.service_days_of_week_);
  service_except_dates_.MergeFrom(from.service_except_dates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bikes_allowed()) {
      set_bikes_allowed(from.bikes_allowed());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_destination_arrival_time()) {
      set_destination_arrival_time(from.destination_arrival_time());
    }
    if (from.has_destination_graphid()) {
      set_destination_graphid(from.destination_graphid());
    }
    if (from.has_destination_onestop_id()) {
      set_has_destination_onestop_id();
      destination_onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_onestop_id_);
    }
    if (from.has_operated_by_onestop_id()) {
      set_has_operated_by_onestop_id();
      operated_by_onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operated_by_onestop_id_);
    }
    if (from.has_origin_departure_time()) {
      set_origin_departure_time(from.origin_departure_time());
    }
    if (from.has_origin_graphid()) {
      set_origin_graphid(from.origin_graphid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_origin_onestop_id()) {
      set_has_origin_onestop_id();
      origin_onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_onestop_id_);
    }
    if (from.has_route_index()) {
      set_route_index(from.route_index());
    }
    if (from.has_service_end_date()) {
      set_service_end_date(from.service_end_date());
    }
    if (from.has_service_start_date()) {
      set_service_start_date(from.service_start_date());
    }
    if (from.has_trip_headsign()) {
      set_has_trip_headsign();
      trip_headsign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_headsign_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trip_id()) {
      set_trip_id(from.trip_id());
    }
    if (from.has_wheelchair_accessible()) {
      set_wheelchair_accessible(from.wheelchair_accessible());
    }
    if (from.has_shape_id()) {
      set_shape_id(from.shape_id());
    }
    if (from.has_origin_dist_traveled()) {
      set_origin_dist_traveled(from.origin_dist_traveled());
    }
    if (from.has_destination_dist_traveled()) {
      set_destination_dist_traveled(from.destination_dist_traveled());
    }
    if (from.has_frequency_end_time()) {
      set_frequency_end_time(from.frequency_end_time());
    }
    if (from.has_frequency_headway_seconds()) {
      set_frequency_headway_seconds(from.frequency_headway_seconds());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transit_Fetch_StopPair::CopyFrom(const Transit_Fetch_StopPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_StopPair::IsInitialized() const {

  return true;
}

void Transit_Fetch_StopPair::Swap(Transit_Fetch_StopPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transit_Fetch_StopPair::InternalSwap(Transit_Fetch_StopPair* other) {
  std::swap(bikes_allowed_, other->bikes_allowed_);
  std::swap(block_id_, other->block_id_);
  std::swap(destination_arrival_time_, other->destination_arrival_time_);
  std::swap(destination_graphid_, other->destination_graphid_);
  destination_onestop_id_.Swap(&other->destination_onestop_id_);
  operated_by_onestop_id_.Swap(&other->operated_by_onestop_id_);
  std::swap(origin_departure_time_, other->origin_departure_time_);
  std::swap(origin_graphid_, other->origin_graphid_);
  origin_onestop_id_.Swap(&other->origin_onestop_id_);
  std::swap(route_index_, other->route_index_);
  service_added_dates_.UnsafeArenaSwap(&other->service_added_dates_);
  service_days_of_week_.UnsafeArenaSwap(&other->service_days_of_week_);
  std::swap(service_end_date_, other->service_end_date_);
  service_except_dates_.UnsafeArenaSwap(&other->service_except_dates_);
  std::swap(service_start_date_, other->service_start_date_);
  trip_headsign_.Swap(&other->trip_headsign_);
  std::swap(trip_id_, other->trip_id_);
  std::swap(wheelchair_accessible_, other->wheelchair_accessible_);
  std::swap(shape_id_, other->shape_id_);
  std::swap(origin_dist_traveled_, other->origin_dist_traveled_);
  std::swap(destination_dist_traveled_, other->destination_dist_traveled_);
  std::swap(frequency_end_time_, other->frequency_end_time_);
  std::swap(frequency_headway_seconds_, other->frequency_headway_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transit_Fetch_StopPair::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.StopPair";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForTransit_Fetch_Route(
    Transit_Fetch_Route* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transit_Fetch_Route::kNameFieldNumber;
const int Transit_Fetch_Route::kOnestopIdFieldNumber;
const int Transit_Fetch_Route::kOperatedByNameFieldNumber;
const int Transit_Fetch_Route::kOperatedByOnestopIdFieldNumber;
const int Transit_Fetch_Route::kOperatedByWebsiteFieldNumber;
const int Transit_Fetch_Route::kRouteColorFieldNumber;
const int Transit_Fetch_Route::kRouteDescFieldNumber;
const int Transit_Fetch_Route::kRouteLongNameFieldNumber;
const int Transit_Fetch_Route::kRouteTextColorFieldNumber;
const int Transit_Fetch_Route::kVehicleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transit_Fetch_Route::Transit_Fetch_Route()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.mjolnir.Transit_Fetch.Route)
}

void Transit_Fetch_Route::InitAsDefaultInstance() {
}

Transit_Fetch_Route::Transit_Fetch_Route(const Transit_Fetch_Route& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Route)
}

void Transit_Fetch_Route::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_website_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_color_ = 0u;
  route_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_text_color_ = 0u;
  vehicle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Fetch_Route::~Transit_Fetch_Route() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Route)
  SharedDtor();
}

void Transit_Fetch_Route::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operated_by_website_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Transit_Fetch_Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transit_Fetch_Route& Transit_Fetch_Route::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_transit_5ffetch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_transit_5ffetch_2eproto();
#endif
  return *default_instance_;
}

Transit_Fetch_Route* Transit_Fetch_Route::default_instance_ = NULL;

Transit_Fetch_Route* Transit_Fetch_Route::New(::google::protobuf::Arena* arena) const {
  Transit_Fetch_Route* n = new Transit_Fetch_Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transit_Fetch_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Route)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_onestop_id()) {
      onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operated_by_name()) {
      operated_by_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operated_by_onestop_id()) {
      operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operated_by_website()) {
      operated_by_website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    route_color_ = 0u;
    if (has_route_desc()) {
      route_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_route_long_name()) {
      route_long_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    route_text_color_ = 0u;
    vehicle_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transit_Fetch_Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTransit_Fetch_Route, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:valhalla.mjolnir.Transit_Fetch.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_onestop_id;
        break;
      }

      // optional string onestop_id = 2;
      case 2: {
        if (tag == 18) {
         parse_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operated_by_name;
        break;
      }

      // optional string operated_by_name = 3;
      case 3: {
        if (tag == 26) {
         parse_operated_by_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_operated_by_onestop_id;
        break;
      }

      // optional string operated_by_onestop_id = 4;
      case 4: {
        if (tag == 34) {
         parse_operated_by_onestop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_onestop_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_operated_by_website;
        break;
      }

      // optional string operated_by_website = 5;
      case 5: {
        if (tag == 42) {
         parse_operated_by_website:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operated_by_website()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_route_color;
        break;
      }

      // optional uint32 route_color = 6;
      case 6: {
        if (tag == 48) {
         parse_route_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_color_)));
          set_has_route_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_route_desc;
        break;
      }

      // optional string route_desc = 7;
      case 7: {
        if (tag == 58) {
         parse_route_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_route_long_name;
        break;
      }

      // optional string route_long_name = 8;
      case 8: {
        if (tag == 66) {
         parse_route_long_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_long_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_route_text_color;
        break;
      }

      // optional uint32 route_text_color = 9;
      case 9: {
        if (tag == 72) {
         parse_route_text_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_text_color_)));
          set_has_route_text_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vehicle_type;
        break;
      }

      // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
      case 10: {
        if (tag == 80) {
         parse_vehicle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::valhalla::mjolnir::Transit_Fetch_VehicleType_IsValid(value)) {
            set_vehicle_type(static_cast< ::valhalla::mjolnir::Transit_Fetch_VehicleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.mjolnir.Transit_Fetch.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.mjolnir.Transit_Fetch.Route)
  return false;
#undef DO_
}

void Transit_Fetch_Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.mjolnir.Transit_Fetch.Route)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string onestop_id = 2;
  if (has_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->onestop_id(), output);
  }

  // optional string operated_by_name = 3;
  if (has_operated_by_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operated_by_name(), output);
  }

  // optional string operated_by_onestop_id = 4;
  if (has_operated_by_onestop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operated_by_onestop_id(), output);
  }

  // optional string operated_by_website = 5;
  if (has_operated_by_website()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->operated_by_website(), output);
  }

  // optional uint32 route_color = 6;
  if (has_route_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->route_color(), output);
  }

  // optional string route_desc = 7;
  if (has_route_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->route_desc(), output);
  }

  // optional string route_long_name = 8;
  if (has_route_long_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->route_long_name(), output);
  }

  // optional uint32 route_text_color = 9;
  if (has_route_text_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->route_text_color(), output);
  }

  // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->vehicle_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:valhalla.mjolnir.Transit_Fetch.Route)
}

int Transit_Fetch_Route::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Route)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string onestop_id = 2;
    if (has_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->onestop_id());
    }

    // optional string operated_by_name = 3;
    if (has_operated_by_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_name());
    }

    // optional string operated_by_onestop_id = 4;
    if (has_operated_by_onestop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_onestop_id());
    }

    // optional string operated_by_website = 5;
    if (has_operated_by_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operated_by_website());
    }

    // optional uint32 route_color = 6;
    if (has_route_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_color());
    }

    // optional string route_desc = 7;
    if (has_route_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_desc());
    }

    // optional string route_long_name = 8;
    if (has_route_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_long_name());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 route_text_color = 9;
    if (has_route_text_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->route_text_color());
    }

    // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Fetch_Route::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transit_Fetch_Route*>(&from));
}

void Transit_Fetch_Route::MergeFrom(const Transit_Fetch_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_onestop_id()) {
      set_has_onestop_id();
      onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.onestop_id_);
    }
    if (from.has_operated_by_name()) {
      set_has_operated_by_name();
      operated_by_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operated_by_name_);
    }
    if (from.has_operated_by_onestop_id()) {
      set_has_operated_by_onestop_id();
      operated_by_onestop_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operated_by_onestop_id_);
    }
    if (from.has_operated_by_website()) {
      set_has_operated_by_website();
      operated_by_website_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operated_by_website_);
    }
    if (from.has_route_color()) {
      set_route_color(from.route_color());
    }
    if (from.has_route_desc()) {
      set_has_route_desc();
      route_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_desc_);
    }
    if (from.has_route_long_name()) {
      set_has_route_long_name();
      route_long_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_long_name_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_route_text_color()) {
      set_route_text_color(from.route_text_color());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transit_Fetch_Route::CopyFrom(const Transit_Fetch_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Route::IsInitialized() const {

  return true;
}

void Transit_Fetch_Route::Swap(Transit_Fetch_Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transit_Fetch_Route::InternalSwap(Transit_Fetch_Route* other) {
  name_.Swap(&other->name_);
  onestop_id_.Swap(&other->onestop_id_);
  operated_by_name_.Swap(&other->operated_by_name_);
  operated_by_onestop_id_.Swap(&other->operated_by_onestop_id_);
  operated_by_website_.Swap(&other->operated_by_website_);
  std::swap(route_color_, other->route_color_);
  route_desc_.Swap(&other->route_desc_);
  route_long_name_.Swap(&other->route_long_name_);
  std::swap(route_text_color_, other->route_text_color_);
  std::swap(vehicle_type_, other->vehicle_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transit_Fetch_Route::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Route";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForTransit_Fetch_Shape(
    Transit_Fetch_Shape* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transit_Fetch_Shape::kShapeIdFieldNumber;
const int Transit_Fetch_Shape::kEncodedShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transit_Fetch_Shape::Transit_Fetch_Shape()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}

void Transit_Fetch_Shape::InitAsDefaultInstance() {
}

Transit_Fetch_Shape::Transit_Fetch_Shape(const Transit_Fetch_Shape& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}

void Transit_Fetch_Shape::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_id_ = 0u;
  encoded_shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Fetch_Shape::~Transit_Fetch_Shape() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Shape)
  SharedDtor();
}

void Transit_Fetch_Shape::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Transit_Fetch_Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transit_Fetch_Shape& Transit_Fetch_Shape::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_transit_5ffetch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_transit_5ffetch_2eproto();
#endif
  return *default_instance_;
}

Transit_Fetch_Shape* Transit_Fetch_Shape::default_instance_ = NULL;

Transit_Fetch_Shape* Transit_Fetch_Shape::New(::google::protobuf::Arena* arena) const {
  Transit_Fetch_Shape* n = new Transit_Fetch_Shape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transit_Fetch_Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Shape)
  if (_has_bits_[0 / 32] & 3u) {
    shape_id_ = 0u;
    if (has_encoded_shape()) {
      encoded_shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transit_Fetch_Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTransit_Fetch_Shape, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:valhalla.mjolnir.Transit_Fetch.Shape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 shape_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shape_id_)));
          set_has_shape_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_encoded_shape;
        break;
      }

      // optional bytes encoded_shape = 2;
      case 2: {
        if (tag == 18) {
         parse_encoded_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.mjolnir.Transit_Fetch.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.mjolnir.Transit_Fetch.Shape)
  return false;
#undef DO_
}

void Transit_Fetch_Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.mjolnir.Transit_Fetch.Shape)
  // optional uint32 shape_id = 1;
  if (has_shape_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shape_id(), output);
  }

  // optional bytes encoded_shape = 2;
  if (has_encoded_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encoded_shape(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:valhalla.mjolnir.Transit_Fetch.Shape)
}

int Transit_Fetch_Shape::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Shape)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 shape_id = 1;
    if (has_shape_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shape_id());
    }

    // optional bytes encoded_shape = 2;
    if (has_encoded_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_shape());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Fetch_Shape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transit_Fetch_Shape*>(&from));
}

void Transit_Fetch_Shape::MergeFrom(const Transit_Fetch_Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape_id()) {
      set_shape_id(from.shape_id());
    }
    if (from.has_encoded_shape()) {
      set_has_encoded_shape();
      encoded_shape_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoded_shape_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transit_Fetch_Shape::CopyFrom(const Transit_Fetch_Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Shape::IsInitialized() const {

  return true;
}

void Transit_Fetch_Shape::Swap(Transit_Fetch_Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transit_Fetch_Shape::InternalSwap(Transit_Fetch_Shape* other) {
  std::swap(shape_id_, other->shape_id_);
  encoded_shape_.Swap(&other->encoded_shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transit_Fetch_Shape::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Shape";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transit_Fetch::kStopsFieldNumber;
const int Transit_Fetch::kStopPairsFieldNumber;
const int Transit_Fetch::kRoutesFieldNumber;
const int Transit_Fetch::kShapesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transit_Fetch::Transit_Fetch()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.mjolnir.Transit_Fetch)
}

void Transit_Fetch::InitAsDefaultInstance() {
}

Transit_Fetch::Transit_Fetch(const Transit_Fetch& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch)
}

void Transit_Fetch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transit_Fetch::~Transit_Fetch() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch)
  SharedDtor();
}

void Transit_Fetch::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Transit_Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transit_Fetch& Transit_Fetch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_transit_5ffetch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_transit_5ffetch_2eproto();
#endif
  return *default_instance_;
}

Transit_Fetch* Transit_Fetch::default_instance_ = NULL;

Transit_Fetch* Transit_Fetch::New(::google::protobuf::Arena* arena) const {
  Transit_Fetch* n = new Transit_Fetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transit_Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch)
  stops_.Clear();
  stop_pairs_.Clear();
  routes_.Clear();
  shapes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transit_Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTransit_Fetch, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:valhalla.mjolnir.Transit_Fetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stops;
        if (input->ExpectTag(18)) goto parse_loop_stop_pairs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stop_pairs;
        if (input->ExpectTag(26)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_routes;
        if (input->ExpectTag(34)) goto parse_loop_shapes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shapes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_shapes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.mjolnir.Transit_Fetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.mjolnir.Transit_Fetch)
  return false;
#undef DO_
}

void Transit_Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.mjolnir.Transit_Fetch)
  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  for (unsigned int i = 0, n = this->stops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stops(i), output);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  for (unsigned int i = 0, n = this->stop_pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stop_pairs(i), output);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->routes(i), output);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  for (unsigned int i = 0, n = this->shapes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->shapes(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:valhalla.mjolnir.Transit_Fetch)
}

int Transit_Fetch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch)
  int total_size = 0;

  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  total_size += 1 * this->stops_size();
  for (int i = 0; i < this->stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stops(i));
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  total_size += 1 * this->stop_pairs_size();
  for (int i = 0; i < this->stop_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_pairs(i));
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  total_size += 1 * this->shapes_size();
  for (int i = 0; i < this->shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shapes(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transit_Fetch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transit_Fetch*>(&from));
}

void Transit_Fetch::MergeFrom(const Transit_Fetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stops_.MergeFrom(from.stops_);
  stop_pairs_.MergeFrom(from.stop_pairs_);
  routes_.MergeFrom(from.routes_);
  shapes_.MergeFrom(from.shapes_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transit_Fetch::CopyFrom(const Transit_Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch::IsInitialized() const {

  return true;
}

void Transit_Fetch::Swap(Transit_Fetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transit_Fetch::InternalSwap(Transit_Fetch* other) {
  stops_.UnsafeArenaSwap(&other->stops_);
  stop_pairs_.UnsafeArenaSwap(&other->stop_pairs_);
  routes_.UnsafeArenaSwap(&other->routes_);
  shapes_.UnsafeArenaSwap(&other->shapes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transit_Fetch::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transit_Fetch_Stop

// optional float lon = 1;
bool Transit_Fetch_Stop::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transit_Fetch_Stop::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
void Transit_Fetch_Stop::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transit_Fetch_Stop::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float Transit_Fetch_Stop::lon() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.lon)
  return lon_;
}
 void Transit_Fetch_Stop::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.lon)
}

// optional float lat = 2;
bool Transit_Fetch_Stop::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transit_Fetch_Stop::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
void Transit_Fetch_Stop::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transit_Fetch_Stop::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float Transit_Fetch_Stop::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.lat)
  return lat_;
}
 void Transit_Fetch_Stop::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.lat)
}

// optional uint64 graphid = 3;
bool Transit_Fetch_Stop::has_graphid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transit_Fetch_Stop::set_has_graphid() {
  _has_bits_[0] |= 0x00000004u;
}
void Transit_Fetch_Stop::clear_has_graphid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transit_Fetch_Stop::clear_graphid() {
  graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_graphid();
}
 ::google::protobuf::uint64 Transit_Fetch_Stop::graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.graphid)
  return graphid_;
}
 void Transit_Fetch_Stop::set_graphid(::google::protobuf::uint64 value) {
  set_has_graphid();
  graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.graphid)
}

// optional string name = 4;
bool Transit_Fetch_Stop::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transit_Fetch_Stop::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void Transit_Fetch_Stop::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transit_Fetch_Stop::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Transit_Fetch_Stop::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.name)
}
 void Transit_Fetch_Stop::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Stop.name)
}
 void Transit_Fetch_Stop::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Stop.name)
}
 ::std::string* Transit_Fetch_Stop::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Stop::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.name)
}

// optional string onestop_id = 5;
bool Transit_Fetch_Stop::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transit_Fetch_Stop::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Transit_Fetch_Stop::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transit_Fetch_Stop::clear_onestop_id() {
  onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onestop_id();
}
 const ::std::string& Transit_Fetch_Stop::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  return onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}
 void Transit_Fetch_Stop::set_onestop_id(const char* value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}
 void Transit_Fetch_Stop::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}
 ::std::string* Transit_Fetch_Stop::mutable_onestop_id() {
  set_has_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  return onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Stop::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  clear_has_onestop_id();
  return onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id != NULL) {
    set_has_onestop_id();
  } else {
    clear_has_onestop_id();
  }
  onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}

// optional uint64 osm_way_id = 6;
bool Transit_Fetch_Stop::has_osm_way_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transit_Fetch_Stop::set_has_osm_way_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Transit_Fetch_Stop::clear_has_osm_way_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transit_Fetch_Stop::clear_osm_way_id() {
  osm_way_id_ = GOOGLE_ULONGLONG(0);
  clear_has_osm_way_id();
}
 ::google::protobuf::uint64 Transit_Fetch_Stop::osm_way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.osm_way_id)
  return osm_way_id_;
}
 void Transit_Fetch_Stop::set_osm_way_id(::google::protobuf::uint64 value) {
  set_has_osm_way_id();
  osm_way_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.osm_way_id)
}

// optional string timezone = 8;
bool Transit_Fetch_Stop::has_timezone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transit_Fetch_Stop::set_has_timezone() {
  _has_bits_[0] |= 0x00000040u;
}
void Transit_Fetch_Stop::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transit_Fetch_Stop::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
 const ::std::string& Transit_Fetch_Stop::timezone() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}
 void Transit_Fetch_Stop::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}
 void Transit_Fetch_Stop::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}
 ::std::string* Transit_Fetch_Stop::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Stop::release_timezone() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Stop::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}

// optional bool wheelchair_boarding = 9;
bool Transit_Fetch_Stop::has_wheelchair_boarding() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transit_Fetch_Stop::set_has_wheelchair_boarding() {
  _has_bits_[0] |= 0x00000080u;
}
void Transit_Fetch_Stop::clear_has_wheelchair_boarding() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transit_Fetch_Stop::clear_wheelchair_boarding() {
  wheelchair_boarding_ = false;
  clear_has_wheelchair_boarding();
}
 bool Transit_Fetch_Stop::wheelchair_boarding() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.wheelchair_boarding)
  return wheelchair_boarding_;
}
 void Transit_Fetch_Stop::set_wheelchair_boarding(bool value) {
  set_has_wheelchair_boarding();
  wheelchair_boarding_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.wheelchair_boarding)
}

// -------------------------------------------------------------------

// Transit_Fetch_StopPair

// optional bool bikes_allowed = 1;
bool Transit_Fetch_StopPair::has_bikes_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transit_Fetch_StopPair::set_has_bikes_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
void Transit_Fetch_StopPair::clear_has_bikes_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transit_Fetch_StopPair::clear_bikes_allowed() {
  bikes_allowed_ = false;
  clear_has_bikes_allowed();
}
 bool Transit_Fetch_StopPair::bikes_allowed() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.bikes_allowed)
  return bikes_allowed_;
}
 void Transit_Fetch_StopPair::set_bikes_allowed(bool value) {
  set_has_bikes_allowed();
  bikes_allowed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.bikes_allowed)
}

// optional uint32 block_id = 2;
bool Transit_Fetch_StopPair::has_block_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transit_Fetch_StopPair::set_has_block_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Transit_Fetch_StopPair::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transit_Fetch_StopPair::clear_block_id() {
  block_id_ = 0u;
  clear_has_block_id();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.block_id)
  return block_id_;
}
 void Transit_Fetch_StopPair::set_block_id(::google::protobuf::uint32 value) {
  set_has_block_id();
  block_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.block_id)
}

// optional uint32 destination_arrival_time = 3;
bool Transit_Fetch_StopPair::has_destination_arrival_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transit_Fetch_StopPair::set_has_destination_arrival_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Transit_Fetch_StopPair::clear_has_destination_arrival_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transit_Fetch_StopPair::clear_destination_arrival_time() {
  destination_arrival_time_ = 0u;
  clear_has_destination_arrival_time();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::destination_arrival_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_arrival_time)
  return destination_arrival_time_;
}
 void Transit_Fetch_StopPair::set_destination_arrival_time(::google::protobuf::uint32 value) {
  set_has_destination_arrival_time();
  destination_arrival_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_arrival_time)
}

// optional uint64 destination_graphid = 4;
bool Transit_Fetch_StopPair::has_destination_graphid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transit_Fetch_StopPair::set_has_destination_graphid() {
  _has_bits_[0] |= 0x00000008u;
}
void Transit_Fetch_StopPair::clear_has_destination_graphid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transit_Fetch_StopPair::clear_destination_graphid() {
  destination_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_destination_graphid();
}
 ::google::protobuf::uint64 Transit_Fetch_StopPair::destination_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_graphid)
  return destination_graphid_;
}
 void Transit_Fetch_StopPair::set_destination_graphid(::google::protobuf::uint64 value) {
  set_has_destination_graphid();
  destination_graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_graphid)
}

// optional string destination_onestop_id = 5;
bool Transit_Fetch_StopPair::has_destination_onestop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transit_Fetch_StopPair::set_has_destination_onestop_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Transit_Fetch_StopPair::clear_has_destination_onestop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transit_Fetch_StopPair::clear_destination_onestop_id() {
  destination_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_onestop_id();
}
 const ::std::string& Transit_Fetch_StopPair::destination_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  return destination_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_destination_onestop_id(const ::std::string& value) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}
 void Transit_Fetch_StopPair::set_destination_onestop_id(const char* value) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}
 void Transit_Fetch_StopPair::set_destination_onestop_id(const char* value, size_t size) {
  set_has_destination_onestop_id();
  destination_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}
 ::std::string* Transit_Fetch_StopPair::mutable_destination_onestop_id() {
  set_has_destination_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  return destination_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_StopPair::release_destination_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  clear_has_destination_onestop_id();
  return destination_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_allocated_destination_onestop_id(::std::string* destination_onestop_id) {
  if (destination_onestop_id != NULL) {
    set_has_destination_onestop_id();
  } else {
    clear_has_destination_onestop_id();
  }
  destination_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}

// optional string operated_by_onestop_id = 6;
bool Transit_Fetch_StopPair::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transit_Fetch_StopPair::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Transit_Fetch_StopPair::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transit_Fetch_StopPair::clear_operated_by_onestop_id() {
  operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_onestop_id();
}
 const ::std::string& Transit_Fetch_StopPair::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  return operated_by_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}
 void Transit_Fetch_StopPair::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}
 void Transit_Fetch_StopPair::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}
 ::std::string* Transit_Fetch_StopPair::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  return operated_by_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_StopPair::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  clear_has_operated_by_onestop_id();
  return operated_by_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != NULL) {
    set_has_operated_by_onestop_id();
  } else {
    clear_has_operated_by_onestop_id();
  }
  operated_by_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}

// optional uint32 origin_departure_time = 7;
bool Transit_Fetch_StopPair::has_origin_departure_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transit_Fetch_StopPair::set_has_origin_departure_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Transit_Fetch_StopPair::clear_has_origin_departure_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transit_Fetch_StopPair::clear_origin_departure_time() {
  origin_departure_time_ = 0u;
  clear_has_origin_departure_time();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::origin_departure_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_departure_time)
  return origin_departure_time_;
}
 void Transit_Fetch_StopPair::set_origin_departure_time(::google::protobuf::uint32 value) {
  set_has_origin_departure_time();
  origin_departure_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_departure_time)
}

// optional uint64 origin_graphid = 8;
bool Transit_Fetch_StopPair::has_origin_graphid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transit_Fetch_StopPair::set_has_origin_graphid() {
  _has_bits_[0] |= 0x00000080u;
}
void Transit_Fetch_StopPair::clear_has_origin_graphid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transit_Fetch_StopPair::clear_origin_graphid() {
  origin_graphid_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_graphid();
}
 ::google::protobuf::uint64 Transit_Fetch_StopPair::origin_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_graphid)
  return origin_graphid_;
}
 void Transit_Fetch_StopPair::set_origin_graphid(::google::protobuf::uint64 value) {
  set_has_origin_graphid();
  origin_graphid_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_graphid)
}

// optional string origin_onestop_id = 9;
bool Transit_Fetch_StopPair::has_origin_onestop_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transit_Fetch_StopPair::set_has_origin_onestop_id() {
  _has_bits_[0] |= 0x00000100u;
}
void Transit_Fetch_StopPair::clear_has_origin_onestop_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transit_Fetch_StopPair::clear_origin_onestop_id() {
  origin_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_onestop_id();
}
 const ::std::string& Transit_Fetch_StopPair::origin_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  return origin_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_origin_onestop_id(const ::std::string& value) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}
 void Transit_Fetch_StopPair::set_origin_onestop_id(const char* value) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}
 void Transit_Fetch_StopPair::set_origin_onestop_id(const char* value, size_t size) {
  set_has_origin_onestop_id();
  origin_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}
 ::std::string* Transit_Fetch_StopPair::mutable_origin_onestop_id() {
  set_has_origin_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  return origin_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_StopPair::release_origin_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  clear_has_origin_onestop_id();
  return origin_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_allocated_origin_onestop_id(::std::string* origin_onestop_id) {
  if (origin_onestop_id != NULL) {
    set_has_origin_onestop_id();
  } else {
    clear_has_origin_onestop_id();
  }
  origin_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}

// optional uint32 route_index = 10;
bool Transit_Fetch_StopPair::has_route_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transit_Fetch_StopPair::set_has_route_index() {
  _has_bits_[0] |= 0x00000200u;
}
void Transit_Fetch_StopPair::clear_has_route_index() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transit_Fetch_StopPair::clear_route_index() {
  route_index_ = 0u;
  clear_has_route_index();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.route_index)
  return route_index_;
}
 void Transit_Fetch_StopPair::set_route_index(::google::protobuf::uint32 value) {
  set_has_route_index();
  route_index_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.route_index)
}

// repeated uint32 service_added_dates = 11;
int Transit_Fetch_StopPair::service_added_dates_size() const {
  return service_added_dates_.size();
}
void Transit_Fetch_StopPair::clear_service_added_dates() {
  service_added_dates_.Clear();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::service_added_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return service_added_dates_.Get(index);
}
 void Transit_Fetch_StopPair::set_service_added_dates(int index, ::google::protobuf::uint32 value) {
  service_added_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
}
 void Transit_Fetch_StopPair::add_service_added_dates(::google::protobuf::uint32 value) {
  service_added_dates_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_Fetch_StopPair::service_added_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return service_added_dates_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_Fetch_StopPair::mutable_service_added_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return &service_added_dates_;
}

// repeated bool service_days_of_week = 12;
int Transit_Fetch_StopPair::service_days_of_week_size() const {
  return service_days_of_week_.size();
}
void Transit_Fetch_StopPair::clear_service_days_of_week() {
  service_days_of_week_.Clear();
}
 bool Transit_Fetch_StopPair::service_days_of_week(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return service_days_of_week_.Get(index);
}
 void Transit_Fetch_StopPair::set_service_days_of_week(int index, bool value) {
  service_days_of_week_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
}
 void Transit_Fetch_StopPair::add_service_days_of_week(bool value) {
  service_days_of_week_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
}
 const ::google::protobuf::RepeatedField< bool >&
Transit_Fetch_StopPair::service_days_of_week() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return service_days_of_week_;
}
 ::google::protobuf::RepeatedField< bool >*
Transit_Fetch_StopPair::mutable_service_days_of_week() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return &service_days_of_week_;
}

// optional uint32 service_end_date = 13;
bool Transit_Fetch_StopPair::has_service_end_date() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Transit_Fetch_StopPair::set_has_service_end_date() {
  _has_bits_[0] |= 0x00001000u;
}
void Transit_Fetch_StopPair::clear_has_service_end_date() {
  _has_bits_[0] &= ~0x00001000u;
}
void Transit_Fetch_StopPair::clear_service_end_date() {
  service_end_date_ = 0u;
  clear_has_service_end_date();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::service_end_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_end_date)
  return service_end_date_;
}
 void Transit_Fetch_StopPair::set_service_end_date(::google::protobuf::uint32 value) {
  set_has_service_end_date();
  service_end_date_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_end_date)
}

// repeated uint32 service_except_dates = 14;
int Transit_Fetch_StopPair::service_except_dates_size() const {
  return service_except_dates_.size();
}
void Transit_Fetch_StopPair::clear_service_except_dates() {
  service_except_dates_.Clear();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::service_except_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return service_except_dates_.Get(index);
}
 void Transit_Fetch_StopPair::set_service_except_dates(int index, ::google::protobuf::uint32 value) {
  service_except_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
}
 void Transit_Fetch_StopPair::add_service_except_dates(::google::protobuf::uint32 value) {
  service_except_dates_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Transit_Fetch_StopPair::service_except_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return service_except_dates_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Transit_Fetch_StopPair::mutable_service_except_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return &service_except_dates_;
}

// optional uint32 service_start_date = 15;
bool Transit_Fetch_StopPair::has_service_start_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Transit_Fetch_StopPair::set_has_service_start_date() {
  _has_bits_[0] |= 0x00004000u;
}
void Transit_Fetch_StopPair::clear_has_service_start_date() {
  _has_bits_[0] &= ~0x00004000u;
}
void Transit_Fetch_StopPair::clear_service_start_date() {
  service_start_date_ = 0u;
  clear_has_service_start_date();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::service_start_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_start_date)
  return service_start_date_;
}
 void Transit_Fetch_StopPair::set_service_start_date(::google::protobuf::uint32 value) {
  set_has_service_start_date();
  service_start_date_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_start_date)
}

// optional string trip_headsign = 16;
bool Transit_Fetch_StopPair::has_trip_headsign() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Transit_Fetch_StopPair::set_has_trip_headsign() {
  _has_bits_[0] |= 0x00008000u;
}
void Transit_Fetch_StopPair::clear_has_trip_headsign() {
  _has_bits_[0] &= ~0x00008000u;
}
void Transit_Fetch_StopPair::clear_trip_headsign() {
  trip_headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trip_headsign();
}
 const ::std::string& Transit_Fetch_StopPair::trip_headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  return trip_headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_trip_headsign(const ::std::string& value) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}
 void Transit_Fetch_StopPair::set_trip_headsign(const char* value) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}
 void Transit_Fetch_StopPair::set_trip_headsign(const char* value, size_t size) {
  set_has_trip_headsign();
  trip_headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}
 ::std::string* Transit_Fetch_StopPair::mutable_trip_headsign() {
  set_has_trip_headsign();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  return trip_headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_StopPair::release_trip_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  clear_has_trip_headsign();
  return trip_headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_StopPair::set_allocated_trip_headsign(::std::string* trip_headsign) {
  if (trip_headsign != NULL) {
    set_has_trip_headsign();
  } else {
    clear_has_trip_headsign();
  }
  trip_headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_headsign);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}

// optional uint32 trip_id = 17;
bool Transit_Fetch_StopPair::has_trip_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Transit_Fetch_StopPair::set_has_trip_id() {
  _has_bits_[0] |= 0x00010000u;
}
void Transit_Fetch_StopPair::clear_has_trip_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void Transit_Fetch_StopPair::clear_trip_id() {
  trip_id_ = 0u;
  clear_has_trip_id();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.trip_id)
  return trip_id_;
}
 void Transit_Fetch_StopPair::set_trip_id(::google::protobuf::uint32 value) {
  set_has_trip_id();
  trip_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.trip_id)
}

// optional bool wheelchair_accessible = 18;
bool Transit_Fetch_StopPair::has_wheelchair_accessible() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Transit_Fetch_StopPair::set_has_wheelchair_accessible() {
  _has_bits_[0] |= 0x00020000u;
}
void Transit_Fetch_StopPair::clear_has_wheelchair_accessible() {
  _has_bits_[0] &= ~0x00020000u;
}
void Transit_Fetch_StopPair::clear_wheelchair_accessible() {
  wheelchair_accessible_ = false;
  clear_has_wheelchair_accessible();
}
 bool Transit_Fetch_StopPair::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.wheelchair_accessible)
  return wheelchair_accessible_;
}
 void Transit_Fetch_StopPair::set_wheelchair_accessible(bool value) {
  set_has_wheelchair_accessible();
  wheelchair_accessible_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.wheelchair_accessible)
}

// optional uint32 shape_id = 20;
bool Transit_Fetch_StopPair::has_shape_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Transit_Fetch_StopPair::set_has_shape_id() {
  _has_bits_[0] |= 0x00040000u;
}
void Transit_Fetch_StopPair::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void Transit_Fetch_StopPair::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.shape_id)
  return shape_id_;
}
 void Transit_Fetch_StopPair::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.shape_id)
}

// optional float origin_dist_traveled = 21;
bool Transit_Fetch_StopPair::has_origin_dist_traveled() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Transit_Fetch_StopPair::set_has_origin_dist_traveled() {
  _has_bits_[0] |= 0x00080000u;
}
void Transit_Fetch_StopPair::clear_has_origin_dist_traveled() {
  _has_bits_[0] &= ~0x00080000u;
}
void Transit_Fetch_StopPair::clear_origin_dist_traveled() {
  origin_dist_traveled_ = 0;
  clear_has_origin_dist_traveled();
}
 float Transit_Fetch_StopPair::origin_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_dist_traveled)
  return origin_dist_traveled_;
}
 void Transit_Fetch_StopPair::set_origin_dist_traveled(float value) {
  set_has_origin_dist_traveled();
  origin_dist_traveled_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_dist_traveled)
}

// optional float destination_dist_traveled = 22;
bool Transit_Fetch_StopPair::has_destination_dist_traveled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Transit_Fetch_StopPair::set_has_destination_dist_traveled() {
  _has_bits_[0] |= 0x00100000u;
}
void Transit_Fetch_StopPair::clear_has_destination_dist_traveled() {
  _has_bits_[0] &= ~0x00100000u;
}
void Transit_Fetch_StopPair::clear_destination_dist_traveled() {
  destination_dist_traveled_ = 0;
  clear_has_destination_dist_traveled();
}
 float Transit_Fetch_StopPair::destination_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_dist_traveled)
  return destination_dist_traveled_;
}
 void Transit_Fetch_StopPair::set_destination_dist_traveled(float value) {
  set_has_destination_dist_traveled();
  destination_dist_traveled_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_dist_traveled)
}

// optional uint32 frequency_end_time = 23;
bool Transit_Fetch_StopPair::has_frequency_end_time() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Transit_Fetch_StopPair::set_has_frequency_end_time() {
  _has_bits_[0] |= 0x00200000u;
}
void Transit_Fetch_StopPair::clear_has_frequency_end_time() {
  _has_bits_[0] &= ~0x00200000u;
}
void Transit_Fetch_StopPair::clear_frequency_end_time() {
  frequency_end_time_ = 0u;
  clear_has_frequency_end_time();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::frequency_end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_end_time)
  return frequency_end_time_;
}
 void Transit_Fetch_StopPair::set_frequency_end_time(::google::protobuf::uint32 value) {
  set_has_frequency_end_time();
  frequency_end_time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_end_time)
}

// optional uint32 frequency_headway_seconds = 24;
bool Transit_Fetch_StopPair::has_frequency_headway_seconds() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Transit_Fetch_StopPair::set_has_frequency_headway_seconds() {
  _has_bits_[0] |= 0x00400000u;
}
void Transit_Fetch_StopPair::clear_has_frequency_headway_seconds() {
  _has_bits_[0] &= ~0x00400000u;
}
void Transit_Fetch_StopPair::clear_frequency_headway_seconds() {
  frequency_headway_seconds_ = 0u;
  clear_has_frequency_headway_seconds();
}
 ::google::protobuf::uint32 Transit_Fetch_StopPair::frequency_headway_seconds() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_headway_seconds)
  return frequency_headway_seconds_;
}
 void Transit_Fetch_StopPair::set_frequency_headway_seconds(::google::protobuf::uint32 value) {
  set_has_frequency_headway_seconds();
  frequency_headway_seconds_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_headway_seconds)
}

// -------------------------------------------------------------------

// Transit_Fetch_Route

// optional string name = 1;
bool Transit_Fetch_Route::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transit_Fetch_Route::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Transit_Fetch_Route::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transit_Fetch_Route::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Transit_Fetch_Route::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.name)
}
 void Transit_Fetch_Route::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.name)
}
 void Transit_Fetch_Route::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.name)
}
 ::std::string* Transit_Fetch_Route::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.name)
}

// optional string onestop_id = 2;
bool Transit_Fetch_Route::has_onestop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transit_Fetch_Route::set_has_onestop_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Transit_Fetch_Route::clear_has_onestop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transit_Fetch_Route::clear_onestop_id() {
  onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onestop_id();
}
 const ::std::string& Transit_Fetch_Route::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  return onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_onestop_id(const ::std::string& value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}
 void Transit_Fetch_Route::set_onestop_id(const char* value) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}
 void Transit_Fetch_Route::set_onestop_id(const char* value, size_t size) {
  set_has_onestop_id();
  onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}
 ::std::string* Transit_Fetch_Route::mutable_onestop_id() {
  set_has_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  return onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  clear_has_onestop_id();
  return onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_onestop_id(::std::string* onestop_id) {
  if (onestop_id != NULL) {
    set_has_onestop_id();
  } else {
    clear_has_onestop_id();
  }
  onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}

// optional string operated_by_name = 3;
bool Transit_Fetch_Route::has_operated_by_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transit_Fetch_Route::set_has_operated_by_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Transit_Fetch_Route::clear_has_operated_by_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transit_Fetch_Route::clear_operated_by_name() {
  operated_by_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_name();
}
 const ::std::string& Transit_Fetch_Route::operated_by_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  return operated_by_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_operated_by_name(const ::std::string& value) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}
 void Transit_Fetch_Route::set_operated_by_name(const char* value) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}
 void Transit_Fetch_Route::set_operated_by_name(const char* value, size_t size) {
  set_has_operated_by_name();
  operated_by_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}
 ::std::string* Transit_Fetch_Route::mutable_operated_by_name() {
  set_has_operated_by_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  return operated_by_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_operated_by_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  clear_has_operated_by_name();
  return operated_by_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_operated_by_name(::std::string* operated_by_name) {
  if (operated_by_name != NULL) {
    set_has_operated_by_name();
  } else {
    clear_has_operated_by_name();
  }
  operated_by_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}

// optional string operated_by_onestop_id = 4;
bool Transit_Fetch_Route::has_operated_by_onestop_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transit_Fetch_Route::set_has_operated_by_onestop_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Transit_Fetch_Route::clear_has_operated_by_onestop_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transit_Fetch_Route::clear_operated_by_onestop_id() {
  operated_by_onestop_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_onestop_id();
}
 const ::std::string& Transit_Fetch_Route::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  return operated_by_onestop_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_operated_by_onestop_id(const ::std::string& value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}
 void Transit_Fetch_Route::set_operated_by_onestop_id(const char* value) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}
 void Transit_Fetch_Route::set_operated_by_onestop_id(const char* value, size_t size) {
  set_has_operated_by_onestop_id();
  operated_by_onestop_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}
 ::std::string* Transit_Fetch_Route::mutable_operated_by_onestop_id() {
  set_has_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  return operated_by_onestop_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  clear_has_operated_by_onestop_id();
  return operated_by_onestop_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_operated_by_onestop_id(::std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != NULL) {
    set_has_operated_by_onestop_id();
  } else {
    clear_has_operated_by_onestop_id();
  }
  operated_by_onestop_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_onestop_id);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}

// optional string operated_by_website = 5;
bool Transit_Fetch_Route::has_operated_by_website() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transit_Fetch_Route::set_has_operated_by_website() {
  _has_bits_[0] |= 0x00000010u;
}
void Transit_Fetch_Route::clear_has_operated_by_website() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transit_Fetch_Route::clear_operated_by_website() {
  operated_by_website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operated_by_website();
}
 const ::std::string& Transit_Fetch_Route::operated_by_website() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  return operated_by_website_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_operated_by_website(const ::std::string& value) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}
 void Transit_Fetch_Route::set_operated_by_website(const char* value) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}
 void Transit_Fetch_Route::set_operated_by_website(const char* value, size_t size) {
  set_has_operated_by_website();
  operated_by_website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}
 ::std::string* Transit_Fetch_Route::mutable_operated_by_website() {
  set_has_operated_by_website();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  return operated_by_website_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_operated_by_website() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  clear_has_operated_by_website();
  return operated_by_website_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_operated_by_website(::std::string* operated_by_website) {
  if (operated_by_website != NULL) {
    set_has_operated_by_website();
  } else {
    clear_has_operated_by_website();
  }
  operated_by_website_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operated_by_website);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}

// optional uint32 route_color = 6;
bool Transit_Fetch_Route::has_route_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transit_Fetch_Route::set_has_route_color() {
  _has_bits_[0] |= 0x00000020u;
}
void Transit_Fetch_Route::clear_has_route_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transit_Fetch_Route::clear_route_color() {
  route_color_ = 0u;
  clear_has_route_color();
}
 ::google::protobuf::uint32 Transit_Fetch_Route::route_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_color)
  return route_color_;
}
 void Transit_Fetch_Route::set_route_color(::google::protobuf::uint32 value) {
  set_has_route_color();
  route_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_color)
}

// optional string route_desc = 7;
bool Transit_Fetch_Route::has_route_desc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transit_Fetch_Route::set_has_route_desc() {
  _has_bits_[0] |= 0x00000040u;
}
void Transit_Fetch_Route::clear_has_route_desc() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transit_Fetch_Route::clear_route_desc() {
  route_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_desc();
}
 const ::std::string& Transit_Fetch_Route::route_desc() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  return route_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_route_desc(const ::std::string& value) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}
 void Transit_Fetch_Route::set_route_desc(const char* value) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}
 void Transit_Fetch_Route::set_route_desc(const char* value, size_t size) {
  set_has_route_desc();
  route_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}
 ::std::string* Transit_Fetch_Route::mutable_route_desc() {
  set_has_route_desc();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  return route_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_route_desc() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  clear_has_route_desc();
  return route_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_route_desc(::std::string* route_desc) {
  if (route_desc != NULL) {
    set_has_route_desc();
  } else {
    clear_has_route_desc();
  }
  route_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_desc);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}

// optional string route_long_name = 8;
bool Transit_Fetch_Route::has_route_long_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transit_Fetch_Route::set_has_route_long_name() {
  _has_bits_[0] |= 0x00000080u;
}
void Transit_Fetch_Route::clear_has_route_long_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transit_Fetch_Route::clear_route_long_name() {
  route_long_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route_long_name();
}
 const ::std::string& Transit_Fetch_Route::route_long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  return route_long_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_route_long_name(const ::std::string& value) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}
 void Transit_Fetch_Route::set_route_long_name(const char* value) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}
 void Transit_Fetch_Route::set_route_long_name(const char* value, size_t size) {
  set_has_route_long_name();
  route_long_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}
 ::std::string* Transit_Fetch_Route::mutable_route_long_name() {
  set_has_route_long_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  return route_long_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Route::release_route_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  clear_has_route_long_name();
  return route_long_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Route::set_allocated_route_long_name(::std::string* route_long_name) {
  if (route_long_name != NULL) {
    set_has_route_long_name();
  } else {
    clear_has_route_long_name();
  }
  route_long_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_long_name);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}

// optional uint32 route_text_color = 9;
bool Transit_Fetch_Route::has_route_text_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transit_Fetch_Route::set_has_route_text_color() {
  _has_bits_[0] |= 0x00000100u;
}
void Transit_Fetch_Route::clear_has_route_text_color() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transit_Fetch_Route::clear_route_text_color() {
  route_text_color_ = 0u;
  clear_has_route_text_color();
}
 ::google::protobuf::uint32 Transit_Fetch_Route::route_text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_text_color)
  return route_text_color_;
}
 void Transit_Fetch_Route::set_route_text_color(::google::protobuf::uint32 value) {
  set_has_route_text_color();
  route_text_color_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_text_color)
}

// optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
bool Transit_Fetch_Route::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transit_Fetch_Route::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000200u;
}
void Transit_Fetch_Route::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transit_Fetch_Route::clear_vehicle_type() {
  vehicle_type_ = 0;
  clear_has_vehicle_type();
}
 ::valhalla::mjolnir::Transit_Fetch_VehicleType Transit_Fetch_Route::vehicle_type() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.vehicle_type)
  return static_cast< ::valhalla::mjolnir::Transit_Fetch_VehicleType >(vehicle_type_);
}
 void Transit_Fetch_Route::set_vehicle_type(::valhalla::mjolnir::Transit_Fetch_VehicleType value) {
  assert(::valhalla::mjolnir::Transit_Fetch_VehicleType_IsValid(value));
  set_has_vehicle_type();
  vehicle_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.vehicle_type)
}

// -------------------------------------------------------------------

// Transit_Fetch_Shape

// optional uint32 shape_id = 1;
bool Transit_Fetch_Shape::has_shape_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transit_Fetch_Shape::set_has_shape_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Transit_Fetch_Shape::clear_has_shape_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transit_Fetch_Shape::clear_shape_id() {
  shape_id_ = 0u;
  clear_has_shape_id();
}
 ::google::protobuf::uint32 Transit_Fetch_Shape::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Shape.shape_id)
  return shape_id_;
}
 void Transit_Fetch_Shape::set_shape_id(::google::protobuf::uint32 value) {
  set_has_shape_id();
  shape_id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Shape.shape_id)
}

// optional bytes encoded_shape = 2;
bool Transit_Fetch_Shape::has_encoded_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transit_Fetch_Shape::set_has_encoded_shape() {
  _has_bits_[0] |= 0x00000002u;
}
void Transit_Fetch_Shape::clear_has_encoded_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transit_Fetch_Shape::clear_encoded_shape() {
  encoded_shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encoded_shape();
}
 const ::std::string& Transit_Fetch_Shape::encoded_shape() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  return encoded_shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Shape::set_encoded_shape(const ::std::string& value) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}
 void Transit_Fetch_Shape::set_encoded_shape(const char* value) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}
 void Transit_Fetch_Shape::set_encoded_shape(const void* value, size_t size) {
  set_has_encoded_shape();
  encoded_shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}
 ::std::string* Transit_Fetch_Shape::mutable_encoded_shape() {
  set_has_encoded_shape();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  return encoded_shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transit_Fetch_Shape::release_encoded_shape() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  clear_has_encoded_shape();
  return encoded_shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transit_Fetch_Shape::set_allocated_encoded_shape(::std::string* encoded_shape) {
  if (encoded_shape != NULL) {
    set_has_encoded_shape();
  } else {
    clear_has_encoded_shape();
  }
  encoded_shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoded_shape);
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}

// -------------------------------------------------------------------

// Transit_Fetch

// repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
int Transit_Fetch::stops_size() const {
  return stops_.size();
}
void Transit_Fetch::clear_stops() {
  stops_.Clear();
}
const ::valhalla::mjolnir::Transit_Fetch_Stop& Transit_Fetch::stops(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.stops)
  return stops_.Get(index);
}
::valhalla::mjolnir::Transit_Fetch_Stop* Transit_Fetch::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.stops)
  return stops_.Mutable(index);
}
::valhalla::mjolnir::Transit_Fetch_Stop* Transit_Fetch::add_stops() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.stops)
  return stops_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >*
Transit_Fetch::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.stops)
  return &stops_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >&
Transit_Fetch::stops() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.stops)
  return stops_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
int Transit_Fetch::stop_pairs_size() const {
  return stop_pairs_.size();
}
void Transit_Fetch::clear_stop_pairs() {
  stop_pairs_.Clear();
}
const ::valhalla::mjolnir::Transit_Fetch_StopPair& Transit_Fetch::stop_pairs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return stop_pairs_.Get(index);
}
::valhalla::mjolnir::Transit_Fetch_StopPair* Transit_Fetch::mutable_stop_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return stop_pairs_.Mutable(index);
}
::valhalla::mjolnir::Transit_Fetch_StopPair* Transit_Fetch::add_stop_pairs() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return stop_pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >*
Transit_Fetch::mutable_stop_pairs() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return &stop_pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >&
Transit_Fetch::stop_pairs() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return stop_pairs_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
int Transit_Fetch::routes_size() const {
  return routes_.size();
}
void Transit_Fetch::clear_routes() {
  routes_.Clear();
}
const ::valhalla::mjolnir::Transit_Fetch_Route& Transit_Fetch::routes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.routes)
  return routes_.Get(index);
}
::valhalla::mjolnir::Transit_Fetch_Route* Transit_Fetch::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.routes)
  return routes_.Mutable(index);
}
::valhalla::mjolnir::Transit_Fetch_Route* Transit_Fetch::add_routes() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >*
Transit_Fetch::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >&
Transit_Fetch::routes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.routes)
  return routes_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
int Transit_Fetch::shapes_size() const {
  return shapes_.size();
}
void Transit_Fetch::clear_shapes() {
  shapes_.Clear();
}
const ::valhalla::mjolnir::Transit_Fetch_Shape& Transit_Fetch::shapes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.shapes)
  return shapes_.Get(index);
}
::valhalla::mjolnir::Transit_Fetch_Shape* Transit_Fetch::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.shapes)
  return shapes_.Mutable(index);
}
::valhalla::mjolnir::Transit_Fetch_Shape* Transit_Fetch::add_shapes() {
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.shapes)
  return shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >*
Transit_Fetch::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.shapes)
  return &shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >&
Transit_Fetch::shapes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.shapes)
  return shapes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mjolnir
}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
